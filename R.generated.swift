//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `Auth`.
    static let auth = _R.storyboard.auth()
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Auth", bundle: ...)`
    static func auth(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.auth)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 8 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `bgColor`.
    static let bgColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "bgColor")
    /// Color `placeholderColor`.
    static let placeholderColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "placeholderColor")
    /// Color `primaryColor`.
    static let primaryColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "primaryColor")
    /// Color `secondaryColor`.
    static let secondaryColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondaryColor")
    /// Color `tint1`.
    static let tint1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "tint1")
    /// Color `tint2`.
    static let tint2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "tint2")
    /// Color `tretiaryColor`.
    static let tretiaryColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "tretiaryColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "bgColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func bgColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.bgColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "placeholderColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func placeholderColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.placeholderColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primaryColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondaryColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "tint1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tint1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tint1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "tint2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tint2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tint2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "tretiaryColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tretiaryColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tretiaryColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "bgColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func bgColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.bgColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "placeholderColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func placeholderColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.placeholderColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "primaryColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func primaryColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.primaryColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "secondaryColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func secondaryColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.secondaryColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "tint1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func tint1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.tint1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "tint2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func tint2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.tint2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "tretiaryColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func tretiaryColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.tretiaryColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Sofia Pro Bold Az.otf`.
    static let sofiaProBoldAzOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Sofia Pro Bold Az", pathExtension: "otf")
    /// Resource file `Sofia Pro Light Az.otf`.
    static let sofiaProLightAzOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Sofia Pro Light Az", pathExtension: "otf")
    /// Resource file `Sofia Pro UltraLight Az.otf`.
    static let sofiaProUltraLightAzOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Sofia Pro UltraLight Az", pathExtension: "otf")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Sofia Pro Bold Az", withExtension: "otf")`
    static func sofiaProBoldAzOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sofiaProBoldAzOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Sofia Pro Light Az", withExtension: "otf")`
    static func sofiaProLightAzOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sofiaProLightAzOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Sofia Pro UltraLight Az", withExtension: "otf")`
    static func sofiaProUltraLightAzOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sofiaProUltraLightAzOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `SofiaPro-Bold`.
    static let sofiaProBold = Rswift.FontResource(fontName: "SofiaPro-Bold")
    /// Font `SofiaPro-Light`.
    static let sofiaProLight = Rswift.FontResource(fontName: "SofiaPro-Light")
    /// Font `SofiaPro-UltraLight`.
    static let sofiaProUltraLight = Rswift.FontResource(fontName: "SofiaPro-UltraLight")

    /// `UIFont(name: "SofiaPro-Bold", size: ...)`
    static func sofiaProBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sofiaProBold, size: size)
    }

    /// `UIFont(name: "SofiaPro-Light", size: ...)`
    static func sofiaProLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sofiaProLight, size: size)
    }

    /// `UIFont(name: "SofiaPro-UltraLight", size: ...)`
    static func sofiaProUltraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sofiaProUltraLight, size: size)
    }

    static func validate() throws {
      if R.font.sofiaProBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SofiaPro-Bold' could not be loaded, is 'Sofia Pro Bold Az.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sofiaProLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SofiaPro-Light' could not be loaded, is 'Sofia Pro Light Az.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sofiaProUltraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SofiaPro-UltraLight' could not be loaded, is 'Sofia Pro UltraLight Az.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 67 images.
  struct image {
    /// Image `btnAdd`.
    static let btnAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "btnAdd")
    /// Image `btnBack1`.
    static let btnBack1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btnBack1")
    /// Image `btnBack`.
    static let btnBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "btnBack")
    /// Image `btnCheckMarkSelected`.
    static let btnCheckMarkSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "btnCheckMarkSelected")
    /// Image `btnCrossSmall`.
    static let btnCrossSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "btnCrossSmall")
    /// Image `btnDrive`.
    static let btnDrive = Rswift.ImageResource(bundle: R.hostingBundle, name: "btnDrive")
    /// Image `btnEdit`.
    static let btnEdit = Rswift.ImageResource(bundle: R.hostingBundle, name: "btnEdit")
    /// Image `btnHistory`.
    static let btnHistory = Rswift.ImageResource(bundle: R.hostingBundle, name: "btnHistory")
    /// Image `btnHome`.
    static let btnHome = Rswift.ImageResource(bundle: R.hostingBundle, name: "btnHome")
    /// Image `btnOngoing`.
    static let btnOngoing = Rswift.ImageResource(bundle: R.hostingBundle, name: "btnOngoing")
    /// Image `btnPickUp`.
    static let btnPickUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "btnPickUp")
    /// Image `btnRides`.
    static let btnRides = Rswift.ImageResource(bundle: R.hostingBundle, name: "btnRides")
    /// Image `btnSearch`.
    static let btnSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "btnSearch")
    /// Image `btnSetting`.
    static let btnSetting = Rswift.ImageResource(bundle: R.hostingBundle, name: "btnSetting")
    /// Image `btnSideMenu`.
    static let btnSideMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "btnSideMenu")
    /// Image `btnSupport`.
    static let btnSupport = Rswift.ImageResource(bundle: R.hostingBundle, name: "btnSupport")
    /// Image `btnWallet`.
    static let btnWallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "btnWallet")
    /// Image `btnWork`.
    static let btnWork = Rswift.ImageResource(bundle: R.hostingBundle, name: "btnWork")
    /// Image `chatSendButton`.
    static let chatSendButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatSendButton")
    /// Image `downward-arrow`.
    static let downwardArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "downward-arrow")
    /// Image `iconBike`.
    static let iconBike = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconBike")
    /// Image `iconCalendar`.
    static let iconCalendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCalendar")
    /// Image `iconCar1`.
    static let iconCar1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCar1")
    /// Image `iconCar2`.
    static let iconCar2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCar2")
    /// Image `iconCards`.
    static let iconCards = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCards")
    /// Image `iconCash`.
    static let iconCash = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCash")
    /// Image `iconCheckMark`.
    static let iconCheckMark = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCheckMark")
    /// Image `iconDelete`.
    static let iconDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconDelete")
    /// Image `iconDeliveryBike`.
    static let iconDeliveryBike = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconDeliveryBike")
    /// Image `iconDrop`.
    static let iconDrop = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconDrop")
    /// Image `iconDummy1`.
    static let iconDummy1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconDummy1")
    /// Image `iconDummy2`.
    static let iconDummy2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconDummy2")
    /// Image `iconEmailSelected`.
    static let iconEmailSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconEmailSelected")
    /// Image `iconEmail`.
    static let iconEmail = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconEmail")
    /// Image `iconFlutterWave`.
    static let iconFlutterWave = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconFlutterWave")
    /// Image `iconHidePassword`.
    static let iconHidePassword = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconHidePassword")
    /// Image `iconLocationBlue`.
    static let iconLocationBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconLocationBlue")
    /// Image `iconLocationRed`.
    static let iconLocationRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconLocationRed")
    /// Image `iconLock`.
    static let iconLock = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconLock")
    /// Image `iconLogout`.
    static let iconLogout = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconLogout")
    /// Image `iconMap`.
    static let iconMap = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconMap")
    /// Image `iconMessage`.
    static let iconMessage = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconMessage")
    /// Image `iconNoData1`.
    static let iconNoData1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconNoData1")
    /// Image `iconPaymentMode`.
    static let iconPaymentMode = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconPaymentMode")
    /// Image `iconPhone`.
    static let iconPhone = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconPhone")
    /// Image `iconPickup`.
    static let iconPickup = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconPickup")
    /// Image `iconPrivacy`.
    static let iconPrivacy = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconPrivacy")
    /// Image `iconPromoCode`.
    static let iconPromoCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconPromoCode")
    /// Image `iconSOS`.
    static let iconSOS = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconSOS")
    /// Image `iconShare`.
    static let iconShare = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconShare")
    /// Image `iconShowPassword`.
    static let iconShowPassword = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconShowPassword")
    /// Image `iconSupport`.
    static let iconSupport = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconSupport")
    /// Image `iconTerms`.
    static let iconTerms = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconTerms")
    /// Image `iconTexi`.
    static let iconTexi = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconTexi")
    /// Image `iconTruck`.
    static let iconTruck = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconTruck")
    /// Image `iconUserPlaceholder`.
    static let iconUserPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconUserPlaceholder")
    /// Image `iconUser`.
    static let iconUser = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconUser")
    /// Image `iconVisa`.
    static let iconVisa = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconVisa")
    /// Image `iconWallet`.
    static let iconWallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconWallet")
    /// Image `iconWork`.
    static let iconWork = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconWork")
    /// Image `languageIcon`.
    static let languageIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "languageIcon")
    /// Image `launchScreenIcon`.
    static let launchScreenIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "launchScreenIcon")
    /// Image `mapCarIcon`.
    static let mapCarIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapCarIcon")
    /// Image `masterCard_icon`.
    static let masterCard_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "masterCard_icon")
    /// Image `roundWheelIcon`.
    static let roundWheelIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "roundWheelIcon")
    /// Image `stripe-Logo`.
    static let stripeLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "stripe-Logo")
    /// Image `targetHomeIcon`.
    static let targetHomeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "targetHomeIcon")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btnAdd", bundle: ..., traitCollection: ...)`
    static func btnAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnAdd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btnBack", bundle: ..., traitCollection: ...)`
    static func btnBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btnBack1", bundle: ..., traitCollection: ...)`
    static func btnBack1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnBack1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btnCheckMarkSelected", bundle: ..., traitCollection: ...)`
    static func btnCheckMarkSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnCheckMarkSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btnCrossSmall", bundle: ..., traitCollection: ...)`
    static func btnCrossSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnCrossSmall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btnDrive", bundle: ..., traitCollection: ...)`
    static func btnDrive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnDrive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btnEdit", bundle: ..., traitCollection: ...)`
    static func btnEdit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnEdit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btnHistory", bundle: ..., traitCollection: ...)`
    static func btnHistory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnHistory, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btnHome", bundle: ..., traitCollection: ...)`
    static func btnHome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnHome, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btnOngoing", bundle: ..., traitCollection: ...)`
    static func btnOngoing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnOngoing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btnPickUp", bundle: ..., traitCollection: ...)`
    static func btnPickUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnPickUp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btnRides", bundle: ..., traitCollection: ...)`
    static func btnRides(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnRides, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btnSearch", bundle: ..., traitCollection: ...)`
    static func btnSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnSearch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btnSetting", bundle: ..., traitCollection: ...)`
    static func btnSetting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnSetting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btnSideMenu", bundle: ..., traitCollection: ...)`
    static func btnSideMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnSideMenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btnSupport", bundle: ..., traitCollection: ...)`
    static func btnSupport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnSupport, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btnWallet", bundle: ..., traitCollection: ...)`
    static func btnWallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnWallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btnWork", bundle: ..., traitCollection: ...)`
    static func btnWork(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnWork, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatSendButton", bundle: ..., traitCollection: ...)`
    static func chatSendButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatSendButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "downward-arrow", bundle: ..., traitCollection: ...)`
    static func downwardArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downwardArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconBike", bundle: ..., traitCollection: ...)`
    static func iconBike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBike, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCalendar", bundle: ..., traitCollection: ...)`
    static func iconCalendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCalendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCar1", bundle: ..., traitCollection: ...)`
    static func iconCar1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCar1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCar2", bundle: ..., traitCollection: ...)`
    static func iconCar2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCar2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCards", bundle: ..., traitCollection: ...)`
    static func iconCards(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCards, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCash", bundle: ..., traitCollection: ...)`
    static func iconCash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCheckMark", bundle: ..., traitCollection: ...)`
    static func iconCheckMark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCheckMark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconDelete", bundle: ..., traitCollection: ...)`
    static func iconDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconDelete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconDeliveryBike", bundle: ..., traitCollection: ...)`
    static func iconDeliveryBike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconDeliveryBike, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconDrop", bundle: ..., traitCollection: ...)`
    static func iconDrop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconDrop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconDummy1", bundle: ..., traitCollection: ...)`
    static func iconDummy1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconDummy1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconDummy2", bundle: ..., traitCollection: ...)`
    static func iconDummy2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconDummy2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconEmail", bundle: ..., traitCollection: ...)`
    static func iconEmail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconEmail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconEmailSelected", bundle: ..., traitCollection: ...)`
    static func iconEmailSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconEmailSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconFlutterWave", bundle: ..., traitCollection: ...)`
    static func iconFlutterWave(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconFlutterWave, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconHidePassword", bundle: ..., traitCollection: ...)`
    static func iconHidePassword(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconHidePassword, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconLocationBlue", bundle: ..., traitCollection: ...)`
    static func iconLocationBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconLocationBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconLocationRed", bundle: ..., traitCollection: ...)`
    static func iconLocationRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconLocationRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconLock", bundle: ..., traitCollection: ...)`
    static func iconLock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconLock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconLogout", bundle: ..., traitCollection: ...)`
    static func iconLogout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconLogout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconMap", bundle: ..., traitCollection: ...)`
    static func iconMap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMap, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconMessage", bundle: ..., traitCollection: ...)`
    static func iconMessage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMessage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconNoData1", bundle: ..., traitCollection: ...)`
    static func iconNoData1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconNoData1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconPaymentMode", bundle: ..., traitCollection: ...)`
    static func iconPaymentMode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPaymentMode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconPhone", bundle: ..., traitCollection: ...)`
    static func iconPhone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPhone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconPickup", bundle: ..., traitCollection: ...)`
    static func iconPickup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPickup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconPrivacy", bundle: ..., traitCollection: ...)`
    static func iconPrivacy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPrivacy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconPromoCode", bundle: ..., traitCollection: ...)`
    static func iconPromoCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPromoCode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconSOS", bundle: ..., traitCollection: ...)`
    static func iconSOS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSOS, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconShare", bundle: ..., traitCollection: ...)`
    static func iconShare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconShare, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconShowPassword", bundle: ..., traitCollection: ...)`
    static func iconShowPassword(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconShowPassword, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconSupport", bundle: ..., traitCollection: ...)`
    static func iconSupport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSupport, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconTerms", bundle: ..., traitCollection: ...)`
    static func iconTerms(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTerms, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconTexi", bundle: ..., traitCollection: ...)`
    static func iconTexi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTexi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconTruck", bundle: ..., traitCollection: ...)`
    static func iconTruck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTruck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconUser", bundle: ..., traitCollection: ...)`
    static func iconUser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUser, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconUserPlaceholder", bundle: ..., traitCollection: ...)`
    static func iconUserPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUserPlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconVisa", bundle: ..., traitCollection: ...)`
    static func iconVisa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconVisa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconWallet", bundle: ..., traitCollection: ...)`
    static func iconWallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconWork", bundle: ..., traitCollection: ...)`
    static func iconWork(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWork, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "languageIcon", bundle: ..., traitCollection: ...)`
    static func languageIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.languageIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "launchScreenIcon", bundle: ..., traitCollection: ...)`
    static func launchScreenIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchScreenIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mapCarIcon", bundle: ..., traitCollection: ...)`
    static func mapCarIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapCarIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "masterCard_icon", bundle: ..., traitCollection: ...)`
    static func masterCard_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.masterCard_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "roundWheelIcon", bundle: ..., traitCollection: ...)`
    static func roundWheelIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.roundWheelIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stripe-Logo", bundle: ..., traitCollection: ...)`
    static func stripeLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stripeLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "targetHomeIcon", bundle: ..., traitCollection: ...)`
    static func targetHomeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.targetHomeIcon, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Auth"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 45 nibs.
  struct nib {
    /// Nib `AlertView`.
    static let alertView = _R.nib._AlertView()
    /// Nib `ChangePasswordCell`.
    static let changePasswordCell = _R.nib._ChangePasswordCell()
    /// Nib `ChangePasswordVerifyCell`.
    static let changePasswordVerifyCell = _R.nib._ChangePasswordVerifyCell()
    /// Nib `ChatCurrentUserCell`.
    static let chatCurrentUserCell = _R.nib._ChatCurrentUserCell()
    /// Nib `ChatOtherUserCell`.
    static let chatOtherUserCell = _R.nib._ChatOtherUserCell()
    /// Nib `DriverProfileDataCell`.
    static let driverProfileDataCell = _R.nib._DriverProfileDataCell()
    /// Nib `EarningsNoDataCell`.
    static let earningsNoDataCell = _R.nib._EarningsNoDataCell()
    /// Nib `EditProfileCell`.
    static let editProfileCell = _R.nib._EditProfileCell()
    /// Nib `HomeBookingInvoiceCell`.
    static let homeBookingInvoiceCell = _R.nib._HomeBookingInvoiceCell()
    /// Nib `HomeBottomViewStage1Cell`.
    static let homeBottomViewStage1Cell = _R.nib._HomeBottomViewStage1Cell()
    /// Nib `HomeBottomViewStage2Cell`.
    static let homeBottomViewStage2Cell = _R.nib._HomeBottomViewStage2Cell()
    /// Nib `HomeBottomViewStage3Cell`.
    static let homeBottomViewStage3Cell = _R.nib._HomeBottomViewStage3Cell()
    /// Nib `HomeBottomViewStage4BottomCell`.
    static let homeBottomViewStage4BottomCell = _R.nib._HomeBottomViewStage4BottomCell()
    /// Nib `HomeBottomViewStage4HeaderCell`.
    static let homeBottomViewStage4HeaderCell = _R.nib._HomeBottomViewStage4HeaderCell()
    /// Nib `HomeBottomViewStage4PromoCell`.
    static let homeBottomViewStage4PromoCell = _R.nib._HomeBottomViewStage4PromoCell()
    /// Nib `HomeBottomViewStage4RatingCell`.
    static let homeBottomViewStage4RatingCell = _R.nib._HomeBottomViewStage4RatingCell()
    /// Nib `HomeEstimatedPriceCell`.
    static let homeEstimatedPriceCell = _R.nib._HomeEstimatedPriceCell()
    /// Nib `HomeScheduleCell`.
    static let homeScheduleCell = _R.nib._HomeScheduleCell()
    /// Nib `HomeServiceDetailCell`.
    static let homeServiceDetailCell = _R.nib._HomeServiceDetailCell()
    /// Nib `HomeVehicleViewStage2Cell`.
    static let homeVehicleViewStage2Cell = _R.nib._HomeVehicleViewStage2Cell()
    /// Nib `HomeVehicleViewStage2HeaderCell`.
    static let homeVehicleViewStage2HeaderCell = _R.nib._HomeVehicleViewStage2HeaderCell()
    /// Nib `HomeVehicleViewStage2HeaderCollectionCell`.
    static let homeVehicleViewStage2HeaderCollectionCell = _R.nib._HomeVehicleViewStage2HeaderCollectionCell()
    /// Nib `LogInCell`.
    static let logInCell = _R.nib._LogInCell()
    /// Nib `ManageAddCardButtonCell`.
    static let manageAddCardButtonCell = _R.nib._ManageAddCardButtonCell()
    /// Nib `ManageAddCardCell`.
    static let manageAddCardCell = _R.nib._ManageAddCardCell()
    /// Nib `ManageCardDataCell`.
    static let manageCardDataCell = _R.nib._ManageCardDataCell()
    /// Nib `NoDataView`.
    static let noDataView = _R.nib._NoDataView()
    /// Nib `PayOnlineDataCell`.
    static let payOnlineDataCell = _R.nib._PayOnlineDataCell()
    /// Nib `ProfileMainCell`.
    static let profileMainCell = _R.nib._ProfileMainCell()
    /// Nib `RegisterUserDetailCell`.
    static let registerUserDetailCell = _R.nib._RegisterUserDetailCell()
    /// Nib `RegisterVerifyPhoneCell`.
    static let registerVerifyPhoneCell = _R.nib._RegisterVerifyPhoneCell()
    /// Nib `RideDetailDataCell`.
    static let rideDetailDataCell = _R.nib._RideDetailDataCell()
    /// Nib `RideHistoryDataCell`.
    static let rideHistoryDataCell = _R.nib._RideHistoryDataCell()
    /// Nib `RideReceiptDataCell`.
    static let rideReceiptDataCell = _R.nib._RideReceiptDataCell()
    /// Nib `ScheduledRidesDataCell`.
    static let scheduledRidesDataCell = _R.nib._ScheduledRidesDataCell()
    /// Nib `SettingsCell`.
    static let settingsCell = _R.nib._SettingsCell()
    /// Nib `SideMenuCell`.
    static let sideMenuCell = _R.nib._SideMenuCell()
    /// Nib `SideMenuVC`.
    static let sideMenuVC = _R.nib._SideMenuVC()
    /// Nib `SingleValuePickerCell`.
    static let singleValuePickerCell = _R.nib._SingleValuePickerCell()
    /// Nib `SingleValuePickerView`.
    static let singleValuePickerView = _R.nib._SingleValuePickerView()
    /// Nib `SupportDataCell`.
    static let supportDataCell = _R.nib._SupportDataCell()
    /// Nib `ValidatePhoneDataCell`.
    static let validatePhoneDataCell = _R.nib._ValidatePhoneDataCell()
    /// Nib `WalletDataCell`.
    static let walletDataCell = _R.nib._WalletDataCell()
    /// Nib `WalletHistoryCouponCell`.
    static let walletHistoryCouponCell = _R.nib._WalletHistoryCouponCell()
    /// Nib `WalletHistoryDataCell`.
    static let walletHistoryDataCell = _R.nib._WalletHistoryDataCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AlertView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.alertView) instead")
    static func alertView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.alertView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChangePasswordCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.changePasswordCell) instead")
    static func changePasswordCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.changePasswordCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChangePasswordVerifyCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.changePasswordVerifyCell) instead")
    static func changePasswordVerifyCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.changePasswordVerifyCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChatCurrentUserCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatCurrentUserCell) instead")
    static func chatCurrentUserCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatCurrentUserCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChatOtherUserCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatOtherUserCell) instead")
    static func chatOtherUserCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatOtherUserCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DriverProfileDataCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.driverProfileDataCell) instead")
    static func driverProfileDataCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.driverProfileDataCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EarningsNoDataCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.earningsNoDataCell) instead")
    static func earningsNoDataCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.earningsNoDataCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EditProfileCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editProfileCell) instead")
    static func editProfileCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editProfileCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeBookingInvoiceCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeBookingInvoiceCell) instead")
    static func homeBookingInvoiceCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeBookingInvoiceCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeBottomViewStage1Cell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeBottomViewStage1Cell) instead")
    static func homeBottomViewStage1Cell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeBottomViewStage1Cell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeBottomViewStage2Cell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeBottomViewStage2Cell) instead")
    static func homeBottomViewStage2Cell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeBottomViewStage2Cell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeBottomViewStage3Cell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeBottomViewStage3Cell) instead")
    static func homeBottomViewStage3Cell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeBottomViewStage3Cell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeBottomViewStage4BottomCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeBottomViewStage4BottomCell) instead")
    static func homeBottomViewStage4BottomCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeBottomViewStage4BottomCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeBottomViewStage4HeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeBottomViewStage4HeaderCell) instead")
    static func homeBottomViewStage4HeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeBottomViewStage4HeaderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeBottomViewStage4PromoCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeBottomViewStage4PromoCell) instead")
    static func homeBottomViewStage4PromoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeBottomViewStage4PromoCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeBottomViewStage4RatingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeBottomViewStage4RatingCell) instead")
    static func homeBottomViewStage4RatingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeBottomViewStage4RatingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeEstimatedPriceCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeEstimatedPriceCell) instead")
    static func homeEstimatedPriceCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeEstimatedPriceCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeScheduleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeScheduleCell) instead")
    static func homeScheduleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeScheduleCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeServiceDetailCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeServiceDetailCell) instead")
    static func homeServiceDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeServiceDetailCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeVehicleViewStage2Cell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeVehicleViewStage2Cell) instead")
    static func homeVehicleViewStage2Cell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeVehicleViewStage2Cell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeVehicleViewStage2HeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeVehicleViewStage2HeaderCell) instead")
    static func homeVehicleViewStage2HeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeVehicleViewStage2HeaderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeVehicleViewStage2HeaderCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeVehicleViewStage2HeaderCollectionCell) instead")
    static func homeVehicleViewStage2HeaderCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeVehicleViewStage2HeaderCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LogInCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.logInCell) instead")
    static func logInCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.logInCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ManageAddCardButtonCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.manageAddCardButtonCell) instead")
    static func manageAddCardButtonCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.manageAddCardButtonCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ManageAddCardCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.manageAddCardCell) instead")
    static func manageAddCardCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.manageAddCardCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ManageCardDataCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.manageCardDataCell) instead")
    static func manageCardDataCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.manageCardDataCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NoDataView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.noDataView) instead")
    static func noDataView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.noDataView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PayOnlineDataCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.payOnlineDataCell) instead")
    static func payOnlineDataCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.payOnlineDataCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileMainCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileMainCell) instead")
    static func profileMainCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileMainCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RegisterUserDetailCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.registerUserDetailCell) instead")
    static func registerUserDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.registerUserDetailCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RegisterVerifyPhoneCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.registerVerifyPhoneCell) instead")
    static func registerVerifyPhoneCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.registerVerifyPhoneCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RideDetailDataCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.rideDetailDataCell) instead")
    static func rideDetailDataCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rideDetailDataCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RideHistoryDataCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.rideHistoryDataCell) instead")
    static func rideHistoryDataCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rideHistoryDataCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RideReceiptDataCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.rideReceiptDataCell) instead")
    static func rideReceiptDataCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rideReceiptDataCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ScheduledRidesDataCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.scheduledRidesDataCell) instead")
    static func scheduledRidesDataCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.scheduledRidesDataCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SettingsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingsCell) instead")
    static func settingsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SideMenuCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sideMenuCell) instead")
    static func sideMenuCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sideMenuCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SideMenuVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sideMenuVC) instead")
    static func sideMenuVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sideMenuVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SingleValuePickerCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.singleValuePickerCell) instead")
    static func singleValuePickerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.singleValuePickerCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SingleValuePickerView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.singleValuePickerView) instead")
    static func singleValuePickerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.singleValuePickerView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SupportDataCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.supportDataCell) instead")
    static func supportDataCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.supportDataCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ValidatePhoneDataCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.validatePhoneDataCell) instead")
    static func validatePhoneDataCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.validatePhoneDataCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WalletDataCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walletDataCell) instead")
    static func walletDataCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletDataCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WalletHistoryCouponCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walletHistoryCouponCell) instead")
    static func walletHistoryCouponCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletHistoryCouponCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WalletHistoryDataCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walletHistoryDataCell) instead")
    static func walletHistoryDataCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletHistoryDataCell)
    }
    #endif

    static func alertView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AlertView? {
      return R.nib.alertView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AlertView
    }

    static func changePasswordCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChangePasswordCell? {
      return R.nib.changePasswordCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChangePasswordCell
    }

    static func changePasswordVerifyCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChangePasswordVerifyCell? {
      return R.nib.changePasswordVerifyCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChangePasswordVerifyCell
    }

    static func chatCurrentUserCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatCurrentUserCell? {
      return R.nib.chatCurrentUserCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatCurrentUserCell
    }

    static func chatOtherUserCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatOtherUserCell? {
      return R.nib.chatOtherUserCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatOtherUserCell
    }

    static func driverProfileDataCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DriverProfileDataCell? {
      return R.nib.driverProfileDataCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DriverProfileDataCell
    }

    static func earningsNoDataCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EarningsNoDataCell? {
      return R.nib.earningsNoDataCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EarningsNoDataCell
    }

    static func editProfileCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditProfileCell? {
      return R.nib.editProfileCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfileCell
    }

    static func homeBookingInvoiceCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBookingInvoiceCell? {
      return R.nib.homeBookingInvoiceCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBookingInvoiceCell
    }

    static func homeBottomViewStage1Cell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBottomViewStage1Cell? {
      return R.nib.homeBottomViewStage1Cell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBottomViewStage1Cell
    }

    static func homeBottomViewStage2Cell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBottomViewStage2Cell? {
      return R.nib.homeBottomViewStage2Cell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBottomViewStage2Cell
    }

    static func homeBottomViewStage3Cell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBottomViewStage3Cell? {
      return R.nib.homeBottomViewStage3Cell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBottomViewStage3Cell
    }

    static func homeBottomViewStage4BottomCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBottomViewStage4BottomCell? {
      return R.nib.homeBottomViewStage4BottomCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBottomViewStage4BottomCell
    }

    static func homeBottomViewStage4HeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBottomViewStage4HeaderCell? {
      return R.nib.homeBottomViewStage4HeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBottomViewStage4HeaderCell
    }

    static func homeBottomViewStage4PromoCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBottomViewStage4PromoCell? {
      return R.nib.homeBottomViewStage4PromoCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBottomViewStage4PromoCell
    }

    static func homeBottomViewStage4RatingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBottomViewStage4RatingCell? {
      return R.nib.homeBottomViewStage4RatingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBottomViewStage4RatingCell
    }

    static func homeEstimatedPriceCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeEstimatedPriceCell? {
      return R.nib.homeEstimatedPriceCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeEstimatedPriceCell
    }

    static func homeScheduleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeScheduleCell? {
      return R.nib.homeScheduleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeScheduleCell
    }

    static func homeServiceDetailCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeServiceDetailCell? {
      return R.nib.homeServiceDetailCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeServiceDetailCell
    }

    static func homeVehicleViewStage2Cell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeVehicleViewStage2Cell? {
      return R.nib.homeVehicleViewStage2Cell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeVehicleViewStage2Cell
    }

    static func homeVehicleViewStage2HeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeVehicleViewStage2HeaderCell? {
      return R.nib.homeVehicleViewStage2HeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeVehicleViewStage2HeaderCell
    }

    static func homeVehicleViewStage2HeaderCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeVehicleViewStage2HeaderCollectionCell? {
      return R.nib.homeVehicleViewStage2HeaderCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeVehicleViewStage2HeaderCollectionCell
    }

    static func logInCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LogInCell? {
      return R.nib.logInCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LogInCell
    }

    static func manageAddCardButtonCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ManageAddCardButtonCell? {
      return R.nib.manageAddCardButtonCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ManageAddCardButtonCell
    }

    static func manageAddCardCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ManageAddCardCell? {
      return R.nib.manageAddCardCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ManageAddCardCell
    }

    static func manageCardDataCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ManageCardDataCell? {
      return R.nib.manageCardDataCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ManageCardDataCell
    }

    static func noDataView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NoDataView? {
      return R.nib.noDataView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NoDataView
    }

    static func payOnlineDataCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PayOnlineDataCell? {
      return R.nib.payOnlineDataCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PayOnlineDataCell
    }

    static func profileMainCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileMainCell? {
      return R.nib.profileMainCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileMainCell
    }

    static func registerUserDetailCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RegisterUserDetailCell? {
      return R.nib.registerUserDetailCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RegisterUserDetailCell
    }

    static func registerVerifyPhoneCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RegisterVerifyPhoneCell? {
      return R.nib.registerVerifyPhoneCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RegisterVerifyPhoneCell
    }

    static func rideDetailDataCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RideDetailDataCell? {
      return R.nib.rideDetailDataCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RideDetailDataCell
    }

    static func rideHistoryDataCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RideHistoryDataCell? {
      return R.nib.rideHistoryDataCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RideHistoryDataCell
    }

    static func rideReceiptDataCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RideReceiptDataCell? {
      return R.nib.rideReceiptDataCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RideReceiptDataCell
    }

    static func scheduledRidesDataCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ScheduledRidesDataCell? {
      return R.nib.scheduledRidesDataCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ScheduledRidesDataCell
    }

    static func settingsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsCell? {
      return R.nib.settingsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsCell
    }

    static func sideMenuCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SideMenuCell? {
      return R.nib.sideMenuCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SideMenuCell
    }

    static func sideMenuVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.sideMenuVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func singleValuePickerCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SingleValuePickerCell? {
      return R.nib.singleValuePickerCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SingleValuePickerCell
    }

    static func singleValuePickerView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SingleValuePickerView? {
      return R.nib.singleValuePickerView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SingleValuePickerView
    }

    static func supportDataCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupportDataCell? {
      return R.nib.supportDataCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupportDataCell
    }

    static func validatePhoneDataCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ValidatePhoneDataCell? {
      return R.nib.validatePhoneDataCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ValidatePhoneDataCell
    }

    static func walletDataCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletDataCell? {
      return R.nib.walletDataCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletDataCell
    }

    static func walletHistoryCouponCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletHistoryCouponCell? {
      return R.nib.walletHistoryCouponCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletHistoryCouponCell
    }

    static func walletHistoryDataCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletHistoryDataCell? {
      return R.nib.walletHistoryDataCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletHistoryDataCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 41 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ChangePasswordCell`.
    static let changePasswordCell: Rswift.ReuseIdentifier<ChangePasswordCell> = Rswift.ReuseIdentifier(identifier: "ChangePasswordCell")
    /// Reuse identifier `ChangePasswordVerifyCell`.
    static let changePasswordVerifyCell: Rswift.ReuseIdentifier<ChangePasswordVerifyCell> = Rswift.ReuseIdentifier(identifier: "ChangePasswordVerifyCell")
    /// Reuse identifier `ChatCurrentUserCell`.
    static let chatCurrentUserCell: Rswift.ReuseIdentifier<ChatCurrentUserCell> = Rswift.ReuseIdentifier(identifier: "ChatCurrentUserCell")
    /// Reuse identifier `ChatOtherUserCell`.
    static let chatOtherUserCell: Rswift.ReuseIdentifier<ChatOtherUserCell> = Rswift.ReuseIdentifier(identifier: "ChatOtherUserCell")
    /// Reuse identifier `DriverProfileDataCell`.
    static let driverProfileDataCell: Rswift.ReuseIdentifier<DriverProfileDataCell> = Rswift.ReuseIdentifier(identifier: "DriverProfileDataCell")
    /// Reuse identifier `EarningsNoDataCell`.
    static let earningsNoDataCell: Rswift.ReuseIdentifier<EarningsNoDataCell> = Rswift.ReuseIdentifier(identifier: "EarningsNoDataCell")
    /// Reuse identifier `EditProfileCell`.
    static let editProfileCell: Rswift.ReuseIdentifier<EditProfileCell> = Rswift.ReuseIdentifier(identifier: "EditProfileCell")
    /// Reuse identifier `HomeBookingInvoiceCell`.
    static let homeBookingInvoiceCell: Rswift.ReuseIdentifier<HomeBookingInvoiceCell> = Rswift.ReuseIdentifier(identifier: "HomeBookingInvoiceCell")
    /// Reuse identifier `HomeBottomViewStage1Cell`.
    static let homeBottomViewStage1Cell: Rswift.ReuseIdentifier<HomeBottomViewStage1Cell> = Rswift.ReuseIdentifier(identifier: "HomeBottomViewStage1Cell")
    /// Reuse identifier `HomeBottomViewStage2Cell`.
    static let homeBottomViewStage2Cell: Rswift.ReuseIdentifier<HomeBottomViewStage2Cell> = Rswift.ReuseIdentifier(identifier: "HomeBottomViewStage2Cell")
    /// Reuse identifier `HomeBottomViewStage3Cell`.
    static let homeBottomViewStage3Cell: Rswift.ReuseIdentifier<HomeBottomViewStage3Cell> = Rswift.ReuseIdentifier(identifier: "HomeBottomViewStage3Cell")
    /// Reuse identifier `HomeBottomViewStage4BottomCell`.
    static let homeBottomViewStage4BottomCell: Rswift.ReuseIdentifier<HomeBottomViewStage4BottomCell> = Rswift.ReuseIdentifier(identifier: "HomeBottomViewStage4BottomCell")
    /// Reuse identifier `HomeBottomViewStage4HeaderCell`.
    static let homeBottomViewStage4HeaderCell: Rswift.ReuseIdentifier<HomeBottomViewStage4HeaderCell> = Rswift.ReuseIdentifier(identifier: "HomeBottomViewStage4HeaderCell")
    /// Reuse identifier `HomeBottomViewStage4PromoCell`.
    static let homeBottomViewStage4PromoCell: Rswift.ReuseIdentifier<HomeBottomViewStage4PromoCell> = Rswift.ReuseIdentifier(identifier: "HomeBottomViewStage4PromoCell")
    /// Reuse identifier `HomeBottomViewStage4RatingCell`.
    static let homeBottomViewStage4RatingCell: Rswift.ReuseIdentifier<HomeBottomViewStage4RatingCell> = Rswift.ReuseIdentifier(identifier: "HomeBottomViewStage4RatingCell")
    /// Reuse identifier `HomeEstimatedPriceCell`.
    static let homeEstimatedPriceCell: Rswift.ReuseIdentifier<HomeEstimatedPriceCell> = Rswift.ReuseIdentifier(identifier: "HomeEstimatedPriceCell")
    /// Reuse identifier `HomeScheduleCell`.
    static let homeScheduleCell: Rswift.ReuseIdentifier<HomeScheduleCell> = Rswift.ReuseIdentifier(identifier: "HomeScheduleCell")
    /// Reuse identifier `HomeServiceDetailCell`.
    static let homeServiceDetailCell: Rswift.ReuseIdentifier<HomeServiceDetailCell> = Rswift.ReuseIdentifier(identifier: "HomeServiceDetailCell")
    /// Reuse identifier `HomeVehicleViewStage2Cell`.
    static let homeVehicleViewStage2Cell: Rswift.ReuseIdentifier<HomeVehicleViewStage2Cell> = Rswift.ReuseIdentifier(identifier: "HomeVehicleViewStage2Cell")
    /// Reuse identifier `HomeVehicleViewStage2HeaderCell`.
    static let homeVehicleViewStage2HeaderCell: Rswift.ReuseIdentifier<HomeVehicleViewStage2HeaderCell> = Rswift.ReuseIdentifier(identifier: "HomeVehicleViewStage2HeaderCell")
    /// Reuse identifier `HomeVehicleViewStage2HeaderCollectionCell`.
    static let homeVehicleViewStage2HeaderCollectionCell: Rswift.ReuseIdentifier<HomeVehicleViewStage2HeaderCollectionCell> = Rswift.ReuseIdentifier(identifier: "HomeVehicleViewStage2HeaderCollectionCell")
    /// Reuse identifier `LogInCell`.
    static let logInCell: Rswift.ReuseIdentifier<LogInCell> = Rswift.ReuseIdentifier(identifier: "LogInCell")
    /// Reuse identifier `ManageAddCardButtonCell`.
    static let manageAddCardButtonCell: Rswift.ReuseIdentifier<ManageAddCardButtonCell> = Rswift.ReuseIdentifier(identifier: "ManageAddCardButtonCell")
    /// Reuse identifier `ManageAddCardCell`.
    static let manageAddCardCell: Rswift.ReuseIdentifier<ManageAddCardCell> = Rswift.ReuseIdentifier(identifier: "ManageAddCardCell")
    /// Reuse identifier `ManageCardDataCell`.
    static let manageCardDataCell: Rswift.ReuseIdentifier<ManageCardDataCell> = Rswift.ReuseIdentifier(identifier: "ManageCardDataCell")
    /// Reuse identifier `PayOnlineDataCell`.
    static let payOnlineDataCell: Rswift.ReuseIdentifier<PayOnlineDataCell> = Rswift.ReuseIdentifier(identifier: "PayOnlineDataCell")
    /// Reuse identifier `ProfileMainCell`.
    static let profileMainCell: Rswift.ReuseIdentifier<ProfileMainCell> = Rswift.ReuseIdentifier(identifier: "ProfileMainCell")
    /// Reuse identifier `RegisterUserDetailCell`.
    static let registerUserDetailCell: Rswift.ReuseIdentifier<RegisterUserDetailCell> = Rswift.ReuseIdentifier(identifier: "RegisterUserDetailCell")
    /// Reuse identifier `RegisterVerifyPhoneCell`.
    static let registerVerifyPhoneCell: Rswift.ReuseIdentifier<RegisterVerifyPhoneCell> = Rswift.ReuseIdentifier(identifier: "RegisterVerifyPhoneCell")
    /// Reuse identifier `RideDetailDataCell`.
    static let rideDetailDataCell: Rswift.ReuseIdentifier<RideDetailDataCell> = Rswift.ReuseIdentifier(identifier: "RideDetailDataCell")
    /// Reuse identifier `RideHistoryDataCell`.
    static let rideHistoryDataCell: Rswift.ReuseIdentifier<RideHistoryDataCell> = Rswift.ReuseIdentifier(identifier: "RideHistoryDataCell")
    /// Reuse identifier `RideReceiptDataCell`.
    static let rideReceiptDataCell: Rswift.ReuseIdentifier<RideReceiptDataCell> = Rswift.ReuseIdentifier(identifier: "RideReceiptDataCell")
    /// Reuse identifier `ScheduledRidesDataCell`.
    static let scheduledRidesDataCell: Rswift.ReuseIdentifier<ScheduledRidesDataCell> = Rswift.ReuseIdentifier(identifier: "ScheduledRidesDataCell")
    /// Reuse identifier `SettingsCell`.
    static let settingsCell: Rswift.ReuseIdentifier<SettingsCell> = Rswift.ReuseIdentifier(identifier: "SettingsCell")
    /// Reuse identifier `SideMenuCell`.
    static let sideMenuCell: Rswift.ReuseIdentifier<SideMenuCell> = Rswift.ReuseIdentifier(identifier: "SideMenuCell")
    /// Reuse identifier `SingleValuePickerCell`.
    static let singleValuePickerCell: Rswift.ReuseIdentifier<SingleValuePickerCell> = Rswift.ReuseIdentifier(identifier: "SingleValuePickerCell")
    /// Reuse identifier `SupportDataCell`.
    static let supportDataCell: Rswift.ReuseIdentifier<SupportDataCell> = Rswift.ReuseIdentifier(identifier: "SupportDataCell")
    /// Reuse identifier `ValidatePhoneDataCell`.
    static let validatePhoneDataCell: Rswift.ReuseIdentifier<ValidatePhoneDataCell> = Rswift.ReuseIdentifier(identifier: "ValidatePhoneDataCell")
    /// Reuse identifier `WalletDataCell`.
    static let walletDataCell: Rswift.ReuseIdentifier<WalletDataCell> = Rswift.ReuseIdentifier(identifier: "WalletDataCell")
    /// Reuse identifier `WalletHistoryCouponCell`.
    static let walletHistoryCouponCell: Rswift.ReuseIdentifier<WalletHistoryCouponCell> = Rswift.ReuseIdentifier(identifier: "WalletHistoryCouponCell")
    /// Reuse identifier `WalletHistoryDataCell`.
    static let walletHistoryDataCell: Rswift.ReuseIdentifier<WalletHistoryDataCell> = Rswift.ReuseIdentifier(identifier: "WalletHistoryDataCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 42 localization tables.
  struct string {
    /// This `R.string.auth` struct is generated, and contains static references to 7 localization keys.
    struct auth {
      /// en translation: By continuing, you agree that you have read and accept our
      ///
      /// Locales: en, es
      static let mrbQ0OwbText = Rswift.StringResource(key: "mrb-q0-owb.text", tableName: "Auth", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: en, es
      static let xbuCjSnQText = Rswift.StringResource(key: "xbu-Cj-snQ.text", tableName: "Auth", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Explore a new way to travel with Go Taxi
      ///
      /// Locales: en, es
      static let kMlYxUmcText = Rswift.StringResource(key: "kMl-Yx-umc.text", tableName: "Auth", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: LOGIN
      ///
      /// Locales: en, es
      static let kbcHjObNNormalTitle = Rswift.StringResource(key: "Kbc-Hj-ObN.normalTitle", tableName: "Auth", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en, es
      static let aEx8rHCFText = Rswift.StringResource(key: "AEx-8r-hCF.text", tableName: "Auth", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SIGN UP
      ///
      /// Locales: en, es
      static let uFuHQChyNormalTitle = Rswift.StringResource(key: "uFu-hQ-chy.normalTitle", tableName: "Auth", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: T&Cs and 
      ///
      /// Locales: en, es
      static let jlOI6WnkText = Rswift.StringResource(key: "jlO-I6-wnk.text", tableName: "Auth", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: By continuing, you agree that you have read and accept our
      ///
      /// Locales: en, es
      static func mrbQ0OwbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mrb-q0-owb.text", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "mrb-q0-owb.text"
        }

        return NSLocalizedString("mrb-q0-owb.text", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: en, es
      static func xbuCjSnQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xbu-Cj-snQ.text", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "xbu-Cj-snQ.text"
        }

        return NSLocalizedString("xbu-Cj-snQ.text", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// en translation: Explore a new way to travel with Go Taxi
      ///
      /// Locales: en, es
      static func kMlYxUmcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kMl-Yx-umc.text", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "kMl-Yx-umc.text"
        }

        return NSLocalizedString("kMl-Yx-umc.text", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// en translation: LOGIN
      ///
      /// Locales: en, es
      static func kbcHjObNNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kbc-Hj-ObN.normalTitle", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "Kbc-Hj-ObN.normalTitle"
        }

        return NSLocalizedString("Kbc-Hj-ObN.normalTitle", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en, es
      static func aEx8rHCFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AEx-8r-hCF.text", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "AEx-8r-hCF.text"
        }

        return NSLocalizedString("AEx-8r-hCF.text", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// en translation: SIGN UP
      ///
      /// Locales: en, es
      static func uFuHQChyNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uFu-hQ-chy.normalTitle", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "uFu-hQ-chy.normalTitle"
        }

        return NSLocalizedString("uFu-hQ-chy.normalTitle", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// en translation: T&Cs and 
      ///
      /// Locales: en, es
      static func jlOI6WnkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jlO-I6-wnk.text", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "jlO-I6-wnk.text"
        }

        return NSLocalizedString("jlO-I6-wnk.text", tableName: "Auth", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.changePasswordCell` struct is generated, and contains static references to 4 localization keys.
    struct changePasswordCell {
      /// en translation: CHANGE PASSWORD
      ///
      /// Locales: en, es
      static let gN8KQ0IFNormalTitle = Rswift.StringResource(key: "gN8-kQ-0IF.normalTitle", tableName: "ChangePasswordCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Confirm New Password
      ///
      /// Locales: en, es
      static let mXfN9JLaPlaceholder = Rswift.StringResource(key: "mXf-n9-JLa.placeholder", tableName: "ChangePasswordCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: New Password
      ///
      /// Locales: en, es
      static let dJxFvZFYPlaceholder = Rswift.StringResource(key: "dJx-fv-ZFY.placeholder", tableName: "ChangePasswordCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Old Password
      ///
      /// Locales: en, es
      static let dTU0CXc3Placeholder = Rswift.StringResource(key: "dTU-0C-xc3.placeholder", tableName: "ChangePasswordCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: CHANGE PASSWORD
      ///
      /// Locales: en, es
      static func gN8KQ0IFNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gN8-kQ-0IF.normalTitle", tableName: "ChangePasswordCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ChangePasswordCell", preferredLanguages: preferredLanguages) else {
          return "gN8-kQ-0IF.normalTitle"
        }

        return NSLocalizedString("gN8-kQ-0IF.normalTitle", tableName: "ChangePasswordCell", bundle: bundle, comment: "")
      }

      /// en translation: Confirm New Password
      ///
      /// Locales: en, es
      static func mXfN9JLaPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mXf-n9-JLa.placeholder", tableName: "ChangePasswordCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ChangePasswordCell", preferredLanguages: preferredLanguages) else {
          return "mXf-n9-JLa.placeholder"
        }

        return NSLocalizedString("mXf-n9-JLa.placeholder", tableName: "ChangePasswordCell", bundle: bundle, comment: "")
      }

      /// en translation: New Password
      ///
      /// Locales: en, es
      static func dJxFvZFYPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dJx-fv-ZFY.placeholder", tableName: "ChangePasswordCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ChangePasswordCell", preferredLanguages: preferredLanguages) else {
          return "dJx-fv-ZFY.placeholder"
        }

        return NSLocalizedString("dJx-fv-ZFY.placeholder", tableName: "ChangePasswordCell", bundle: bundle, comment: "")
      }

      /// en translation: Old Password
      ///
      /// Locales: en, es
      static func dTU0CXc3Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dTU-0C-xc3.placeholder", tableName: "ChangePasswordCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ChangePasswordCell", preferredLanguages: preferredLanguages) else {
          return "dTU-0C-xc3.placeholder"
        }

        return NSLocalizedString("dTU-0C-xc3.placeholder", tableName: "ChangePasswordCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.changePasswordVerifyCell` struct is generated, and contains static references to 4 localization keys.
    struct changePasswordVerifyCell {
      /// en translation: Phone no.
      ///
      /// Locales: en, es
      static let unN7qA1SPlaceholder = Rswift.StringResource(key: "unN-7q-A1S.placeholder", tableName: "ChangePasswordVerifyCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: VERIFY
      ///
      /// Locales: en, es
      static let qnVYyHjGNormalTitle = Rswift.StringResource(key: "QnV-Yy-HjG.normalTitle", tableName: "ChangePasswordVerifyCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: We'll text a code to verify your phone
      ///
      /// Locales: en, es
      static let zAgFVRvpText = Rswift.StringResource(key: "zAg-fV-rvp.text", tableName: "ChangePasswordVerifyCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: What's your Mobile number
      ///
      /// Locales: en, es
      static let bxBtZ1fText = Rswift.StringResource(key: "9bx-bt-Z1f.text", tableName: "ChangePasswordVerifyCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: Phone no.
      ///
      /// Locales: en, es
      static func unN7qA1SPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unN-7q-A1S.placeholder", tableName: "ChangePasswordVerifyCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ChangePasswordVerifyCell", preferredLanguages: preferredLanguages) else {
          return "unN-7q-A1S.placeholder"
        }

        return NSLocalizedString("unN-7q-A1S.placeholder", tableName: "ChangePasswordVerifyCell", bundle: bundle, comment: "")
      }

      /// en translation: VERIFY
      ///
      /// Locales: en, es
      static func qnVYyHjGNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QnV-Yy-HjG.normalTitle", tableName: "ChangePasswordVerifyCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ChangePasswordVerifyCell", preferredLanguages: preferredLanguages) else {
          return "QnV-Yy-HjG.normalTitle"
        }

        return NSLocalizedString("QnV-Yy-HjG.normalTitle", tableName: "ChangePasswordVerifyCell", bundle: bundle, comment: "")
      }

      /// en translation: We'll text a code to verify your phone
      ///
      /// Locales: en, es
      static func zAgFVRvpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zAg-fV-rvp.text", tableName: "ChangePasswordVerifyCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ChangePasswordVerifyCell", preferredLanguages: preferredLanguages) else {
          return "zAg-fV-rvp.text"
        }

        return NSLocalizedString("zAg-fV-rvp.text", tableName: "ChangePasswordVerifyCell", bundle: bundle, comment: "")
      }

      /// en translation: What's your Mobile number
      ///
      /// Locales: en, es
      static func bxBtZ1fText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9bx-bt-Z1f.text", tableName: "ChangePasswordVerifyCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ChangePasswordVerifyCell", preferredLanguages: preferredLanguages) else {
          return "9bx-bt-Z1f.text"
        }

        return NSLocalizedString("9bx-bt-Z1f.text", tableName: "ChangePasswordVerifyCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.driverProfileDataCell` struct is generated, and contains static references to 6 localization keys.
    struct driverProfileDataCell {
      /// en translation: +2344556677
      ///
      /// Locales: en, es
      static let skaSILbFText = Rswift.StringResource(key: "Ska-SI-lbF.text", tableName: "DriverProfileDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Account Info
      ///
      /// Locales: en, es
      static let pdjLv55UText = Rswift.StringResource(key: "pdj-lv-55U.text", tableName: "DriverProfileDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Driver App
      ///
      /// Locales: en, es
      static let iKt4J9AVText = Rswift.StringResource(key: "IKt-4J-9AV.text", tableName: "DriverProfileDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, es
      static let aGHbNzcText = Rswift.StringResource(key: "3aG-Hb-Nzc.text", tableName: "DriverProfileDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Phone number
      ///
      /// Locales: en, es
      static let ufJR1O6lText = Rswift.StringResource(key: "ufJ-R1-o6l.text", tableName: "DriverProfileDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: test10@gmail.com
      ///
      /// Locales: en, es
      static let vIlP7GpfText = Rswift.StringResource(key: "vIl-p7-Gpf.text", tableName: "DriverProfileDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: +2344556677
      ///
      /// Locales: en, es
      static func skaSILbFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ska-SI-lbF.text", tableName: "DriverProfileDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DriverProfileDataCell", preferredLanguages: preferredLanguages) else {
          return "Ska-SI-lbF.text"
        }

        return NSLocalizedString("Ska-SI-lbF.text", tableName: "DriverProfileDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Account Info
      ///
      /// Locales: en, es
      static func pdjLv55UText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pdj-lv-55U.text", tableName: "DriverProfileDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DriverProfileDataCell", preferredLanguages: preferredLanguages) else {
          return "pdj-lv-55U.text"
        }

        return NSLocalizedString("pdj-lv-55U.text", tableName: "DriverProfileDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Driver App
      ///
      /// Locales: en, es
      static func iKt4J9AVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IKt-4J-9AV.text", tableName: "DriverProfileDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DriverProfileDataCell", preferredLanguages: preferredLanguages) else {
          return "IKt-4J-9AV.text"
        }

        return NSLocalizedString("IKt-4J-9AV.text", tableName: "DriverProfileDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, es
      static func aGHbNzcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3aG-Hb-Nzc.text", tableName: "DriverProfileDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DriverProfileDataCell", preferredLanguages: preferredLanguages) else {
          return "3aG-Hb-Nzc.text"
        }

        return NSLocalizedString("3aG-Hb-Nzc.text", tableName: "DriverProfileDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Phone number
      ///
      /// Locales: en, es
      static func ufJR1O6lText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ufJ-R1-o6l.text", tableName: "DriverProfileDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DriverProfileDataCell", preferredLanguages: preferredLanguages) else {
          return "ufJ-R1-o6l.text"
        }

        return NSLocalizedString("ufJ-R1-o6l.text", tableName: "DriverProfileDataCell", bundle: bundle, comment: "")
      }

      /// en translation: test10@gmail.com
      ///
      /// Locales: en, es
      static func vIlP7GpfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vIl-p7-Gpf.text", tableName: "DriverProfileDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DriverProfileDataCell", preferredLanguages: preferredLanguages) else {
          return "vIl-p7-Gpf.text"
        }

        return NSLocalizedString("vIl-p7-Gpf.text", tableName: "DriverProfileDataCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.earningsNoDataCell` struct is generated, and contains static references to 1 localization keys.
    struct earningsNoDataCell {
      /// en translation: No rides
      ///
      /// Locales: en, es
      static let x0eUJ67lText = Rswift.StringResource(key: "X0e-uJ-67l.text", tableName: "EarningsNoDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: No rides
      ///
      /// Locales: en, es
      static func x0eUJ67lText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("X0e-uJ-67l.text", tableName: "EarningsNoDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "EarningsNoDataCell", preferredLanguages: preferredLanguages) else {
          return "X0e-uJ-67l.text"
        }

        return NSLocalizedString("X0e-uJ-67l.text", tableName: "EarningsNoDataCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.editProfileCell` struct is generated, and contains static references to 9 localization keys.
    struct editProfileCell {
      /// en translation: +2344455566
      ///
      /// Locales: en
      static let bbni51grText = Rswift.StringResource(key: "BBN-I5-1gr.text", tableName: "EditProfileCell", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ali
      ///
      /// Locales: en
      static let ifC1cGDxText = Rswift.StringResource(key: "ifC-1c-gDx.text", tableName: "EditProfileCell", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Change Password?
      ///
      /// Locales: en, es
      static let xzVRo2A4NormalTitle = Rswift.StringResource(key: "xzV-ro-2A4.normalTitle", tableName: "EditProfileCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, es
      static let vS1U38uwPlaceholder = Rswift.StringResource(key: "vS1-U3-8uw.placeholder", tableName: "EditProfileCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Faizan
      ///
      /// Locales: en
      static let wy66kKxRText = Rswift.StringResource(key: "wy6-6k-KxR.text", tableName: "EditProfileCell", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: en, es
      static let wy66kKxRPlaceholder = Rswift.StringResource(key: "wy6-6k-KxR.placeholder", tableName: "EditProfileCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Last Name
      ///
      /// Locales: en, es
      static let ifC1cGDxPlaceholder = Rswift.StringResource(key: "ifC-1c-gDx.placeholder", tableName: "EditProfileCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Save Profile
      ///
      /// Locales: en, es
      static let gMq81Hc3NormalTitle = Rswift.StringResource(key: "GMq-81-Hc3.normalTitle", tableName: "EditProfileCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: test10@gmail.com
      ///
      /// Locales: en
      static let vS1U38uwText = Rswift.StringResource(key: "vS1-U3-8uw.text", tableName: "EditProfileCell", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: +2344455566
      ///
      /// Locales: en
      static func bbni51grText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BBN-I5-1gr.text", tableName: "EditProfileCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "EditProfileCell", preferredLanguages: preferredLanguages) else {
          return "BBN-I5-1gr.text"
        }

        return NSLocalizedString("BBN-I5-1gr.text", tableName: "EditProfileCell", bundle: bundle, comment: "")
      }

      /// en translation: Ali
      ///
      /// Locales: en
      static func ifC1cGDxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ifC-1c-gDx.text", tableName: "EditProfileCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "EditProfileCell", preferredLanguages: preferredLanguages) else {
          return "ifC-1c-gDx.text"
        }

        return NSLocalizedString("ifC-1c-gDx.text", tableName: "EditProfileCell", bundle: bundle, comment: "")
      }

      /// en translation: Change Password?
      ///
      /// Locales: en, es
      static func xzVRo2A4NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xzV-ro-2A4.normalTitle", tableName: "EditProfileCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "EditProfileCell", preferredLanguages: preferredLanguages) else {
          return "xzV-ro-2A4.normalTitle"
        }

        return NSLocalizedString("xzV-ro-2A4.normalTitle", tableName: "EditProfileCell", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, es
      static func vS1U38uwPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vS1-U3-8uw.placeholder", tableName: "EditProfileCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "EditProfileCell", preferredLanguages: preferredLanguages) else {
          return "vS1-U3-8uw.placeholder"
        }

        return NSLocalizedString("vS1-U3-8uw.placeholder", tableName: "EditProfileCell", bundle: bundle, comment: "")
      }

      /// en translation: Faizan
      ///
      /// Locales: en
      static func wy66kKxRText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wy6-6k-KxR.text", tableName: "EditProfileCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "EditProfileCell", preferredLanguages: preferredLanguages) else {
          return "wy6-6k-KxR.text"
        }

        return NSLocalizedString("wy6-6k-KxR.text", tableName: "EditProfileCell", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: en, es
      static func wy66kKxRPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wy6-6k-KxR.placeholder", tableName: "EditProfileCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "EditProfileCell", preferredLanguages: preferredLanguages) else {
          return "wy6-6k-KxR.placeholder"
        }

        return NSLocalizedString("wy6-6k-KxR.placeholder", tableName: "EditProfileCell", bundle: bundle, comment: "")
      }

      /// en translation: Last Name
      ///
      /// Locales: en, es
      static func ifC1cGDxPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ifC-1c-gDx.placeholder", tableName: "EditProfileCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "EditProfileCell", preferredLanguages: preferredLanguages) else {
          return "ifC-1c-gDx.placeholder"
        }

        return NSLocalizedString("ifC-1c-gDx.placeholder", tableName: "EditProfileCell", bundle: bundle, comment: "")
      }

      /// en translation: Save Profile
      ///
      /// Locales: en, es
      static func gMq81Hc3NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GMq-81-Hc3.normalTitle", tableName: "EditProfileCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "EditProfileCell", preferredLanguages: preferredLanguages) else {
          return "GMq-81-Hc3.normalTitle"
        }

        return NSLocalizedString("GMq-81-Hc3.normalTitle", tableName: "EditProfileCell", bundle: bundle, comment: "")
      }

      /// en translation: test10@gmail.com
      ///
      /// Locales: en
      static func vS1U38uwText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vS1-U3-8uw.text", tableName: "EditProfileCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "EditProfileCell", preferredLanguages: preferredLanguages) else {
          return "vS1-U3-8uw.text"
        }

        return NSLocalizedString("vS1-U3-8uw.text", tableName: "EditProfileCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.homeBookingInvoiceCell` struct is generated, and contains static references to 23 localization keys.
    struct homeBookingInvoiceCell {
      /// en translation: 1003, state st# 56-A life, Rawalpindi House # 23-H, punjab, Pakistan
      ///
      /// Locales: en, es
      static let sbo4vGTFText = Rswift.StringResource(key: "Sbo-4v-gTF.text", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 1003, state st# 56-A life, lahore, punjab, Pakistan
      ///
      /// Locales: en, es
      static let wtpAwWVkText = Rswift.StringResource(key: "Wtp-Aw-WVk.text", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 12.4 KM
      ///
      /// Locales: en, es
      static let uf8OaJXaText = Rswift.StringResource(key: "UF8-Oa-JXa.text", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 6 Min
      ///
      /// Locales: en, es
      static let hhgtcMfjText = Rswift.StringResource(key: "HHG-TC-mfj.text", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Booking ID
      ///
      /// Locales: en, es
      static let vf0JOQwEText = Rswift.StringResource(key: "Vf0-jO-qwE.text", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CASH
      ///
      /// Locales: en, es
      static let uc2KSUoEText = Rswift.StringResource(key: "uc2-KS-uoE.text", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Distance Travelled
      ///
      /// Locales: en, es
      static let eUDZi96UText = Rswift.StringResource(key: "eUD-zi-96U.text", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Distance fare
      ///
      /// Locales: en, es
      static let eegTdEWJText = Rswift.StringResource(key: "Eeg-Td-EWJ.text", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Drop
      ///
      /// Locales: en, es
      static let eDhMDG4UText = Rswift.StringResource(key: "EDh-MD-G4U.text", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Invoice
      ///
      /// Locales: en, es
      static let cECLX3erText = Rswift.StringResource(key: "cEC-lX-3er.text", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: KWDF44556
      ///
      /// Locales: en, es
      static let epLDRIutText = Rswift.StringResource(key: "epL-DR-iut.text", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: PAY ONLINE
      ///
      /// Locales: en, es
      static let mbfKlTNnNormalTitle = Rswift.StringResource(key: "Mbf-kl-TNn.normalTitle", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Payment Mode
      ///
      /// Locales: en, es
      static let nfr1lI8xText = Rswift.StringResource(key: "nfr-1l-I8x.text", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Pickup
      ///
      /// Locales: en, es
      static let bvLdFLqText = Rswift.StringResource(key: "2bv-Ld-fLq.text", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: R0
      ///
      /// Locales: en, es
      static let cJfXDXq1Text = Rswift.StringResource(key: "cJf-xD-Xq1.text", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: R0
      ///
      /// Locales: en, es
      static let d6OQ9SMlText = Rswift.StringResource(key: "d6O-q9-SMl.text", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: R122.4
      ///
      /// Locales: en, es
      static let fNsRDTsMText = Rswift.StringResource(key: "fNs-RD-tsM.text", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: R144.5
      ///
      /// Locales: en, es
      static let eVySr7gwNormalTitle = Rswift.StringResource(key: "eVy-sr-7gw.normalTitle", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Ride Details
      ///
      /// Locales: en, es
      static let qa78IwZText = Rswift.StringResource(key: "6qa-78-iwZ.text", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Tax Applied
      ///
      /// Locales: en, es
      static let haRYeRrnText = Rswift.StringResource(key: "haR-ye-Rrn.text", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Time Taken
      ///
      /// Locales: en, es
      static let nppmmugvText = Rswift.StringResource(key: "NPP-MM-uGV.text", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Total Payable Amount
      ///
      /// Locales: en, es
      static let pji7IepText = Rswift.StringResource(key: "7PJ-I7-iep.text", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Waiting Charges
      ///
      /// Locales: en, es
      static let e5UG4XcMText = Rswift.StringResource(key: "e5U-g4-xcM.text", tableName: "HomeBookingInvoiceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: 1003, state st# 56-A life, Rawalpindi House # 23-H, punjab, Pakistan
      ///
      /// Locales: en, es
      static func sbo4vGTFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sbo-4v-gTF.text", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "Sbo-4v-gTF.text"
        }

        return NSLocalizedString("Sbo-4v-gTF.text", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      /// en translation: 1003, state st# 56-A life, lahore, punjab, Pakistan
      ///
      /// Locales: en, es
      static func wtpAwWVkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wtp-Aw-WVk.text", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "Wtp-Aw-WVk.text"
        }

        return NSLocalizedString("Wtp-Aw-WVk.text", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      /// en translation: 12.4 KM
      ///
      /// Locales: en, es
      static func uf8OaJXaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UF8-Oa-JXa.text", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "UF8-Oa-JXa.text"
        }

        return NSLocalizedString("UF8-Oa-JXa.text", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      /// en translation: 6 Min
      ///
      /// Locales: en, es
      static func hhgtcMfjText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HHG-TC-mfj.text", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "HHG-TC-mfj.text"
        }

        return NSLocalizedString("HHG-TC-mfj.text", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      /// en translation: Booking ID
      ///
      /// Locales: en, es
      static func vf0JOQwEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Vf0-jO-qwE.text", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "Vf0-jO-qwE.text"
        }

        return NSLocalizedString("Vf0-jO-qwE.text", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      /// en translation: CASH
      ///
      /// Locales: en, es
      static func uc2KSUoEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uc2-KS-uoE.text", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "uc2-KS-uoE.text"
        }

        return NSLocalizedString("uc2-KS-uoE.text", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      /// en translation: Distance Travelled
      ///
      /// Locales: en, es
      static func eUDZi96UText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eUD-zi-96U.text", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "eUD-zi-96U.text"
        }

        return NSLocalizedString("eUD-zi-96U.text", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      /// en translation: Distance fare
      ///
      /// Locales: en, es
      static func eegTdEWJText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Eeg-Td-EWJ.text", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "Eeg-Td-EWJ.text"
        }

        return NSLocalizedString("Eeg-Td-EWJ.text", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      /// en translation: Drop
      ///
      /// Locales: en, es
      static func eDhMDG4UText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EDh-MD-G4U.text", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "EDh-MD-G4U.text"
        }

        return NSLocalizedString("EDh-MD-G4U.text", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      /// en translation: Invoice
      ///
      /// Locales: en, es
      static func cECLX3erText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cEC-lX-3er.text", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "cEC-lX-3er.text"
        }

        return NSLocalizedString("cEC-lX-3er.text", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      /// en translation: KWDF44556
      ///
      /// Locales: en, es
      static func epLDRIutText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("epL-DR-iut.text", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "epL-DR-iut.text"
        }

        return NSLocalizedString("epL-DR-iut.text", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      /// en translation: PAY ONLINE
      ///
      /// Locales: en, es
      static func mbfKlTNnNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mbf-kl-TNn.normalTitle", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "Mbf-kl-TNn.normalTitle"
        }

        return NSLocalizedString("Mbf-kl-TNn.normalTitle", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      /// en translation: Payment Mode
      ///
      /// Locales: en, es
      static func nfr1lI8xText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nfr-1l-I8x.text", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "nfr-1l-I8x.text"
        }

        return NSLocalizedString("nfr-1l-I8x.text", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      /// en translation: Pickup
      ///
      /// Locales: en, es
      static func bvLdFLqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2bv-Ld-fLq.text", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "2bv-Ld-fLq.text"
        }

        return NSLocalizedString("2bv-Ld-fLq.text", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      /// en translation: R0
      ///
      /// Locales: en, es
      static func cJfXDXq1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cJf-xD-Xq1.text", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "cJf-xD-Xq1.text"
        }

        return NSLocalizedString("cJf-xD-Xq1.text", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      /// en translation: R0
      ///
      /// Locales: en, es
      static func d6OQ9SMlText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("d6O-q9-SMl.text", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "d6O-q9-SMl.text"
        }

        return NSLocalizedString("d6O-q9-SMl.text", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      /// en translation: R122.4
      ///
      /// Locales: en, es
      static func fNsRDTsMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fNs-RD-tsM.text", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "fNs-RD-tsM.text"
        }

        return NSLocalizedString("fNs-RD-tsM.text", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      /// en translation: R144.5
      ///
      /// Locales: en, es
      static func eVySr7gwNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eVy-sr-7gw.normalTitle", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "eVy-sr-7gw.normalTitle"
        }

        return NSLocalizedString("eVy-sr-7gw.normalTitle", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      /// en translation: Ride Details
      ///
      /// Locales: en, es
      static func qa78IwZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6qa-78-iwZ.text", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "6qa-78-iwZ.text"
        }

        return NSLocalizedString("6qa-78-iwZ.text", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      /// en translation: Tax Applied
      ///
      /// Locales: en, es
      static func haRYeRrnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("haR-ye-Rrn.text", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "haR-ye-Rrn.text"
        }

        return NSLocalizedString("haR-ye-Rrn.text", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      /// en translation: Time Taken
      ///
      /// Locales: en, es
      static func nppmmugvText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NPP-MM-uGV.text", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "NPP-MM-uGV.text"
        }

        return NSLocalizedString("NPP-MM-uGV.text", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      /// en translation: Total Payable Amount
      ///
      /// Locales: en, es
      static func pji7IepText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7PJ-I7-iep.text", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "7PJ-I7-iep.text"
        }

        return NSLocalizedString("7PJ-I7-iep.text", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      /// en translation: Waiting Charges
      ///
      /// Locales: en, es
      static func e5UG4XcMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("e5U-g4-xcM.text", tableName: "HomeBookingInvoiceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBookingInvoiceCell", preferredLanguages: preferredLanguages) else {
          return "e5U-g4-xcM.text"
        }

        return NSLocalizedString("e5U-g4-xcM.text", tableName: "HomeBookingInvoiceCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.homeBottomViewStage1Cell` struct is generated, and contains static references to 6 localization keys.
    struct homeBottomViewStage1Cell {
      /// en translation: Good Afternoon, Khan
      ///
      /// Locales: en, es
      static let sqIIEHsyText = Rswift.StringResource(key: "SqI-IE-Hsy.text", tableName: "HomeBottomViewStage1Cell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, es
      static let ktvv95RGText = Rswift.StringResource(key: "KTV-V9-5RG.text", tableName: "HomeBottomViewStage1Cell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Search Destination
      ///
      /// Locales: en, es
      static let cajx6UrXPlaceholder = Rswift.StringResource(key: "CAJ-X6-UrX.placeholder", tableName: "HomeBottomViewStage1Cell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Send/Pickup
      ///
      /// Locales: en, es
      static let prqKmY8gText = Rswift.StringResource(key: "PRQ-Km-Y8g.text", tableName: "HomeBottomViewStage1Cell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Where are you going?
      ///
      /// Locales: en, es
      static let wbQYCFPVText = Rswift.StringResource(key: "wbQ-yC-fPV.text", tableName: "HomeBottomViewStage1Cell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Work
      ///
      /// Locales: en, es
      static let sfTCa7iNText = Rswift.StringResource(key: "SfT-Ca-7iN.text", tableName: "HomeBottomViewStage1Cell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: Good Afternoon, Khan
      ///
      /// Locales: en, es
      static func sqIIEHsyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SqI-IE-Hsy.text", tableName: "HomeBottomViewStage1Cell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage1Cell", preferredLanguages: preferredLanguages) else {
          return "SqI-IE-Hsy.text"
        }

        return NSLocalizedString("SqI-IE-Hsy.text", tableName: "HomeBottomViewStage1Cell", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, es
      static func ktvv95RGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KTV-V9-5RG.text", tableName: "HomeBottomViewStage1Cell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage1Cell", preferredLanguages: preferredLanguages) else {
          return "KTV-V9-5RG.text"
        }

        return NSLocalizedString("KTV-V9-5RG.text", tableName: "HomeBottomViewStage1Cell", bundle: bundle, comment: "")
      }

      /// en translation: Search Destination
      ///
      /// Locales: en, es
      static func cajx6UrXPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CAJ-X6-UrX.placeholder", tableName: "HomeBottomViewStage1Cell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage1Cell", preferredLanguages: preferredLanguages) else {
          return "CAJ-X6-UrX.placeholder"
        }

        return NSLocalizedString("CAJ-X6-UrX.placeholder", tableName: "HomeBottomViewStage1Cell", bundle: bundle, comment: "")
      }

      /// en translation: Send/Pickup
      ///
      /// Locales: en, es
      static func prqKmY8gText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PRQ-Km-Y8g.text", tableName: "HomeBottomViewStage1Cell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage1Cell", preferredLanguages: preferredLanguages) else {
          return "PRQ-Km-Y8g.text"
        }

        return NSLocalizedString("PRQ-Km-Y8g.text", tableName: "HomeBottomViewStage1Cell", bundle: bundle, comment: "")
      }

      /// en translation: Where are you going?
      ///
      /// Locales: en, es
      static func wbQYCFPVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wbQ-yC-fPV.text", tableName: "HomeBottomViewStage1Cell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage1Cell", preferredLanguages: preferredLanguages) else {
          return "wbQ-yC-fPV.text"
        }

        return NSLocalizedString("wbQ-yC-fPV.text", tableName: "HomeBottomViewStage1Cell", bundle: bundle, comment: "")
      }

      /// en translation: Work
      ///
      /// Locales: en, es
      static func sfTCa7iNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SfT-Ca-7iN.text", tableName: "HomeBottomViewStage1Cell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage1Cell", preferredLanguages: preferredLanguages) else {
          return "SfT-Ca-7iN.text"
        }

        return NSLocalizedString("SfT-Ca-7iN.text", tableName: "HomeBottomViewStage1Cell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.homeBottomViewStage2Cell` struct is generated, and contains static references to 6 localization keys.
    struct homeBottomViewStage2Cell {
      /// en translation: Add Promo Code
      ///
      /// Locales: en, es
      static let qmdCV7bhText = Rswift.StringResource(key: "qmd-CV-7bh.text", tableName: "HomeBottomViewStage2Cell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Add Promo Code
      ///
      /// Locales: en, es
      static let wVrDwOfyText = Rswift.StringResource(key: "wVr-dw-ofy.text", tableName: "HomeBottomViewStage2Cell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: BOOK
      ///
      /// Locales: en, es
      static let uuR3PKSNormalTitle = Rswift.StringResource(key: "8Uu-R3-PKS.normalTitle", tableName: "HomeBottomViewStage2Cell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Promocode
      ///
      /// Locales: en, es
      static let nYz9k9O4Text = Rswift.StringResource(key: "NYz-9k-9O4.text", tableName: "HomeBottomViewStage2Cell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Promocode
      ///
      /// Locales: en, es
      static let teazkvauText = Rswift.StringResource(key: "TEA-zK-vAU.text", tableName: "HomeBottomViewStage2Cell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Use wallet amount
      ///
      /// Locales: en, es
      static let czZN7NDVText = Rswift.StringResource(key: "czZ-N7-NDV.text", tableName: "HomeBottomViewStage2Cell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: Add Promo Code
      ///
      /// Locales: en, es
      static func qmdCV7bhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qmd-CV-7bh.text", tableName: "HomeBottomViewStage2Cell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage2Cell", preferredLanguages: preferredLanguages) else {
          return "qmd-CV-7bh.text"
        }

        return NSLocalizedString("qmd-CV-7bh.text", tableName: "HomeBottomViewStage2Cell", bundle: bundle, comment: "")
      }

      /// en translation: Add Promo Code
      ///
      /// Locales: en, es
      static func wVrDwOfyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wVr-dw-ofy.text", tableName: "HomeBottomViewStage2Cell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage2Cell", preferredLanguages: preferredLanguages) else {
          return "wVr-dw-ofy.text"
        }

        return NSLocalizedString("wVr-dw-ofy.text", tableName: "HomeBottomViewStage2Cell", bundle: bundle, comment: "")
      }

      /// en translation: BOOK
      ///
      /// Locales: en, es
      static func uuR3PKSNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8Uu-R3-PKS.normalTitle", tableName: "HomeBottomViewStage2Cell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage2Cell", preferredLanguages: preferredLanguages) else {
          return "8Uu-R3-PKS.normalTitle"
        }

        return NSLocalizedString("8Uu-R3-PKS.normalTitle", tableName: "HomeBottomViewStage2Cell", bundle: bundle, comment: "")
      }

      /// en translation: Promocode
      ///
      /// Locales: en, es
      static func nYz9k9O4Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NYz-9k-9O4.text", tableName: "HomeBottomViewStage2Cell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage2Cell", preferredLanguages: preferredLanguages) else {
          return "NYz-9k-9O4.text"
        }

        return NSLocalizedString("NYz-9k-9O4.text", tableName: "HomeBottomViewStage2Cell", bundle: bundle, comment: "")
      }

      /// en translation: Promocode
      ///
      /// Locales: en, es
      static func teazkvauText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TEA-zK-vAU.text", tableName: "HomeBottomViewStage2Cell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage2Cell", preferredLanguages: preferredLanguages) else {
          return "TEA-zK-vAU.text"
        }

        return NSLocalizedString("TEA-zK-vAU.text", tableName: "HomeBottomViewStage2Cell", bundle: bundle, comment: "")
      }

      /// en translation: Use wallet amount
      ///
      /// Locales: en, es
      static func czZN7NDVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("czZ-N7-NDV.text", tableName: "HomeBottomViewStage2Cell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage2Cell", preferredLanguages: preferredLanguages) else {
          return "czZ-N7-NDV.text"
        }

        return NSLocalizedString("czZ-N7-NDV.text", tableName: "HomeBottomViewStage2Cell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.homeBottomViewStage3Cell` struct is generated, and contains static references to 3 localization keys.
    struct homeBottomViewStage3Cell {
      /// en translation: APPLY
      ///
      /// Locales: en, es
      static let tAOW0ewNormalTitle = Rswift.StringResource(key: "7tA-OW-0ew.normalTitle", tableName: "HomeBottomViewStage3Cell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Add Coupon code
      ///
      /// Locales: en, es
      static let dcAXgKDvText = Rswift.StringResource(key: "dcA-Xg-kDv.text", tableName: "HomeBottomViewStage3Cell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter Coupon code
      ///
      /// Locales: en, es
      static let ryNXbOKWPlaceholder = Rswift.StringResource(key: "RyN-xb-OKW.placeholder", tableName: "HomeBottomViewStage3Cell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: APPLY
      ///
      /// Locales: en, es
      static func tAOW0ewNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7tA-OW-0ew.normalTitle", tableName: "HomeBottomViewStage3Cell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage3Cell", preferredLanguages: preferredLanguages) else {
          return "7tA-OW-0ew.normalTitle"
        }

        return NSLocalizedString("7tA-OW-0ew.normalTitle", tableName: "HomeBottomViewStage3Cell", bundle: bundle, comment: "")
      }

      /// en translation: Add Coupon code
      ///
      /// Locales: en, es
      static func dcAXgKDvText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dcA-Xg-kDv.text", tableName: "HomeBottomViewStage3Cell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage3Cell", preferredLanguages: preferredLanguages) else {
          return "dcA-Xg-kDv.text"
        }

        return NSLocalizedString("dcA-Xg-kDv.text", tableName: "HomeBottomViewStage3Cell", bundle: bundle, comment: "")
      }

      /// en translation: Enter Coupon code
      ///
      /// Locales: en, es
      static func ryNXbOKWPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RyN-xb-OKW.placeholder", tableName: "HomeBottomViewStage3Cell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage3Cell", preferredLanguages: preferredLanguages) else {
          return "RyN-xb-OKW.placeholder"
        }

        return NSLocalizedString("RyN-xb-OKW.placeholder", tableName: "HomeBottomViewStage3Cell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.homeBottomViewStage4BottomCell` struct is generated, and contains static references to 4 localization keys.
    struct homeBottomViewStage4BottomCell {
      /// en translation: Call Driver
      ///
      /// Locales: en, es
      static let s4wYNVJEText = Rswift.StringResource(key: "S4w-YN-vJE.text", tableName: "HomeBottomViewStage4BottomCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, es
      static let nTiZJ0VMText = Rswift.StringResource(key: "nTi-zJ-0VM.text", tableName: "HomeBottomViewStage4BottomCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Chat
      ///
      /// Locales: en, es
      static let xxBvWFaText = Rswift.StringResource(key: "4Xx-Bv-wFa.text", tableName: "HomeBottomViewStage4BottomCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Share
      ///
      /// Locales: en, es
      static let uU7BRZBAText = Rswift.StringResource(key: "uU7-bR-zBA.text", tableName: "HomeBottomViewStage4BottomCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: Call Driver
      ///
      /// Locales: en, es
      static func s4wYNVJEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("S4w-YN-vJE.text", tableName: "HomeBottomViewStage4BottomCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage4BottomCell", preferredLanguages: preferredLanguages) else {
          return "S4w-YN-vJE.text"
        }

        return NSLocalizedString("S4w-YN-vJE.text", tableName: "HomeBottomViewStage4BottomCell", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, es
      static func nTiZJ0VMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nTi-zJ-0VM.text", tableName: "HomeBottomViewStage4BottomCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage4BottomCell", preferredLanguages: preferredLanguages) else {
          return "nTi-zJ-0VM.text"
        }

        return NSLocalizedString("nTi-zJ-0VM.text", tableName: "HomeBottomViewStage4BottomCell", bundle: bundle, comment: "")
      }

      /// en translation: Chat
      ///
      /// Locales: en, es
      static func xxBvWFaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4Xx-Bv-wFa.text", tableName: "HomeBottomViewStage4BottomCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage4BottomCell", preferredLanguages: preferredLanguages) else {
          return "4Xx-Bv-wFa.text"
        }

        return NSLocalizedString("4Xx-Bv-wFa.text", tableName: "HomeBottomViewStage4BottomCell", bundle: bundle, comment: "")
      }

      /// en translation: Share
      ///
      /// Locales: en, es
      static func uU7BRZBAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uU7-bR-zBA.text", tableName: "HomeBottomViewStage4BottomCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage4BottomCell", preferredLanguages: preferredLanguages) else {
          return "uU7-bR-zBA.text"
        }

        return NSLocalizedString("uU7-bR-zBA.text", tableName: "HomeBottomViewStage4BottomCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.homeBottomViewStage4HeaderCell` struct is generated, and contains static references to 5 localization keys.
    struct homeBottomViewStage4HeaderCell {
      /// en translation: Enjoy the ride
      ///
      /// Locales: en, es
      static let x14PMAjGText = Rswift.StringResource(key: "X14-pM-ajG.text", tableName: "HomeBottomViewStage4HeaderCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Faizan Khan
      ///
      /// Locales: en, es
      static let udQOQxqText = Rswift.StringResource(key: "7ud-qO-Qxq.text", tableName: "HomeBottomViewStage4HeaderCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Toyota yellow
      ///
      /// Locales: en, es
      static let cc6AWYbGText = Rswift.StringResource(key: "cc6-aW-YbG.text", tableName: "HomeBottomViewStage4HeaderCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: bap2022
      ///
      /// Locales: en, es
      static let uwAWA1IText = Rswift.StringResource(key: "5Uw-aW-a1I.text", tableName: "HomeBottomViewStage4HeaderCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: due to peak hours, charges will be vary based on availability of providers
      ///
      /// Locales: en, es
      static let ninQACpZText = Rswift.StringResource(key: "nin-QA-cpZ.text", tableName: "HomeBottomViewStage4HeaderCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: Enjoy the ride
      ///
      /// Locales: en, es
      static func x14PMAjGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("X14-pM-ajG.text", tableName: "HomeBottomViewStage4HeaderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage4HeaderCell", preferredLanguages: preferredLanguages) else {
          return "X14-pM-ajG.text"
        }

        return NSLocalizedString("X14-pM-ajG.text", tableName: "HomeBottomViewStage4HeaderCell", bundle: bundle, comment: "")
      }

      /// en translation: Faizan Khan
      ///
      /// Locales: en, es
      static func udQOQxqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7ud-qO-Qxq.text", tableName: "HomeBottomViewStage4HeaderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage4HeaderCell", preferredLanguages: preferredLanguages) else {
          return "7ud-qO-Qxq.text"
        }

        return NSLocalizedString("7ud-qO-Qxq.text", tableName: "HomeBottomViewStage4HeaderCell", bundle: bundle, comment: "")
      }

      /// en translation: Toyota yellow
      ///
      /// Locales: en, es
      static func cc6AWYbGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cc6-aW-YbG.text", tableName: "HomeBottomViewStage4HeaderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage4HeaderCell", preferredLanguages: preferredLanguages) else {
          return "cc6-aW-YbG.text"
        }

        return NSLocalizedString("cc6-aW-YbG.text", tableName: "HomeBottomViewStage4HeaderCell", bundle: bundle, comment: "")
      }

      /// en translation: bap2022
      ///
      /// Locales: en, es
      static func uwAWA1IText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5Uw-aW-a1I.text", tableName: "HomeBottomViewStage4HeaderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage4HeaderCell", preferredLanguages: preferredLanguages) else {
          return "5Uw-aW-a1I.text"
        }

        return NSLocalizedString("5Uw-aW-a1I.text", tableName: "HomeBottomViewStage4HeaderCell", bundle: bundle, comment: "")
      }

      /// en translation: due to peak hours, charges will be vary based on availability of providers
      ///
      /// Locales: en, es
      static func ninQACpZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nin-QA-cpZ.text", tableName: "HomeBottomViewStage4HeaderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage4HeaderCell", preferredLanguages: preferredLanguages) else {
          return "nin-QA-cpZ.text"
        }

        return NSLocalizedString("nin-QA-cpZ.text", tableName: "HomeBottomViewStage4HeaderCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.homeBottomViewStage4PromoCell` struct is generated, and contains static references to 2 localization keys.
    struct homeBottomViewStage4PromoCell {
      /// en translation: 8765
      ///
      /// Locales: en, es
      static let jReCcKRJNormalTitle = Rswift.StringResource(key: "jRe-cc-KRJ.normalTitle", tableName: "HomeBottomViewStage4PromoCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: OTP:
      ///
      /// Locales: en, es
      static let z40E8FnText = Rswift.StringResource(key: "0z4-0E-8Fn.text", tableName: "HomeBottomViewStage4PromoCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: 8765
      ///
      /// Locales: en, es
      static func jReCcKRJNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jRe-cc-KRJ.normalTitle", tableName: "HomeBottomViewStage4PromoCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage4PromoCell", preferredLanguages: preferredLanguages) else {
          return "jRe-cc-KRJ.normalTitle"
        }

        return NSLocalizedString("jRe-cc-KRJ.normalTitle", tableName: "HomeBottomViewStage4PromoCell", bundle: bundle, comment: "")
      }

      /// en translation: OTP:
      ///
      /// Locales: en, es
      static func z40E8FnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0z4-0E-8Fn.text", tableName: "HomeBottomViewStage4PromoCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage4PromoCell", preferredLanguages: preferredLanguages) else {
          return "0z4-0E-8Fn.text"
        }

        return NSLocalizedString("0z4-0E-8Fn.text", tableName: "HomeBottomViewStage4PromoCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.homeBottomViewStage4RatingCell` struct is generated, and contains static references to 2 localization keys.
    struct homeBottomViewStage4RatingCell {
      /// en translation: Rate your Ride with Muneeb
      ///
      /// Locales: en, es
      static let e4Z5ZqHText = Rswift.StringResource(key: "4e4-Z5-ZqH.text", tableName: "HomeBottomViewStage4RatingCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SUBMIT
      ///
      /// Locales: en, es
      static let p5TPSDtfNormalTitle = Rswift.StringResource(key: "P5T-PS-dtf.normalTitle", tableName: "HomeBottomViewStage4RatingCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: Rate your Ride with Muneeb
      ///
      /// Locales: en, es
      static func e4Z5ZqHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4e4-Z5-ZqH.text", tableName: "HomeBottomViewStage4RatingCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage4RatingCell", preferredLanguages: preferredLanguages) else {
          return "4e4-Z5-ZqH.text"
        }

        return NSLocalizedString("4e4-Z5-ZqH.text", tableName: "HomeBottomViewStage4RatingCell", bundle: bundle, comment: "")
      }

      /// en translation: SUBMIT
      ///
      /// Locales: en, es
      static func p5TPSDtfNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("P5T-PS-dtf.normalTitle", tableName: "HomeBottomViewStage4RatingCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeBottomViewStage4RatingCell", preferredLanguages: preferredLanguages) else {
          return "P5T-PS-dtf.normalTitle"
        }

        return NSLocalizedString("P5T-PS-dtf.normalTitle", tableName: "HomeBottomViewStage4RatingCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.homeEstimatedPriceCell` struct is generated, and contains static references to 12 localization keys.
    struct homeEstimatedPriceCell {
      /// en translation: 0 mins
      ///
      /// Locales: en, es
      static let hlHJUVoKText = Rswift.StringResource(key: "HlH-JU-VoK.text", tableName: "HomeEstimatedPriceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 4 KM
      ///
      /// Locales: en, es
      static let nbVkZ5XText = Rswift.StringResource(key: "3nb-Vk-Z5X.text", tableName: "HomeEstimatedPriceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Distance
      ///
      /// Locales: en, es
      static let jiTEyJOyText = Rswift.StringResource(key: "JiT-ey-JOy.text", tableName: "HomeEstimatedPriceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Due to high demand or peak hours price may vary
      ///
      /// Locales: en, es
      static let aW8BDliText = Rswift.StringResource(key: "9aW-8B-dli.text", tableName: "HomeEstimatedPriceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Estimated Price
      ///
      /// Locales: en, es
      static let xmKZbLr1Text = Rswift.StringResource(key: "xmK-zb-Lr1.text", tableName: "HomeEstimatedPriceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Price
      ///
      /// Locales: en, es
      static let ioRYPHu0Text = Rswift.StringResource(key: "ioR-yP-hu0.text", tableName: "HomeEstimatedPriceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Tax Charges
      ///
      /// Locales: en, es
      static let x80THPrEText = Rswift.StringResource(key: "X80-TH-prE.text", tableName: "HomeEstimatedPriceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Time
      ///
      /// Locales: en, es
      static let h3dMe0GfText = Rswift.StringResource(key: "h3d-Me-0Gf.text", tableName: "HomeEstimatedPriceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Total
      ///
      /// Locales: en, es
      static let hjAY7FysText = Rswift.StringResource(key: "HjA-Y7-Fys.text", tableName: "HomeEstimatedPriceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ZK0
      ///
      /// Locales: en, es
      static let dOhTWVhKText = Rswift.StringResource(key: "dOh-TW-VhK.text", tableName: "HomeEstimatedPriceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ZK45
      ///
      /// Locales: en, es
      static let pvZDhDAbText = Rswift.StringResource(key: "pvZ-dh-DAb.text", tableName: "HomeEstimatedPriceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ZK45
      ///
      /// Locales: en, es
      static let xmnCfT1wText = Rswift.StringResource(key: "Xmn-cf-t1w.text", tableName: "HomeEstimatedPriceCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: 0 mins
      ///
      /// Locales: en, es
      static func hlHJUVoKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HlH-JU-VoK.text", tableName: "HomeEstimatedPriceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeEstimatedPriceCell", preferredLanguages: preferredLanguages) else {
          return "HlH-JU-VoK.text"
        }

        return NSLocalizedString("HlH-JU-VoK.text", tableName: "HomeEstimatedPriceCell", bundle: bundle, comment: "")
      }

      /// en translation: 4 KM
      ///
      /// Locales: en, es
      static func nbVkZ5XText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3nb-Vk-Z5X.text", tableName: "HomeEstimatedPriceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeEstimatedPriceCell", preferredLanguages: preferredLanguages) else {
          return "3nb-Vk-Z5X.text"
        }

        return NSLocalizedString("3nb-Vk-Z5X.text", tableName: "HomeEstimatedPriceCell", bundle: bundle, comment: "")
      }

      /// en translation: Distance
      ///
      /// Locales: en, es
      static func jiTEyJOyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JiT-ey-JOy.text", tableName: "HomeEstimatedPriceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeEstimatedPriceCell", preferredLanguages: preferredLanguages) else {
          return "JiT-ey-JOy.text"
        }

        return NSLocalizedString("JiT-ey-JOy.text", tableName: "HomeEstimatedPriceCell", bundle: bundle, comment: "")
      }

      /// en translation: Due to high demand or peak hours price may vary
      ///
      /// Locales: en, es
      static func aW8BDliText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9aW-8B-dli.text", tableName: "HomeEstimatedPriceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeEstimatedPriceCell", preferredLanguages: preferredLanguages) else {
          return "9aW-8B-dli.text"
        }

        return NSLocalizedString("9aW-8B-dli.text", tableName: "HomeEstimatedPriceCell", bundle: bundle, comment: "")
      }

      /// en translation: Estimated Price
      ///
      /// Locales: en, es
      static func xmKZbLr1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xmK-zb-Lr1.text", tableName: "HomeEstimatedPriceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeEstimatedPriceCell", preferredLanguages: preferredLanguages) else {
          return "xmK-zb-Lr1.text"
        }

        return NSLocalizedString("xmK-zb-Lr1.text", tableName: "HomeEstimatedPriceCell", bundle: bundle, comment: "")
      }

      /// en translation: Price
      ///
      /// Locales: en, es
      static func ioRYPHu0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ioR-yP-hu0.text", tableName: "HomeEstimatedPriceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeEstimatedPriceCell", preferredLanguages: preferredLanguages) else {
          return "ioR-yP-hu0.text"
        }

        return NSLocalizedString("ioR-yP-hu0.text", tableName: "HomeEstimatedPriceCell", bundle: bundle, comment: "")
      }

      /// en translation: Tax Charges
      ///
      /// Locales: en, es
      static func x80THPrEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("X80-TH-prE.text", tableName: "HomeEstimatedPriceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeEstimatedPriceCell", preferredLanguages: preferredLanguages) else {
          return "X80-TH-prE.text"
        }

        return NSLocalizedString("X80-TH-prE.text", tableName: "HomeEstimatedPriceCell", bundle: bundle, comment: "")
      }

      /// en translation: Time
      ///
      /// Locales: en, es
      static func h3dMe0GfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("h3d-Me-0Gf.text", tableName: "HomeEstimatedPriceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeEstimatedPriceCell", preferredLanguages: preferredLanguages) else {
          return "h3d-Me-0Gf.text"
        }

        return NSLocalizedString("h3d-Me-0Gf.text", tableName: "HomeEstimatedPriceCell", bundle: bundle, comment: "")
      }

      /// en translation: Total
      ///
      /// Locales: en, es
      static func hjAY7FysText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HjA-Y7-Fys.text", tableName: "HomeEstimatedPriceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeEstimatedPriceCell", preferredLanguages: preferredLanguages) else {
          return "HjA-Y7-Fys.text"
        }

        return NSLocalizedString("HjA-Y7-Fys.text", tableName: "HomeEstimatedPriceCell", bundle: bundle, comment: "")
      }

      /// en translation: ZK0
      ///
      /// Locales: en, es
      static func dOhTWVhKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dOh-TW-VhK.text", tableName: "HomeEstimatedPriceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeEstimatedPriceCell", preferredLanguages: preferredLanguages) else {
          return "dOh-TW-VhK.text"
        }

        return NSLocalizedString("dOh-TW-VhK.text", tableName: "HomeEstimatedPriceCell", bundle: bundle, comment: "")
      }

      /// en translation: ZK45
      ///
      /// Locales: en, es
      static func pvZDhDAbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pvZ-dh-DAb.text", tableName: "HomeEstimatedPriceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeEstimatedPriceCell", preferredLanguages: preferredLanguages) else {
          return "pvZ-dh-DAb.text"
        }

        return NSLocalizedString("pvZ-dh-DAb.text", tableName: "HomeEstimatedPriceCell", bundle: bundle, comment: "")
      }

      /// en translation: ZK45
      ///
      /// Locales: en, es
      static func xmnCfT1wText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Xmn-cf-t1w.text", tableName: "HomeEstimatedPriceCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeEstimatedPriceCell", preferredLanguages: preferredLanguages) else {
          return "Xmn-cf-t1w.text"
        }

        return NSLocalizedString("Xmn-cf-t1w.text", tableName: "HomeEstimatedPriceCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.homeScheduleCell` struct is generated, and contains static references to 3 localization keys.
    struct homeScheduleCell {
      /// en translation: SCHEDULE REQUEST
      ///
      /// Locales: en, es
      static let lq0CPCTkNormalTitle = Rswift.StringResource(key: "Lq0-cP-cTk.normalTitle", tableName: "HomeScheduleCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Schedule a Ride
      ///
      /// Locales: en, es
      static let cuLhUOfText = Rswift.StringResource(key: "5CU-Lh-uOf.text", tableName: "HomeScheduleCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Select Date
      ///
      /// Locales: en, es
      static let hgTHlCsbText = Rswift.StringResource(key: "hgT-hl-csb.text", tableName: "HomeScheduleCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: SCHEDULE REQUEST
      ///
      /// Locales: en, es
      static func lq0CPCTkNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Lq0-cP-cTk.normalTitle", tableName: "HomeScheduleCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeScheduleCell", preferredLanguages: preferredLanguages) else {
          return "Lq0-cP-cTk.normalTitle"
        }

        return NSLocalizedString("Lq0-cP-cTk.normalTitle", tableName: "HomeScheduleCell", bundle: bundle, comment: "")
      }

      /// en translation: Schedule a Ride
      ///
      /// Locales: en, es
      static func cuLhUOfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5CU-Lh-uOf.text", tableName: "HomeScheduleCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeScheduleCell", preferredLanguages: preferredLanguages) else {
          return "5CU-Lh-uOf.text"
        }

        return NSLocalizedString("5CU-Lh-uOf.text", tableName: "HomeScheduleCell", bundle: bundle, comment: "")
      }

      /// en translation: Select Date
      ///
      /// Locales: en, es
      static func hgTHlCsbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hgT-hl-csb.text", tableName: "HomeScheduleCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeScheduleCell", preferredLanguages: preferredLanguages) else {
          return "hgT-hl-csb.text"
        }

        return NSLocalizedString("hgT-hl-csb.text", tableName: "HomeScheduleCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.homeServiceDetailCell` struct is generated, and contains static references to 12 localization keys.
    struct homeServiceDetailCell {
      /// en translation: 4
      ///
      /// Locales: en, es
      static let z0qGjGYQText = Rswift.StringResource(key: "z0q-gj-gYQ.text", tableName: "HomeServiceDetailCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Base Price
      ///
      /// Locales: en, es
      static let wZbUoEteText = Rswift.StringResource(key: "WZb-Uo-Ete.text", tableName: "HomeServiceDetailCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Calculation Type
      ///
      /// Locales: en, es
      static let idNQB8bText = Rswift.StringResource(key: "2Id-NQ-B8b.text", tableName: "HomeServiceDetailCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Capacity
      ///
      /// Locales: en, es
      static let ptYZRYV1Text = Rswift.StringResource(key: "ptY-zR-yV1.text", tableName: "HomeServiceDetailCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: DONE
      ///
      /// Locales: en, es
      static let xe5E4ODyNormalTitle = Rswift.StringResource(key: "XE5-E4-ODy.normalTitle", tableName: "HomeServiceDetailCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Distance
      ///
      /// Locales: en, es
      static let wks8vYQ1Text = Rswift.StringResource(key: "WKS-8v-yQ1.text", tableName: "HomeServiceDetailCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Economy
      ///
      /// Locales: en, es
      static let x5ISfLXIText = Rswift.StringResource(key: "X5I-sf-LXI.text", tableName: "HomeServiceDetailCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Price/km
      ///
      /// Locales: en, es
      static let svJQ5QGqText = Rswift.StringResource(key: "svJ-Q5-qGq.text", tableName: "HomeServiceDetailCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Rate Card
      ///
      /// Locales: en, es
      static let uPrDKJEzText = Rswift.StringResource(key: "uPr-DK-JEz.text", tableName: "HomeServiceDetailCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Size(LxBxH)
      ///
      /// Locales: en, es
      static let cmIRPGhyText = Rswift.StringResource(key: "cmI-RP-Ghy.text", tableName: "HomeServiceDetailCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: USA10
      ///
      /// Locales: en, es
      static let bzKbTXmText = Rswift.StringResource(key: "0bz-kb-TXm.text", tableName: "HomeServiceDetailCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: USA33
      ///
      /// Locales: en, es
      static let lAbRAVFsText = Rswift.StringResource(key: "LAb-rA-VFs.text", tableName: "HomeServiceDetailCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: 4
      ///
      /// Locales: en, es
      static func z0qGjGYQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("z0q-gj-gYQ.text", tableName: "HomeServiceDetailCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeServiceDetailCell", preferredLanguages: preferredLanguages) else {
          return "z0q-gj-gYQ.text"
        }

        return NSLocalizedString("z0q-gj-gYQ.text", tableName: "HomeServiceDetailCell", bundle: bundle, comment: "")
      }

      /// en translation: Base Price
      ///
      /// Locales: en, es
      static func wZbUoEteText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WZb-Uo-Ete.text", tableName: "HomeServiceDetailCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeServiceDetailCell", preferredLanguages: preferredLanguages) else {
          return "WZb-Uo-Ete.text"
        }

        return NSLocalizedString("WZb-Uo-Ete.text", tableName: "HomeServiceDetailCell", bundle: bundle, comment: "")
      }

      /// en translation: Calculation Type
      ///
      /// Locales: en, es
      static func idNQB8bText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2Id-NQ-B8b.text", tableName: "HomeServiceDetailCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeServiceDetailCell", preferredLanguages: preferredLanguages) else {
          return "2Id-NQ-B8b.text"
        }

        return NSLocalizedString("2Id-NQ-B8b.text", tableName: "HomeServiceDetailCell", bundle: bundle, comment: "")
      }

      /// en translation: Capacity
      ///
      /// Locales: en, es
      static func ptYZRYV1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ptY-zR-yV1.text", tableName: "HomeServiceDetailCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeServiceDetailCell", preferredLanguages: preferredLanguages) else {
          return "ptY-zR-yV1.text"
        }

        return NSLocalizedString("ptY-zR-yV1.text", tableName: "HomeServiceDetailCell", bundle: bundle, comment: "")
      }

      /// en translation: DONE
      ///
      /// Locales: en, es
      static func xe5E4ODyNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XE5-E4-ODy.normalTitle", tableName: "HomeServiceDetailCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeServiceDetailCell", preferredLanguages: preferredLanguages) else {
          return "XE5-E4-ODy.normalTitle"
        }

        return NSLocalizedString("XE5-E4-ODy.normalTitle", tableName: "HomeServiceDetailCell", bundle: bundle, comment: "")
      }

      /// en translation: Distance
      ///
      /// Locales: en, es
      static func wks8vYQ1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WKS-8v-yQ1.text", tableName: "HomeServiceDetailCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeServiceDetailCell", preferredLanguages: preferredLanguages) else {
          return "WKS-8v-yQ1.text"
        }

        return NSLocalizedString("WKS-8v-yQ1.text", tableName: "HomeServiceDetailCell", bundle: bundle, comment: "")
      }

      /// en translation: Economy
      ///
      /// Locales: en, es
      static func x5ISfLXIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("X5I-sf-LXI.text", tableName: "HomeServiceDetailCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeServiceDetailCell", preferredLanguages: preferredLanguages) else {
          return "X5I-sf-LXI.text"
        }

        return NSLocalizedString("X5I-sf-LXI.text", tableName: "HomeServiceDetailCell", bundle: bundle, comment: "")
      }

      /// en translation: Price/km
      ///
      /// Locales: en, es
      static func svJQ5QGqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("svJ-Q5-qGq.text", tableName: "HomeServiceDetailCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeServiceDetailCell", preferredLanguages: preferredLanguages) else {
          return "svJ-Q5-qGq.text"
        }

        return NSLocalizedString("svJ-Q5-qGq.text", tableName: "HomeServiceDetailCell", bundle: bundle, comment: "")
      }

      /// en translation: Rate Card
      ///
      /// Locales: en, es
      static func uPrDKJEzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uPr-DK-JEz.text", tableName: "HomeServiceDetailCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeServiceDetailCell", preferredLanguages: preferredLanguages) else {
          return "uPr-DK-JEz.text"
        }

        return NSLocalizedString("uPr-DK-JEz.text", tableName: "HomeServiceDetailCell", bundle: bundle, comment: "")
      }

      /// en translation: Size(LxBxH)
      ///
      /// Locales: en, es
      static func cmIRPGhyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cmI-RP-Ghy.text", tableName: "HomeServiceDetailCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeServiceDetailCell", preferredLanguages: preferredLanguages) else {
          return "cmI-RP-Ghy.text"
        }

        return NSLocalizedString("cmI-RP-Ghy.text", tableName: "HomeServiceDetailCell", bundle: bundle, comment: "")
      }

      /// en translation: USA10
      ///
      /// Locales: en, es
      static func bzKbTXmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0bz-kb-TXm.text", tableName: "HomeServiceDetailCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeServiceDetailCell", preferredLanguages: preferredLanguages) else {
          return "0bz-kb-TXm.text"
        }

        return NSLocalizedString("0bz-kb-TXm.text", tableName: "HomeServiceDetailCell", bundle: bundle, comment: "")
      }

      /// en translation: USA33
      ///
      /// Locales: en, es
      static func lAbRAVFsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LAb-rA-VFs.text", tableName: "HomeServiceDetailCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeServiceDetailCell", preferredLanguages: preferredLanguages) else {
          return "LAb-rA-VFs.text"
        }

        return NSLocalizedString("LAb-rA-VFs.text", tableName: "HomeServiceDetailCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.homeVehicleViewStage2Cell` struct is generated, and contains static references to 4 localization keys.
    struct homeVehicleViewStage2Cell {
      /// en translation: 4
      ///
      /// Locales: en, es
      static let fB3NrARNText = Rswift.StringResource(key: "fB3-nr-aRN.text", tableName: "HomeVehicleViewStage2Cell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Get Estimate
      ///
      /// Locales: en, es
      static let mql8LtQNormalTitle = Rswift.StringResource(key: "8MQ-l8-ltQ.normalTitle", tableName: "HomeVehicleViewStage2Cell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Taxi
      ///
      /// Locales: en, es
      static let akl1wGaAText = Rswift.StringResource(key: "akl-1w-gaA.text", tableName: "HomeVehicleViewStage2Cell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ZK45
      ///
      /// Locales: en, es
      static let cfE4OM2Text = Rswift.StringResource(key: "5Cf-E4-oM2.text", tableName: "HomeVehicleViewStage2Cell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: 4
      ///
      /// Locales: en, es
      static func fB3NrARNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fB3-nr-aRN.text", tableName: "HomeVehicleViewStage2Cell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeVehicleViewStage2Cell", preferredLanguages: preferredLanguages) else {
          return "fB3-nr-aRN.text"
        }

        return NSLocalizedString("fB3-nr-aRN.text", tableName: "HomeVehicleViewStage2Cell", bundle: bundle, comment: "")
      }

      /// en translation: Get Estimate
      ///
      /// Locales: en, es
      static func mql8LtQNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8MQ-l8-ltQ.normalTitle", tableName: "HomeVehicleViewStage2Cell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeVehicleViewStage2Cell", preferredLanguages: preferredLanguages) else {
          return "8MQ-l8-ltQ.normalTitle"
        }

        return NSLocalizedString("8MQ-l8-ltQ.normalTitle", tableName: "HomeVehicleViewStage2Cell", bundle: bundle, comment: "")
      }

      /// en translation: Taxi
      ///
      /// Locales: en, es
      static func akl1wGaAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("akl-1w-gaA.text", tableName: "HomeVehicleViewStage2Cell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeVehicleViewStage2Cell", preferredLanguages: preferredLanguages) else {
          return "akl-1w-gaA.text"
        }

        return NSLocalizedString("akl-1w-gaA.text", tableName: "HomeVehicleViewStage2Cell", bundle: bundle, comment: "")
      }

      /// en translation: ZK45
      ///
      /// Locales: en, es
      static func cfE4OM2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5Cf-E4-oM2.text", tableName: "HomeVehicleViewStage2Cell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeVehicleViewStage2Cell", preferredLanguages: preferredLanguages) else {
          return "5Cf-E4-oM2.text"
        }

        return NSLocalizedString("5Cf-E4-oM2.text", tableName: "HomeVehicleViewStage2Cell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.homeVehicleViewStage2HeaderCell` struct is generated, and contains static references to 3 localization keys.
    struct homeVehicleViewStage2HeaderCell {
      /// en translation: DELIVERY
      ///
      /// Locales: en, es
      static let touYu5d0NormalTitle = Rswift.StringResource(key: "TOU-Yu-5d0.normalTitle", tableName: "HomeVehicleViewStage2HeaderCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: TRANSPORTATION
      ///
      /// Locales: en, es
      static let xlsjtWwNormalTitle = Rswift.StringResource(key: "0XL-sJ-TWw.normalTitle", tableName: "HomeVehicleViewStage2HeaderCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: TRUCK
      ///
      /// Locales: en, es
      static let iDdVe5NormalTitle = Rswift.StringResource(key: "25i-dd-ve5.normalTitle", tableName: "HomeVehicleViewStage2HeaderCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: DELIVERY
      ///
      /// Locales: en, es
      static func touYu5d0NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TOU-Yu-5d0.normalTitle", tableName: "HomeVehicleViewStage2HeaderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeVehicleViewStage2HeaderCell", preferredLanguages: preferredLanguages) else {
          return "TOU-Yu-5d0.normalTitle"
        }

        return NSLocalizedString("TOU-Yu-5d0.normalTitle", tableName: "HomeVehicleViewStage2HeaderCell", bundle: bundle, comment: "")
      }

      /// en translation: TRANSPORTATION
      ///
      /// Locales: en, es
      static func xlsjtWwNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0XL-sJ-TWw.normalTitle", tableName: "HomeVehicleViewStage2HeaderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeVehicleViewStage2HeaderCell", preferredLanguages: preferredLanguages) else {
          return "0XL-sJ-TWw.normalTitle"
        }

        return NSLocalizedString("0XL-sJ-TWw.normalTitle", tableName: "HomeVehicleViewStage2HeaderCell", bundle: bundle, comment: "")
      }

      /// en translation: TRUCK
      ///
      /// Locales: en, es
      static func iDdVe5NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("25i-dd-ve5.normalTitle", tableName: "HomeVehicleViewStage2HeaderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeVehicleViewStage2HeaderCell", preferredLanguages: preferredLanguages) else {
          return "25i-dd-ve5.normalTitle"
        }

        return NSLocalizedString("25i-dd-ve5.normalTitle", tableName: "HomeVehicleViewStage2HeaderCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.homeVehicleViewStage2HeaderCollectionCell` struct is generated, and contains static references to 1 localization keys.
    struct homeVehicleViewStage2HeaderCollectionCell {
      /// en translation: Taxi
      ///
      /// Locales: en, es
      static let iFUVpX58Text = Rswift.StringResource(key: "iFU-Vp-x58.text", tableName: "HomeVehicleViewStage2HeaderCollectionCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: Taxi
      ///
      /// Locales: en, es
      static func iFUVpX58Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iFU-Vp-x58.text", tableName: "HomeVehicleViewStage2HeaderCollectionCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeVehicleViewStage2HeaderCollectionCell", preferredLanguages: preferredLanguages) else {
          return "iFU-Vp-x58.text"
        }

        return NSLocalizedString("iFU-Vp-x58.text", tableName: "HomeVehicleViewStage2HeaderCollectionCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.home` struct is generated, and contains static references to 32 localization keys.
    struct home {
      /// en translation: 77, sector 44, Islamabad
      ///
      /// Locales: es, en
      static let c6KKrOrrText = Rswift.StringResource(key: "C6K-kr-orr.text", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: 77, sector 44, Islamabad
      ///
      /// Locales: es, en
      static let sRl0VSX9Text = Rswift.StringResource(key: "SRl-0V-SX9.text", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: ADD MONEY TO TH WALLET
      ///
      /// Locales: es, en
      static let azrJwMcINormalTitle = Rswift.StringResource(key: "AZR-Jw-mcI.normalTitle", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Add SOS Number
      ///
      /// Locales: es, en
      static let tAST9EvoText = Rswift.StringResource(key: "tAS-t9-evo.text", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: CANCEL RIDE
      ///
      /// Locales: es, en
      static let qMXGmFriNormalTitle = Rswift.StringResource(key: "qMX-Gm-Fri.normalTitle", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Change
      ///
      /// Locales: es, en
      static let blfElWYuNormalTitle = Rswift.StringResource(key: "blf-El-WYu.normalTitle", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Change
      ///
      /// Locales: es, en
      static let stkNmC7xNormalTitle = Rswift.StringResource(key: "Stk-Nm-C7x.normalTitle", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Chat
      ///
      /// Locales: es, en
      static let gOJjTEUText = Rswift.StringResource(key: "6gO-jj-TEU.text", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Coupon history
      ///
      /// Locales: es, en
      static let zScDaBEBNormalTitle = Rswift.StringResource(key: "zSc-da-bEB.normalTitle", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Details
      ///
      /// Locales: es, en
      static let jM5IVJAhText = Rswift.StringResource(key: "jM5-iV-JAh.text", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Edit Account
      ///
      /// Locales: es, en
      static let gpN7TU9RText = Rswift.StringResource(key: "GpN-7T-U9R.text", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Finding Ride...
      ///
      /// Locales: es, en
      static let xpOJA5GText = Rswift.StringResource(key: "9Xp-oJ-A5G.text", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Manage Cards
      ///
      /// Locales: es, en
      static let fjYJkYw0Text = Rswift.StringResource(key: "FjY-Jk-yw0.text", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: PAY ONLINE
      ///
      /// Locales: es, en
      static let gaECJURkNormalTitle = Rswift.StringResource(key: "gaE-CJ-URk.normalTitle", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Pay By Card
      ///
      /// Locales: es, en
      static let fgkIC2xPText = Rswift.StringResource(key: "fgk-iC-2xP.text", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Pay By Card
      ///
      /// Locales: es, en
      static let xJTKS9GNText = Rswift.StringResource(key: "xJT-kS-9GN.text", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Phone no.
      ///
      /// Locales: es, en
      static let r2oWmYzkPlaceholder = Rswift.StringResource(key: "r2o-wm-Yzk.placeholder", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Profile
      ///
      /// Locales: es, en
      static let cdLRfFaVText = Rswift.StringResource(key: "CdL-rf-FaV.text", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Profile
      ///
      /// Locales: es, en
      static let vgL3O7yiText = Rswift.StringResource(key: "vgL-3O-7yi.text", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Ride History
      ///
      /// Locales: es, en
      static let st1HCKD7Text = Rswift.StringResource(key: "ST1-HC-KD7.text", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: SOS
      ///
      /// Locales: es, en
      static let uzySqTOjText = Rswift.StringResource(key: "uzy-sq-TOj.text", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Schedule Rides
      ///
      /// Locales: es, en
      static let aBdAID5jText = Rswift.StringResource(key: "aBd-aI-d5j.text", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: es, en
      static let a9rIpEJLText = Rswift.StringResource(key: "a9r-Ip-eJL.text", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Support
      ///
      /// Locales: es, en
      static let fAP5jWCPText = Rswift.StringResource(key: "fAP-5j-wCP.text", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Type your message
      ///
      /// Locales: es, en
      static let ameKKGFcPlaceholder = Rswift.StringResource(key: "Ame-KK-GFc.placeholder", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: UPDATE
      ///
      /// Locales: es, en
      static let aehIeN4lNormalTitle = Rswift.StringResource(key: "Aeh-ie-N4l.normalTitle", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: VIEW RECEIPT
      ///
      /// Locales: es, en
      static let zBxEeRAHNormalTitle = Rswift.StringResource(key: "ZBx-Ee-rAH.normalTitle", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Wallet
      ///
      /// Locales: es, en
      static let reBGDWmText = Rswift.StringResource(key: "7re-BG-dWm.text", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Wallet & Coupon History
      ///
      /// Locales: es, en
      static let hjTljText = Rswift.StringResource(key: "167-hJ-Tlj.text", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Wallet history
      ///
      /// Locales: es, en
      static let ndTAAVgcNormalTitle = Rswift.StringResource(key: "NdT-AA-vgc.normalTitle", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: XXXX - XXXX -XXXX - 4242
      ///
      /// Locales: es, en
      static let ogo6l5EbText = Rswift.StringResource(key: "Ogo-6l-5Eb.text", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: XXXX - XXXX -XXXX - 4242
      ///
      /// Locales: es, en
      static let zmvc6TdvText = Rswift.StringResource(key: "ZMV-c6-Tdv.text", tableName: "Home", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)

      /// en translation: 77, sector 44, Islamabad
      ///
      /// Locales: es, en
      static func c6KKrOrrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("C6K-kr-orr.text", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "C6K-kr-orr.text"
        }

        return NSLocalizedString("C6K-kr-orr.text", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: 77, sector 44, Islamabad
      ///
      /// Locales: es, en
      static func sRl0VSX9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SRl-0V-SX9.text", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "SRl-0V-SX9.text"
        }

        return NSLocalizedString("SRl-0V-SX9.text", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: ADD MONEY TO TH WALLET
      ///
      /// Locales: es, en
      static func azrJwMcINormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AZR-Jw-mcI.normalTitle", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "AZR-Jw-mcI.normalTitle"
        }

        return NSLocalizedString("AZR-Jw-mcI.normalTitle", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: Add SOS Number
      ///
      /// Locales: es, en
      static func tAST9EvoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tAS-t9-evo.text", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "tAS-t9-evo.text"
        }

        return NSLocalizedString("tAS-t9-evo.text", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: CANCEL RIDE
      ///
      /// Locales: es, en
      static func qMXGmFriNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qMX-Gm-Fri.normalTitle", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "qMX-Gm-Fri.normalTitle"
        }

        return NSLocalizedString("qMX-Gm-Fri.normalTitle", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: Change
      ///
      /// Locales: es, en
      static func blfElWYuNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blf-El-WYu.normalTitle", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "blf-El-WYu.normalTitle"
        }

        return NSLocalizedString("blf-El-WYu.normalTitle", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: Change
      ///
      /// Locales: es, en
      static func stkNmC7xNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Stk-Nm-C7x.normalTitle", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "Stk-Nm-C7x.normalTitle"
        }

        return NSLocalizedString("Stk-Nm-C7x.normalTitle", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: Chat
      ///
      /// Locales: es, en
      static func gOJjTEUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6gO-jj-TEU.text", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "6gO-jj-TEU.text"
        }

        return NSLocalizedString("6gO-jj-TEU.text", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: Coupon history
      ///
      /// Locales: es, en
      static func zScDaBEBNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zSc-da-bEB.normalTitle", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "zSc-da-bEB.normalTitle"
        }

        return NSLocalizedString("zSc-da-bEB.normalTitle", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: Details
      ///
      /// Locales: es, en
      static func jM5IVJAhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jM5-iV-JAh.text", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "jM5-iV-JAh.text"
        }

        return NSLocalizedString("jM5-iV-JAh.text", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: Edit Account
      ///
      /// Locales: es, en
      static func gpN7TU9RText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GpN-7T-U9R.text", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "GpN-7T-U9R.text"
        }

        return NSLocalizedString("GpN-7T-U9R.text", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: Finding Ride...
      ///
      /// Locales: es, en
      static func xpOJA5GText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9Xp-oJ-A5G.text", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "9Xp-oJ-A5G.text"
        }

        return NSLocalizedString("9Xp-oJ-A5G.text", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: Manage Cards
      ///
      /// Locales: es, en
      static func fjYJkYw0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FjY-Jk-yw0.text", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "FjY-Jk-yw0.text"
        }

        return NSLocalizedString("FjY-Jk-yw0.text", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: PAY ONLINE
      ///
      /// Locales: es, en
      static func gaECJURkNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gaE-CJ-URk.normalTitle", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "gaE-CJ-URk.normalTitle"
        }

        return NSLocalizedString("gaE-CJ-URk.normalTitle", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: Pay By Card
      ///
      /// Locales: es, en
      static func fgkIC2xPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fgk-iC-2xP.text", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "fgk-iC-2xP.text"
        }

        return NSLocalizedString("fgk-iC-2xP.text", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: Pay By Card
      ///
      /// Locales: es, en
      static func xJTKS9GNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xJT-kS-9GN.text", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "xJT-kS-9GN.text"
        }

        return NSLocalizedString("xJT-kS-9GN.text", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: Phone no.
      ///
      /// Locales: es, en
      static func r2oWmYzkPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("r2o-wm-Yzk.placeholder", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "r2o-wm-Yzk.placeholder"
        }

        return NSLocalizedString("r2o-wm-Yzk.placeholder", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: Profile
      ///
      /// Locales: es, en
      static func cdLRfFaVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CdL-rf-FaV.text", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "CdL-rf-FaV.text"
        }

        return NSLocalizedString("CdL-rf-FaV.text", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: Profile
      ///
      /// Locales: es, en
      static func vgL3O7yiText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vgL-3O-7yi.text", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "vgL-3O-7yi.text"
        }

        return NSLocalizedString("vgL-3O-7yi.text", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: Ride History
      ///
      /// Locales: es, en
      static func st1HCKD7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ST1-HC-KD7.text", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "ST1-HC-KD7.text"
        }

        return NSLocalizedString("ST1-HC-KD7.text", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: SOS
      ///
      /// Locales: es, en
      static func uzySqTOjText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uzy-sq-TOj.text", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "uzy-sq-TOj.text"
        }

        return NSLocalizedString("uzy-sq-TOj.text", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: Schedule Rides
      ///
      /// Locales: es, en
      static func aBdAID5jText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aBd-aI-d5j.text", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "aBd-aI-d5j.text"
        }

        return NSLocalizedString("aBd-aI-d5j.text", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: es, en
      static func a9rIpEJLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a9r-Ip-eJL.text", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "a9r-Ip-eJL.text"
        }

        return NSLocalizedString("a9r-Ip-eJL.text", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: Support
      ///
      /// Locales: es, en
      static func fAP5jWCPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fAP-5j-wCP.text", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "fAP-5j-wCP.text"
        }

        return NSLocalizedString("fAP-5j-wCP.text", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: Type your message
      ///
      /// Locales: es, en
      static func ameKKGFcPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ame-KK-GFc.placeholder", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "Ame-KK-GFc.placeholder"
        }

        return NSLocalizedString("Ame-KK-GFc.placeholder", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: UPDATE
      ///
      /// Locales: es, en
      static func aehIeN4lNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Aeh-ie-N4l.normalTitle", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "Aeh-ie-N4l.normalTitle"
        }

        return NSLocalizedString("Aeh-ie-N4l.normalTitle", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: VIEW RECEIPT
      ///
      /// Locales: es, en
      static func zBxEeRAHNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZBx-Ee-rAH.normalTitle", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "ZBx-Ee-rAH.normalTitle"
        }

        return NSLocalizedString("ZBx-Ee-rAH.normalTitle", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: Wallet
      ///
      /// Locales: es, en
      static func reBGDWmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7re-BG-dWm.text", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "7re-BG-dWm.text"
        }

        return NSLocalizedString("7re-BG-dWm.text", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: Wallet & Coupon History
      ///
      /// Locales: es, en
      static func hjTljText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("167-hJ-Tlj.text", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "167-hJ-Tlj.text"
        }

        return NSLocalizedString("167-hJ-Tlj.text", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: Wallet history
      ///
      /// Locales: es, en
      static func ndTAAVgcNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NdT-AA-vgc.normalTitle", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "NdT-AA-vgc.normalTitle"
        }

        return NSLocalizedString("NdT-AA-vgc.normalTitle", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: XXXX - XXXX -XXXX - 4242
      ///
      /// Locales: es, en
      static func ogo6l5EbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ogo-6l-5Eb.text", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "Ogo-6l-5Eb.text"
        }

        return NSLocalizedString("Ogo-6l-5Eb.text", tableName: "Home", bundle: bundle, comment: "")
      }

      /// en translation: XXXX - XXXX -XXXX - 4242
      ///
      /// Locales: es, en
      static func zmvc6TdvText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZMV-c6-Tdv.text", tableName: "Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Home", preferredLanguages: preferredLanguages) else {
          return "ZMV-c6-Tdv.text"
        }

        return NSLocalizedString("ZMV-c6-Tdv.text", tableName: "Home", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 86 localization keys.
    struct localizable {
      /// en translation: %@ Km
      ///
      /// Locales: en, es
      static let distanceKm = Rswift.StringResource(key: "distanceKm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: %@ Min
      ///
      /// Locales: en, es
      static let total_Min = Rswift.StringResource(key: "total_Min", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: %@ mins
      ///
      /// Locales: en, es
      static let total_mins = Rswift.StringResource(key: "total_mins", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 0 mins
      ///
      /// Locales: en, es
      static let no_mins = Rswift.StringResource(key: "no_mins", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 10
      ///
      /// Locales: en, es
      static let ten = Rswift.StringResource(key: "ten", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 20
      ///
      /// Locales: en, es
      static let twenty = Rswift.StringResource(key: "twenty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 4242
      ///
      /// Locales: en, es
      static let fourTwo = Rswift.StringResource(key: "fourTwo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 50
      ///
      /// Locales: en, es
      static let fifty = Rswift.StringResource(key: "fifty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Add Card for payments
      ///
      /// Locales: en, es
      static let addCardForPayments = Rswift.StringResource(key: "Add Card for payments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Add Promo Code
      ///
      /// Locales: en, es
      static let addPromoCode = Rswift.StringResource(key: "Add Promo Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Are you sure want to logout?
      ///
      /// Locales: en, es
      static let areYouSureWantToLogout = Rswift.StringResource(key: "Are you sure want to logout?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: BookingID: %@
      ///
      /// Locales: en, es
      static let bookingID = Rswift.StringResource(key: "BookingID:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, es
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Code has been sent.
      ///
      /// Locales: en, es
      static let codeHasBeenSent = Rswift.StringResource(key: "Code has been sent.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Countries
      ///
      /// Locales: en, es
      static let countries = Rswift.StringResource(key: "Countries", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Credited by
      ///
      /// Locales: en, es
      static let creditedBy = Rswift.StringResource(key: "Credited by", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: DELIVERY
      ///
      /// Locales: en, es
      static let deliverY = Rswift.StringResource(key: "DELIVERY", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Debited by
      ///
      /// Locales: en, es
      static let debitedBy = Rswift.StringResource(key: "Debited by", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, es
      static let done = Rswift.StringResource(key: "Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Download app from here:
      ///
      /// Locales: en, es
      static let downloadAppFromHere = Rswift.StringResource(key: "Download app from here:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Download best taxi app from here:
      ///
      /// Locales: en, es
      static let downloadBestTaxiAppFromHere = Rswift.StringResource(key: "Download best taxi app from here:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Driver accepted your request.
      ///
      /// Locales: en, es
      static let driverAcceptedYourRequest = Rswift.StringResource(key: "Driver accepted your request.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Driver has arrived at your location.
      ///
      /// Locales: en, es
      static let driverHasArrivedAtYourLocation = Rswift.StringResource(key: "Driver has arrived at your location.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Due to peak hours, charges will be vary based on availability of providers
      ///
      /// Locales: en, es
      static let availabilityOfProviders = Rswift.StringResource(key: "Availability of providers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Due to peak hours, charges will be vary based on availability of providers
      ///
      /// Locales: en, es
      static let dueToPeakHours = Rswift.StringResource(key: "Due to peak hours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Email required.
      ///
      /// Locales: en, es
      static let emailRequired = Rswift.StringResource(key: "Email required.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enjoy the ride
      ///
      /// Locales: en, es
      static let enjoyTheRide = Rswift.StringResource(key: "Enjoy the ride", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter drop off location
      ///
      /// Locales: en, es
      static let enterDropOffLocation = Rswift.StringResource(key: "Enter drop off location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter your pickup location
      ///
      /// Locales: en, es
      static let enterYourPickupLocation = Rswift.StringResource(key: "Enter your pickup location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: First name required.
      ///
      /// Locales: en, es
      static let firstNameRequired = Rswift.StringResource(key: "First name required.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Good Afternoon
      ///
      /// Locales: en, es
      static let goodAfternoon = Rswift.StringResource(key: "Good Afternoon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Good Evening
      ///
      /// Locales: en, es
      static let goodEvening = Rswift.StringResource(key: "Good Evening", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Good Morning
      ///
      /// Locales: en, es
      static let goodMorning = Rswift.StringResource(key: "Good Morning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Good Night
      ///
      /// Locales: en, es
      static let goodNight = Rswift.StringResource(key: "Good Night", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, es
      static let home = Rswift.StringResource(key: "Home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: I need support ...)
      ///
      /// Locales: en, es
      static let iNeedSupport = Rswift.StringResource(key: "I need support ...)", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Invalid code
      ///
      /// Locales: en, es
      static let invalidCode = Rswift.StringResource(key: "Invalid code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Kindly add SOS number first from settings
      ///
      /// Locales: en, es
      static let kindlyAddSOSNumberFirstFromSettings = Rswift.StringResource(key: "Kindly add SOS number first from settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Kindly enter an amount
      ///
      /// Locales: en, es
      static let kindlyEnterAnAmount = Rswift.StringResource(key: "Kindly enter an amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Kindly enter message
      ///
      /// Locales: en, es
      static let kindlyEnterMessage = Rswift.StringResource(key: "Kindly enter message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Kindly enter valid phone number.
      ///
      /// Locales: en, es
      static let kindlyEnterValidPhoneNumber = Rswift.StringResource(key: "Kindly enter valid phone number.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Kindly fill all fields
      ///
      /// Locales: en, es
      static let kindlyFillAllFields = Rswift.StringResource(key: "Kindly fill all fields", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Kindly give rating
      ///
      /// Locales: en, es
      static let kindlyGiveRating = Rswift.StringResource(key: "Kindly give rating", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Kindly restart the app to apply changes for localization.
      ///
      /// Locales: en, es
      static let kindlyRestartTheAppToApplyChangesForLocalization = Rswift.StringResource(key: "Kindly restart the app to apply changes for localization.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Kindly select destination!
      ///
      /// Locales: en, es
      static let kindlySelectDestination = Rswift.StringResource(key: "Kindly select destination!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Kindly select pickup location!
      ///
      /// Locales: en, es
      static let kindlySelectPickupLocation = Rswift.StringResource(key: "Kindly select pickup location!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Kindly select terms & condition
      ///
      /// Locales: en, es
      static let kindlySelectTermsCondition = Rswift.StringResource(key: "Kindly select terms & condition", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Kindly wait for some time before sending the otp again.
      ///
      /// Locales: en, es
      static let kindlyWaitForSomeTimeBeforeSendingTheOtpAgain = Rswift.StringResource(key: "Kindly wait for some time before sending the otp again.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Last name required.
      ///
      /// Locales: en, es
      static let lastNameRequired = Rswift.StringResource(key: "Last name required.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Manage Cards
      ///
      /// Locales: en, es
      static let manageCards = Rswift.StringResource(key: "Manage Cards", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: NO
      ///
      /// Locales: en, es
      static let nO = Rswift.StringResource(key: "NO", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: New password & Confirm Password are not matching.
      ///
      /// Locales: en, es
      static let newPasswordConfirmPasswordAreNotMatching = Rswift.StringResource(key: "New password & Confirm Password are not matching.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: No comment available
      ///
      /// Locales: en, es
      static let noCommentAvailable = Rswift.StringResource(key: "No comment available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: No history available!
      ///
      /// Locales: en, es
      static let noHistoryAvailable = Rswift.StringResource(key: "No history available!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: No rides available!
      ///
      /// Locales: en, es
      static let noRidesAvailable = Rswift.StringResource(key: "No rides available!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: No rides completed
      ///
      /// Locales: en, es
      static let noRidesCompleted = Rswift.StringResource(key: "No rides completed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, es
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Okey
      ///
      /// Locales: en, es
      static let okey = Rswift.StringResource(key: "Okey", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Oops
      ///
      /// Locales: en, es
      static let oops = Rswift.StringResource(key: "Oops", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Password required.
      ///
      /// Locales: en, es
      static let passwordRequired = Rswift.StringResource(key: "Password required.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Password should be 6 characters
      ///
      /// Locales: en, es
      static let passwordShouldBe6Characters = Rswift.StringResource(key: "Password should be 6 characters", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Phone number has been verified.
      ///
      /// Locales: en, es
      static let phoneNumberHasBeenVerified = Rswift.StringResource(key: "Phone number has been verified.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Phone number required.
      ///
      /// Locales: en, es
      static let phoneNumberRequired = Rswift.StringResource(key: "Phone number required.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Please Login: User Already Registered
      ///
      /// Locales: en, es
      static let pleaseLoginUserAlreadyRegistered = Rswift.StringResource(key: "Please Login: User Already Registered", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Profile
      ///
      /// Locales: en, es
      static let profile = Rswift.StringResource(key: "Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Rides History
      ///
      /// Locales: en, es
      static let ridesHistory = Rswift.StringResource(key: "Rides History", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SOS Number Not Available
      ///
      /// Locales: en, es
      static let sosNumberNotAvailable = Rswift.StringResource(key: "SOS Number Not Available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Schedule Rides
      ///
      /// Locales: en, es
      static let scheduleRides = Rswift.StringResource(key: "Schedule Rides", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Select Date & Time
      ///
      /// Locales: en, es
      static let selectDateTime = Rswift.StringResource(key: "Select Date Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Set/Add default card.
      ///
      /// Locales: en, es
      static let setAddDefaultCard = Rswift.StringResource(key: "Set/Add default card.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, es
      static let settings = Rswift.StringResource(key: "Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Something went wrong!
      ///
      /// Locales: en, es
      static let somethingWentWrong = Rswift.StringResource(key: "Something went wrong!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Something went wrong!, e.g: (Location Already Exists)
      ///
      /// Locales: en, es
      static let locationAlreadyExists = Rswift.StringResource(key: "Location Already Exists", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Support
      ///
      /// Locales: en, es
      static let support = Rswift.StringResource(key: "Support", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: TRANSPORTATION
      ///
      /// Locales: en, es
      static let transportatioN = Rswift.StringResource(key: "TRANSPORTATION", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: TRUCK
      ///
      /// Locales: en, es
      static let trucK = Rswift.StringResource(key: "TRUCK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: There are no default card available!
      ///
      /// Locales: en, es
      static let thereAreNoDefaultCardAvailable = Rswift.StringResource(key: "There are no default card available!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Today
      ///
      /// Locales: en, es
      static let today = Rswift.StringResource(key: "Today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Tomorrow
      ///
      /// Locales: en, es
      static let tomorrow = Rswift.StringResource(key: "Tomorrow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: User create successfully!
      ///
      /// Locales: en, es
      static let userCreateSuccessfully = Rswift.StringResource(key: "User create successfully!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Valid email required.
      ///
      /// Locales: en, es
      static let validEmailRequired = Rswift.StringResource(key: "Valid email required.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Wallet
      ///
      /// Locales: en, es
      static let wallet = Rswift.StringResource(key: "Wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Wallet & Coupon history
      ///
      /// Locales: en, es
      static let walletCouponHistory = Rswift.StringResource(key: "Wallet Coupon history", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: We need your location to show you on Maps
      ///
      /// Locales: en, es
      static let mapsMessage = Rswift.StringResource(key: "MapsMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: YES
      ///
      /// Locales: en, es
      static let yeS = Rswift.StringResource(key: "YES", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Yesterday
      ///
      /// Locales: en, es
      static let yesterday = Rswift.StringResource(key: "Yesterday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: %@ Km
      ///
      /// Locales: en, es
      static func distanceKm(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("distanceKm", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "distanceKm"
        }

        let format = NSLocalizedString("distanceKm", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Min
      ///
      /// Locales: en, es
      static func total_Min(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("total_Min", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "total_Min"
        }

        let format = NSLocalizedString("total_Min", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ mins
      ///
      /// Locales: en, es
      static func total_mins(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("total_mins", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "total_mins"
        }

        let format = NSLocalizedString("total_mins", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: 0 mins
      ///
      /// Locales: en, es
      static func no_mins(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_mins", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_mins"
        }

        return NSLocalizedString("no_mins", bundle: bundle, comment: "")
      }

      /// en translation: 10
      ///
      /// Locales: en, es
      static func ten(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ten", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ten"
        }

        return NSLocalizedString("ten", bundle: bundle, comment: "")
      }

      /// en translation: 20
      ///
      /// Locales: en, es
      static func twenty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("twenty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "twenty"
        }

        return NSLocalizedString("twenty", bundle: bundle, comment: "")
      }

      /// en translation: 4242
      ///
      /// Locales: en, es
      static func fourTwo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fourTwo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fourTwo"
        }

        return NSLocalizedString("fourTwo", bundle: bundle, comment: "")
      }

      /// en translation: 50
      ///
      /// Locales: en, es
      static func fifty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fifty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fifty"
        }

        return NSLocalizedString("fifty", bundle: bundle, comment: "")
      }

      /// en translation: Add Card for payments
      ///
      /// Locales: en, es
      static func addCardForPayments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add Card for payments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add Card for payments"
        }

        return NSLocalizedString("Add Card for payments", bundle: bundle, comment: "")
      }

      /// en translation: Add Promo Code
      ///
      /// Locales: en, es
      static func addPromoCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add Promo Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add Promo Code"
        }

        return NSLocalizedString("Add Promo Code", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure want to logout?
      ///
      /// Locales: en, es
      static func areYouSureWantToLogout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure want to logout?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure want to logout?"
        }

        return NSLocalizedString("Are you sure want to logout?", bundle: bundle, comment: "")
      }

      /// en translation: BookingID: %@
      ///
      /// Locales: en, es
      static func bookingID(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("BookingID:", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "BookingID:"
        }

        let format = NSLocalizedString("BookingID:", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Cancel
      ///
      /// Locales: en, es
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Code has been sent.
      ///
      /// Locales: en, es
      static func codeHasBeenSent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Code has been sent.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Code has been sent."
        }

        return NSLocalizedString("Code has been sent.", bundle: bundle, comment: "")
      }

      /// en translation: Countries
      ///
      /// Locales: en, es
      static func countries(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Countries", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Countries"
        }

        return NSLocalizedString("Countries", bundle: bundle, comment: "")
      }

      /// en translation: Credited by
      ///
      /// Locales: en, es
      static func creditedBy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Credited by", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Credited by"
        }

        return NSLocalizedString("Credited by", bundle: bundle, comment: "")
      }

      /// en translation: DELIVERY
      ///
      /// Locales: en, es
      static func deliverY(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DELIVERY", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DELIVERY"
        }

        return NSLocalizedString("DELIVERY", bundle: bundle, comment: "")
      }

      /// en translation: Debited by
      ///
      /// Locales: en, es
      static func debitedBy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Debited by", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Debited by"
        }

        return NSLocalizedString("Debited by", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, es
      static func done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Done"
        }

        return NSLocalizedString("Done", bundle: bundle, comment: "")
      }

      /// en translation: Download app from here:
      ///
      /// Locales: en, es
      static func downloadAppFromHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Download app from here:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Download app from here:"
        }

        return NSLocalizedString("Download app from here:", bundle: bundle, comment: "")
      }

      /// en translation: Download best taxi app from here:
      ///
      /// Locales: en, es
      static func downloadBestTaxiAppFromHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Download best taxi app from here:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Download best taxi app from here:"
        }

        return NSLocalizedString("Download best taxi app from here:", bundle: bundle, comment: "")
      }

      /// en translation: Driver accepted your request.
      ///
      /// Locales: en, es
      static func driverAcceptedYourRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Driver accepted your request.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Driver accepted your request."
        }

        return NSLocalizedString("Driver accepted your request.", bundle: bundle, comment: "")
      }

      /// en translation: Driver has arrived at your location.
      ///
      /// Locales: en, es
      static func driverHasArrivedAtYourLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Driver has arrived at your location.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Driver has arrived at your location."
        }

        return NSLocalizedString("Driver has arrived at your location.", bundle: bundle, comment: "")
      }

      /// en translation: Due to peak hours, charges will be vary based on availability of providers
      ///
      /// Locales: en, es
      static func availabilityOfProviders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Availability of providers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Availability of providers"
        }

        return NSLocalizedString("Availability of providers", bundle: bundle, comment: "")
      }

      /// en translation: Due to peak hours, charges will be vary based on availability of providers
      ///
      /// Locales: en, es
      static func dueToPeakHours(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Due to peak hours", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Due to peak hours"
        }

        return NSLocalizedString("Due to peak hours", bundle: bundle, comment: "")
      }

      /// en translation: Email required.
      ///
      /// Locales: en, es
      static func emailRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email required.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Email required."
        }

        return NSLocalizedString("Email required.", bundle: bundle, comment: "")
      }

      /// en translation: Enjoy the ride
      ///
      /// Locales: en, es
      static func enjoyTheRide(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enjoy the ride", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enjoy the ride"
        }

        return NSLocalizedString("Enjoy the ride", bundle: bundle, comment: "")
      }

      /// en translation: Enter drop off location
      ///
      /// Locales: en, es
      static func enterDropOffLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter drop off location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter drop off location"
        }

        return NSLocalizedString("Enter drop off location", bundle: bundle, comment: "")
      }

      /// en translation: Enter your pickup location
      ///
      /// Locales: en, es
      static func enterYourPickupLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter your pickup location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter your pickup location"
        }

        return NSLocalizedString("Enter your pickup location", bundle: bundle, comment: "")
      }

      /// en translation: First name required.
      ///
      /// Locales: en, es
      static func firstNameRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("First name required.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "First name required."
        }

        return NSLocalizedString("First name required.", bundle: bundle, comment: "")
      }

      /// en translation: Good Afternoon
      ///
      /// Locales: en, es
      static func goodAfternoon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Good Afternoon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Good Afternoon"
        }

        return NSLocalizedString("Good Afternoon", bundle: bundle, comment: "")
      }

      /// en translation: Good Evening
      ///
      /// Locales: en, es
      static func goodEvening(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Good Evening", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Good Evening"
        }

        return NSLocalizedString("Good Evening", bundle: bundle, comment: "")
      }

      /// en translation: Good Morning
      ///
      /// Locales: en, es
      static func goodMorning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Good Morning", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Good Morning"
        }

        return NSLocalizedString("Good Morning", bundle: bundle, comment: "")
      }

      /// en translation: Good Night
      ///
      /// Locales: en, es
      static func goodNight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Good Night", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Good Night"
        }

        return NSLocalizedString("Good Night", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, es
      static func home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home"
        }

        return NSLocalizedString("Home", bundle: bundle, comment: "")
      }

      /// en translation: I need support ...)
      ///
      /// Locales: en, es
      static func iNeedSupport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("I need support ...)", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "I need support ...)"
        }

        return NSLocalizedString("I need support ...)", bundle: bundle, comment: "")
      }

      /// en translation: Invalid code
      ///
      /// Locales: en, es
      static func invalidCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Invalid code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Invalid code"
        }

        return NSLocalizedString("Invalid code", bundle: bundle, comment: "")
      }

      /// en translation: Kindly add SOS number first from settings
      ///
      /// Locales: en, es
      static func kindlyAddSOSNumberFirstFromSettings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kindly add SOS number first from settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Kindly add SOS number first from settings"
        }

        return NSLocalizedString("Kindly add SOS number first from settings", bundle: bundle, comment: "")
      }

      /// en translation: Kindly enter an amount
      ///
      /// Locales: en, es
      static func kindlyEnterAnAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kindly enter an amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Kindly enter an amount"
        }

        return NSLocalizedString("Kindly enter an amount", bundle: bundle, comment: "")
      }

      /// en translation: Kindly enter message
      ///
      /// Locales: en, es
      static func kindlyEnterMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kindly enter message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Kindly enter message"
        }

        return NSLocalizedString("Kindly enter message", bundle: bundle, comment: "")
      }

      /// en translation: Kindly enter valid phone number.
      ///
      /// Locales: en, es
      static func kindlyEnterValidPhoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kindly enter valid phone number.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Kindly enter valid phone number."
        }

        return NSLocalizedString("Kindly enter valid phone number.", bundle: bundle, comment: "")
      }

      /// en translation: Kindly fill all fields
      ///
      /// Locales: en, es
      static func kindlyFillAllFields(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kindly fill all fields", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Kindly fill all fields"
        }

        return NSLocalizedString("Kindly fill all fields", bundle: bundle, comment: "")
      }

      /// en translation: Kindly give rating
      ///
      /// Locales: en, es
      static func kindlyGiveRating(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kindly give rating", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Kindly give rating"
        }

        return NSLocalizedString("Kindly give rating", bundle: bundle, comment: "")
      }

      /// en translation: Kindly restart the app to apply changes for localization.
      ///
      /// Locales: en, es
      static func kindlyRestartTheAppToApplyChangesForLocalization(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kindly restart the app to apply changes for localization.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Kindly restart the app to apply changes for localization."
        }

        return NSLocalizedString("Kindly restart the app to apply changes for localization.", bundle: bundle, comment: "")
      }

      /// en translation: Kindly select destination!
      ///
      /// Locales: en, es
      static func kindlySelectDestination(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kindly select destination!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Kindly select destination!"
        }

        return NSLocalizedString("Kindly select destination!", bundle: bundle, comment: "")
      }

      /// en translation: Kindly select pickup location!
      ///
      /// Locales: en, es
      static func kindlySelectPickupLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kindly select pickup location!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Kindly select pickup location!"
        }

        return NSLocalizedString("Kindly select pickup location!", bundle: bundle, comment: "")
      }

      /// en translation: Kindly select terms & condition
      ///
      /// Locales: en, es
      static func kindlySelectTermsCondition(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kindly select terms & condition", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Kindly select terms & condition"
        }

        return NSLocalizedString("Kindly select terms & condition", bundle: bundle, comment: "")
      }

      /// en translation: Kindly wait for some time before sending the otp again.
      ///
      /// Locales: en, es
      static func kindlyWaitForSomeTimeBeforeSendingTheOtpAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kindly wait for some time before sending the otp again.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Kindly wait for some time before sending the otp again."
        }

        return NSLocalizedString("Kindly wait for some time before sending the otp again.", bundle: bundle, comment: "")
      }

      /// en translation: Last name required.
      ///
      /// Locales: en, es
      static func lastNameRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Last name required.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Last name required."
        }

        return NSLocalizedString("Last name required.", bundle: bundle, comment: "")
      }

      /// en translation: Manage Cards
      ///
      /// Locales: en, es
      static func manageCards(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Manage Cards", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Manage Cards"
        }

        return NSLocalizedString("Manage Cards", bundle: bundle, comment: "")
      }

      /// en translation: NO
      ///
      /// Locales: en, es
      static func nO(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NO", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NO"
        }

        return NSLocalizedString("NO", bundle: bundle, comment: "")
      }

      /// en translation: New password & Confirm Password are not matching.
      ///
      /// Locales: en, es
      static func newPasswordConfirmPasswordAreNotMatching(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New password & Confirm Password are not matching.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New password & Confirm Password are not matching."
        }

        return NSLocalizedString("New password & Confirm Password are not matching.", bundle: bundle, comment: "")
      }

      /// en translation: No comment available
      ///
      /// Locales: en, es
      static func noCommentAvailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No comment available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No comment available"
        }

        return NSLocalizedString("No comment available", bundle: bundle, comment: "")
      }

      /// en translation: No history available!
      ///
      /// Locales: en, es
      static func noHistoryAvailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No history available!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No history available!"
        }

        return NSLocalizedString("No history available!", bundle: bundle, comment: "")
      }

      /// en translation: No rides available!
      ///
      /// Locales: en, es
      static func noRidesAvailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No rides available!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No rides available!"
        }

        return NSLocalizedString("No rides available!", bundle: bundle, comment: "")
      }

      /// en translation: No rides completed
      ///
      /// Locales: en, es
      static func noRidesCompleted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No rides completed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No rides completed"
        }

        return NSLocalizedString("No rides completed", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, es
      static func oK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OK"
        }

        return NSLocalizedString("OK", bundle: bundle, comment: "")
      }

      /// en translation: Okey
      ///
      /// Locales: en, es
      static func okey(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Okey", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Okey"
        }

        return NSLocalizedString("Okey", bundle: bundle, comment: "")
      }

      /// en translation: Oops
      ///
      /// Locales: en, es
      static func oops(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Oops", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Oops"
        }

        return NSLocalizedString("Oops", bundle: bundle, comment: "")
      }

      /// en translation: Password required.
      ///
      /// Locales: en, es
      static func passwordRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password required.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password required."
        }

        return NSLocalizedString("Password required.", bundle: bundle, comment: "")
      }

      /// en translation: Password should be 6 characters
      ///
      /// Locales: en, es
      static func passwordShouldBe6Characters(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password should be 6 characters", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password should be 6 characters"
        }

        return NSLocalizedString("Password should be 6 characters", bundle: bundle, comment: "")
      }

      /// en translation: Phone number has been verified.
      ///
      /// Locales: en, es
      static func phoneNumberHasBeenVerified(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Phone number has been verified.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Phone number has been verified."
        }

        return NSLocalizedString("Phone number has been verified.", bundle: bundle, comment: "")
      }

      /// en translation: Phone number required.
      ///
      /// Locales: en, es
      static func phoneNumberRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Phone number required.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Phone number required."
        }

        return NSLocalizedString("Phone number required.", bundle: bundle, comment: "")
      }

      /// en translation: Please Login: User Already Registered
      ///
      /// Locales: en, es
      static func pleaseLoginUserAlreadyRegistered(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please Login: User Already Registered", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please Login: User Already Registered"
        }

        return NSLocalizedString("Please Login: User Already Registered", bundle: bundle, comment: "")
      }

      /// en translation: Profile
      ///
      /// Locales: en, es
      static func profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile"
        }

        return NSLocalizedString("Profile", bundle: bundle, comment: "")
      }

      /// en translation: Rides History
      ///
      /// Locales: en, es
      static func ridesHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rides History", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Rides History"
        }

        return NSLocalizedString("Rides History", bundle: bundle, comment: "")
      }

      /// en translation: SOS Number Not Available
      ///
      /// Locales: en, es
      static func sosNumberNotAvailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SOS Number Not Available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SOS Number Not Available"
        }

        return NSLocalizedString("SOS Number Not Available", bundle: bundle, comment: "")
      }

      /// en translation: Schedule Rides
      ///
      /// Locales: en, es
      static func scheduleRides(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Schedule Rides", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Schedule Rides"
        }

        return NSLocalizedString("Schedule Rides", bundle: bundle, comment: "")
      }

      /// en translation: Select Date & Time
      ///
      /// Locales: en, es
      static func selectDateTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Date Time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Date Time"
        }

        return NSLocalizedString("Select Date Time", bundle: bundle, comment: "")
      }

      /// en translation: Set/Add default card.
      ///
      /// Locales: en, es
      static func setAddDefaultCard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Set/Add default card.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Set/Add default card."
        }

        return NSLocalizedString("Set/Add default card.", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, es
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings"
        }

        return NSLocalizedString("Settings", bundle: bundle, comment: "")
      }

      /// en translation: Something went wrong!
      ///
      /// Locales: en, es
      static func somethingWentWrong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Something went wrong!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Something went wrong!"
        }

        return NSLocalizedString("Something went wrong!", bundle: bundle, comment: "")
      }

      /// en translation: Something went wrong!, e.g: (Location Already Exists)
      ///
      /// Locales: en, es
      static func locationAlreadyExists(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Location Already Exists", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Location Already Exists"
        }

        return NSLocalizedString("Location Already Exists", bundle: bundle, comment: "")
      }

      /// en translation: Support
      ///
      /// Locales: en, es
      static func support(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Support", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Support"
        }

        return NSLocalizedString("Support", bundle: bundle, comment: "")
      }

      /// en translation: TRANSPORTATION
      ///
      /// Locales: en, es
      static func transportatioN(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TRANSPORTATION", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TRANSPORTATION"
        }

        return NSLocalizedString("TRANSPORTATION", bundle: bundle, comment: "")
      }

      /// en translation: TRUCK
      ///
      /// Locales: en, es
      static func trucK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TRUCK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TRUCK"
        }

        return NSLocalizedString("TRUCK", bundle: bundle, comment: "")
      }

      /// en translation: There are no default card available!
      ///
      /// Locales: en, es
      static func thereAreNoDefaultCardAvailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("There are no default card available!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "There are no default card available!"
        }

        return NSLocalizedString("There are no default card available!", bundle: bundle, comment: "")
      }

      /// en translation: Today
      ///
      /// Locales: en, es
      static func today(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Today", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Today"
        }

        return NSLocalizedString("Today", bundle: bundle, comment: "")
      }

      /// en translation: Tomorrow
      ///
      /// Locales: en, es
      static func tomorrow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tomorrow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tomorrow"
        }

        return NSLocalizedString("Tomorrow", bundle: bundle, comment: "")
      }

      /// en translation: User create successfully!
      ///
      /// Locales: en, es
      static func userCreateSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User create successfully!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User create successfully!"
        }

        return NSLocalizedString("User create successfully!", bundle: bundle, comment: "")
      }

      /// en translation: Valid email required.
      ///
      /// Locales: en, es
      static func validEmailRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Valid email required.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Valid email required."
        }

        return NSLocalizedString("Valid email required.", bundle: bundle, comment: "")
      }

      /// en translation: Wallet
      ///
      /// Locales: en, es
      static func wallet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wallet"
        }

        return NSLocalizedString("Wallet", bundle: bundle, comment: "")
      }

      /// en translation: Wallet & Coupon history
      ///
      /// Locales: en, es
      static func walletCouponHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wallet Coupon history", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wallet Coupon history"
        }

        return NSLocalizedString("Wallet Coupon history", bundle: bundle, comment: "")
      }

      /// en translation: We need your location to show you on Maps
      ///
      /// Locales: en, es
      static func mapsMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MapsMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MapsMessage"
        }

        return NSLocalizedString("MapsMessage", bundle: bundle, comment: "")
      }

      /// en translation: YES
      ///
      /// Locales: en, es
      static func yeS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YES", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "YES"
        }

        return NSLocalizedString("YES", bundle: bundle, comment: "")
      }

      /// en translation: Yesterday
      ///
      /// Locales: en, es
      static func yesterday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yesterday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Yesterday"
        }

        return NSLocalizedString("Yesterday", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.logInCell` struct is generated, and contains static references to 5 localization keys.
    struct logInCell {
      /// en translation: Forgot password?
      ///
      /// Locales: en, es
      static let hrnKuPONNormalTitle = Rswift.StringResource(key: "HRN-ku-PON.normalTitle", tableName: "LogInCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en, es
      static let i7GdC98NormalTitle = Rswift.StringResource(key: "3I7-gd-c98.normalTitle", tableName: "LogInCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, es
      static let pBpWSWXiPlaceholder = Rswift.StringResource(key: "pBp-wS-WXi.placeholder", tableName: "LogInCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Phone no.
      ///
      /// Locales: en, es
      static let qviZrGMRPlaceholder = Rswift.StringResource(key: "Qvi-zr-GMR.placeholder", tableName: "LogInCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Sign in
      ///
      /// Locales: en, es
      static let dg7E8UEjText = Rswift.StringResource(key: "Dg7-e8-UEj.text", tableName: "LogInCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: Forgot password?
      ///
      /// Locales: en, es
      static func hrnKuPONNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HRN-ku-PON.normalTitle", tableName: "LogInCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LogInCell", preferredLanguages: preferredLanguages) else {
          return "HRN-ku-PON.normalTitle"
        }

        return NSLocalizedString("HRN-ku-PON.normalTitle", tableName: "LogInCell", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en, es
      static func i7GdC98NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3I7-gd-c98.normalTitle", tableName: "LogInCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LogInCell", preferredLanguages: preferredLanguages) else {
          return "3I7-gd-c98.normalTitle"
        }

        return NSLocalizedString("3I7-gd-c98.normalTitle", tableName: "LogInCell", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, es
      static func pBpWSWXiPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pBp-wS-WXi.placeholder", tableName: "LogInCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LogInCell", preferredLanguages: preferredLanguages) else {
          return "pBp-wS-WXi.placeholder"
        }

        return NSLocalizedString("pBp-wS-WXi.placeholder", tableName: "LogInCell", bundle: bundle, comment: "")
      }

      /// en translation: Phone no.
      ///
      /// Locales: en, es
      static func qviZrGMRPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Qvi-zr-GMR.placeholder", tableName: "LogInCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LogInCell", preferredLanguages: preferredLanguages) else {
          return "Qvi-zr-GMR.placeholder"
        }

        return NSLocalizedString("Qvi-zr-GMR.placeholder", tableName: "LogInCell", bundle: bundle, comment: "")
      }

      /// en translation: Sign in
      ///
      /// Locales: en, es
      static func dg7E8UEjText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dg7-e8-UEj.text", tableName: "LogInCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LogInCell", preferredLanguages: preferredLanguages) else {
          return "Dg7-e8-UEj.text"
        }

        return NSLocalizedString("Dg7-e8-UEj.text", tableName: "LogInCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.manageAddCardButtonCell` struct is generated, and contains static references to 1 localization keys.
    struct manageAddCardButtonCell {
      /// en translation: Add Card for payments
      ///
      /// Locales: en, es
      static let d0NAQRAYNormalTitle = Rswift.StringResource(key: "d0N-AQ-RAY.normalTitle", tableName: "ManageAddCardButtonCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: Add Card for payments
      ///
      /// Locales: en, es
      static func d0NAQRAYNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("d0N-AQ-RAY.normalTitle", tableName: "ManageAddCardButtonCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ManageAddCardButtonCell", preferredLanguages: preferredLanguages) else {
          return "d0N-AQ-RAY.normalTitle"
        }

        return NSLocalizedString("d0N-AQ-RAY.normalTitle", tableName: "ManageAddCardButtonCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.manageAddCardCell` struct is generated, and contains static references to 1 localization keys.
    struct manageAddCardCell {
      /// en translation: XXXX - XXXX -XXXX - 4242
      ///
      /// Locales: en, es
      static let vkV0IbBText = Rswift.StringResource(key: "0Vk-V0-ibB.text", tableName: "ManageAddCardCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: XXXX - XXXX -XXXX - 4242
      ///
      /// Locales: en, es
      static func vkV0IbBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0Vk-V0-ibB.text", tableName: "ManageAddCardCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ManageAddCardCell", preferredLanguages: preferredLanguages) else {
          return "0Vk-V0-ibB.text"
        }

        return NSLocalizedString("0Vk-V0-ibB.text", tableName: "ManageAddCardCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.manageCardDataCell` struct is generated, and contains static references to 5 localization keys.
    struct manageCardDataCell {
      /// en translation: ADD CARD
      ///
      /// Locales: en, es
      static let qsyYQFjwNormalTitle = Rswift.StringResource(key: "Qsy-YQ-fjw.normalTitle", tableName: "ManageCardDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CVV
      ///
      /// Locales: en, es
      static let lPtUzAy7Placeholder = Rswift.StringResource(key: "LPt-uz-ay7.placeholder", tableName: "ManageCardDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Card Holder
      ///
      /// Locales: en, es
      static let yViB0Ck3Placeholder = Rswift.StringResource(key: "yVi-b0-Ck3.placeholder", tableName: "ManageCardDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Card Number
      ///
      /// Locales: en, es
      static let p8q9PXVfPlaceholder = Rswift.StringResource(key: "p8q-9P-XVf.placeholder", tableName: "ManageCardDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Expiration Date
      ///
      /// Locales: en, es
      static let co9V83WVPlaceholder = Rswift.StringResource(key: "CO9-v8-3WV.placeholder", tableName: "ManageCardDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: ADD CARD
      ///
      /// Locales: en, es
      static func qsyYQFjwNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Qsy-YQ-fjw.normalTitle", tableName: "ManageCardDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ManageCardDataCell", preferredLanguages: preferredLanguages) else {
          return "Qsy-YQ-fjw.normalTitle"
        }

        return NSLocalizedString("Qsy-YQ-fjw.normalTitle", tableName: "ManageCardDataCell", bundle: bundle, comment: "")
      }

      /// en translation: CVV
      ///
      /// Locales: en, es
      static func lPtUzAy7Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LPt-uz-ay7.placeholder", tableName: "ManageCardDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ManageCardDataCell", preferredLanguages: preferredLanguages) else {
          return "LPt-uz-ay7.placeholder"
        }

        return NSLocalizedString("LPt-uz-ay7.placeholder", tableName: "ManageCardDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Card Holder
      ///
      /// Locales: en, es
      static func yViB0Ck3Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yVi-b0-Ck3.placeholder", tableName: "ManageCardDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ManageCardDataCell", preferredLanguages: preferredLanguages) else {
          return "yVi-b0-Ck3.placeholder"
        }

        return NSLocalizedString("yVi-b0-Ck3.placeholder", tableName: "ManageCardDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Card Number
      ///
      /// Locales: en, es
      static func p8q9PXVfPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("p8q-9P-XVf.placeholder", tableName: "ManageCardDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ManageCardDataCell", preferredLanguages: preferredLanguages) else {
          return "p8q-9P-XVf.placeholder"
        }

        return NSLocalizedString("p8q-9P-XVf.placeholder", tableName: "ManageCardDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Expiration Date
      ///
      /// Locales: en, es
      static func co9V83WVPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CO9-v8-3WV.placeholder", tableName: "ManageCardDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ManageCardDataCell", preferredLanguages: preferredLanguages) else {
          return "CO9-v8-3WV.placeholder"
        }

        return NSLocalizedString("CO9-v8-3WV.placeholder", tableName: "ManageCardDataCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.payOnlineDataCell` struct is generated, and contains static references to 3 localization keys.
    struct payOnlineDataCell {
      /// en translation: PAY
      ///
      /// Locales: en, es
      static let vK9YwD7CNormalTitle = Rswift.StringResource(key: "vK9-yw-d7C.normalTitle", tableName: "PayOnlineDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Pay By Card
      ///
      /// Locales: en, es
      static let g7pYo89kText = Rswift.StringResource(key: "g7p-Yo-89k.text", tableName: "PayOnlineDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Payment Methods
      ///
      /// Locales: en, es
      static let o5c2TAC1Text = Rswift.StringResource(key: "o5c-2T-aC1.text", tableName: "PayOnlineDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: PAY
      ///
      /// Locales: en, es
      static func vK9YwD7CNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vK9-yw-d7C.normalTitle", tableName: "PayOnlineDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "PayOnlineDataCell", preferredLanguages: preferredLanguages) else {
          return "vK9-yw-d7C.normalTitle"
        }

        return NSLocalizedString("vK9-yw-d7C.normalTitle", tableName: "PayOnlineDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Pay By Card
      ///
      /// Locales: en, es
      static func g7pYo89kText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("g7p-Yo-89k.text", tableName: "PayOnlineDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "PayOnlineDataCell", preferredLanguages: preferredLanguages) else {
          return "g7p-Yo-89k.text"
        }

        return NSLocalizedString("g7p-Yo-89k.text", tableName: "PayOnlineDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Payment Methods
      ///
      /// Locales: en, es
      static func o5c2TAC1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("o5c-2T-aC1.text", tableName: "PayOnlineDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "PayOnlineDataCell", preferredLanguages: preferredLanguages) else {
          return "o5c-2T-aC1.text"
        }

        return NSLocalizedString("o5c-2T-aC1.text", tableName: "PayOnlineDataCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.profileMainCell` struct is generated, and contains static references to 11 localization keys.
    struct profileMainCell {
      /// en translation: +2344556677
      ///
      /// Locales: en, es
      static let a1R04Qk1Text = Rswift.StringResource(key: "a1R-04-qk1.text", tableName: "ProfileMainCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Account Info
      ///
      /// Locales: en, es
      static let kFfFC6BrText = Rswift.StringResource(key: "kFf-fC-6Br.text", tableName: "ProfileMainCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, es
      static let tn0FO3UaText = Rswift.StringResource(key: "tn0-FO-3Ua.text", tableName: "ProfileMainCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Faizan Ali
      ///
      /// Locales: en, es
      static let eeVXIOBSText = Rswift.StringResource(key: "EeV-XI-OBS.text", tableName: "ProfileMainCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, es
      static let wskKLYV7Text = Rswift.StringResource(key: "Wsk-KL-yV7.text", tableName: "ProfileMainCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Phone number
      ///
      /// Locales: en, es
      static let gRt4N7dsText = Rswift.StringResource(key: "gRt-4N-7ds.text", tableName: "ProfileMainCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Plot 95, Block A, Rawalpindi Punjab, Pakistan
      ///
      /// Locales: en, es
      static let n0C2LSEText = Rswift.StringResource(key: "5n0-c2-LSE.text", tableName: "ProfileMainCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Shortcuts
      ///
      /// Locales: en, es
      static let gm9ELT3SText = Rswift.StringResource(key: "Gm9-EL-t3S.text", tableName: "ProfileMainCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Statelife cooperate housing society 3456, Block B, Lahore, punjab, Pakistan
      ///
      /// Locales: en, es
      static let tcepsi2BText = Rswift.StringResource(key: "TCE-PS-i2B.text", tableName: "ProfileMainCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Work
      ///
      /// Locales: en, es
      static let xZFA9ZNqText = Rswift.StringResource(key: "xZF-a9-zNq.text", tableName: "ProfileMainCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: test10@gmail.com
      ///
      /// Locales: en, es
      static let q1X13YaWText = Rswift.StringResource(key: "q1X-13-YaW.text", tableName: "ProfileMainCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: +2344556677
      ///
      /// Locales: en, es
      static func a1R04Qk1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a1R-04-qk1.text", tableName: "ProfileMainCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProfileMainCell", preferredLanguages: preferredLanguages) else {
          return "a1R-04-qk1.text"
        }

        return NSLocalizedString("a1R-04-qk1.text", tableName: "ProfileMainCell", bundle: bundle, comment: "")
      }

      /// en translation: Account Info
      ///
      /// Locales: en, es
      static func kFfFC6BrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kFf-fC-6Br.text", tableName: "ProfileMainCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProfileMainCell", preferredLanguages: preferredLanguages) else {
          return "kFf-fC-6Br.text"
        }

        return NSLocalizedString("kFf-fC-6Br.text", tableName: "ProfileMainCell", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, es
      static func tn0FO3UaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tn0-FO-3Ua.text", tableName: "ProfileMainCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProfileMainCell", preferredLanguages: preferredLanguages) else {
          return "tn0-FO-3Ua.text"
        }

        return NSLocalizedString("tn0-FO-3Ua.text", tableName: "ProfileMainCell", bundle: bundle, comment: "")
      }

      /// en translation: Faizan Ali
      ///
      /// Locales: en, es
      static func eeVXIOBSText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EeV-XI-OBS.text", tableName: "ProfileMainCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProfileMainCell", preferredLanguages: preferredLanguages) else {
          return "EeV-XI-OBS.text"
        }

        return NSLocalizedString("EeV-XI-OBS.text", tableName: "ProfileMainCell", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, es
      static func wskKLYV7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wsk-KL-yV7.text", tableName: "ProfileMainCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProfileMainCell", preferredLanguages: preferredLanguages) else {
          return "Wsk-KL-yV7.text"
        }

        return NSLocalizedString("Wsk-KL-yV7.text", tableName: "ProfileMainCell", bundle: bundle, comment: "")
      }

      /// en translation: Phone number
      ///
      /// Locales: en, es
      static func gRt4N7dsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gRt-4N-7ds.text", tableName: "ProfileMainCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProfileMainCell", preferredLanguages: preferredLanguages) else {
          return "gRt-4N-7ds.text"
        }

        return NSLocalizedString("gRt-4N-7ds.text", tableName: "ProfileMainCell", bundle: bundle, comment: "")
      }

      /// en translation: Plot 95, Block A, Rawalpindi Punjab, Pakistan
      ///
      /// Locales: en, es
      static func n0C2LSEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5n0-c2-LSE.text", tableName: "ProfileMainCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProfileMainCell", preferredLanguages: preferredLanguages) else {
          return "5n0-c2-LSE.text"
        }

        return NSLocalizedString("5n0-c2-LSE.text", tableName: "ProfileMainCell", bundle: bundle, comment: "")
      }

      /// en translation: Shortcuts
      ///
      /// Locales: en, es
      static func gm9ELT3SText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gm9-EL-t3S.text", tableName: "ProfileMainCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProfileMainCell", preferredLanguages: preferredLanguages) else {
          return "Gm9-EL-t3S.text"
        }

        return NSLocalizedString("Gm9-EL-t3S.text", tableName: "ProfileMainCell", bundle: bundle, comment: "")
      }

      /// en translation: Statelife cooperate housing society 3456, Block B, Lahore, punjab, Pakistan
      ///
      /// Locales: en, es
      static func tcepsi2BText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TCE-PS-i2B.text", tableName: "ProfileMainCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProfileMainCell", preferredLanguages: preferredLanguages) else {
          return "TCE-PS-i2B.text"
        }

        return NSLocalizedString("TCE-PS-i2B.text", tableName: "ProfileMainCell", bundle: bundle, comment: "")
      }

      /// en translation: Work
      ///
      /// Locales: en, es
      static func xZFA9ZNqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xZF-a9-zNq.text", tableName: "ProfileMainCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProfileMainCell", preferredLanguages: preferredLanguages) else {
          return "xZF-a9-zNq.text"
        }

        return NSLocalizedString("xZF-a9-zNq.text", tableName: "ProfileMainCell", bundle: bundle, comment: "")
      }

      /// en translation: test10@gmail.com
      ///
      /// Locales: en, es
      static func q1X13YaWText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("q1X-13-YaW.text", tableName: "ProfileMainCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProfileMainCell", preferredLanguages: preferredLanguages) else {
          return "q1X-13-YaW.text"
        }

        return NSLocalizedString("q1X-13-YaW.text", tableName: "ProfileMainCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.registerUserDetailCell` struct is generated, and contains static references to 10 localization keys.
    struct registerUserDetailCell {
      /// en translation: Drivers will confirm it's you when they pick you up
      ///
      /// Locales: en, es
      static let vUwIpObNText = Rswift.StringResource(key: "VUw-ip-obN.text", tableName: "RegisterUserDetailCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, es
      static let gcZDGP5Placeholder = Rswift.StringResource(key: "7gc-zD-gP5.placeholder", tableName: "RegisterUserDetailCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Enter your Details
      ///
      /// Locales: en, es
      static let xcPUMO1Text = Rswift.StringResource(key: "1xc-PU-MO1.text", tableName: "RegisterUserDetailCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: en, es
      static let sci0g0RMPlaceholder = Rswift.StringResource(key: "SCI-0g-0RM.placeholder", tableName: "RegisterUserDetailCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: I agree to the 
      ///
      /// Locales: en, es
      static let i2IMxWaFText = Rswift.StringResource(key: "I2I-Mx-waF.text", tableName: "RegisterUserDetailCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Last Name
      ///
      /// Locales: en, es
      static let kbc8mSs1Placeholder = Rswift.StringResource(key: "Kbc-8m-ss1.placeholder", tableName: "RegisterUserDetailCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, es
      static let zLzFXR38Placeholder = Rswift.StringResource(key: "zLz-FX-R38.placeholder", tableName: "RegisterUserDetailCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en, es
      static let cqZPNXhUText = Rswift.StringResource(key: "cqZ-pN-xhU.text", tableName: "RegisterUserDetailCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SIGN UP
      ///
      /// Locales: en, es
      static let oKcP5GdENormalTitle = Rswift.StringResource(key: "oKc-P5-GdE.normalTitle", tableName: "RegisterUserDetailCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: T&Cs and 
      ///
      /// Locales: en, es
      static let eaaTf3OXText = Rswift.StringResource(key: "eaa-tf-3OX.text", tableName: "RegisterUserDetailCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: Drivers will confirm it's you when they pick you up
      ///
      /// Locales: en, es
      static func vUwIpObNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VUw-ip-obN.text", tableName: "RegisterUserDetailCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RegisterUserDetailCell", preferredLanguages: preferredLanguages) else {
          return "VUw-ip-obN.text"
        }

        return NSLocalizedString("VUw-ip-obN.text", tableName: "RegisterUserDetailCell", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, es
      static func gcZDGP5Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7gc-zD-gP5.placeholder", tableName: "RegisterUserDetailCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RegisterUserDetailCell", preferredLanguages: preferredLanguages) else {
          return "7gc-zD-gP5.placeholder"
        }

        return NSLocalizedString("7gc-zD-gP5.placeholder", tableName: "RegisterUserDetailCell", bundle: bundle, comment: "")
      }

      /// en translation: Enter your Details
      ///
      /// Locales: en, es
      static func xcPUMO1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1xc-PU-MO1.text", tableName: "RegisterUserDetailCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RegisterUserDetailCell", preferredLanguages: preferredLanguages) else {
          return "1xc-PU-MO1.text"
        }

        return NSLocalizedString("1xc-PU-MO1.text", tableName: "RegisterUserDetailCell", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: en, es
      static func sci0g0RMPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SCI-0g-0RM.placeholder", tableName: "RegisterUserDetailCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RegisterUserDetailCell", preferredLanguages: preferredLanguages) else {
          return "SCI-0g-0RM.placeholder"
        }

        return NSLocalizedString("SCI-0g-0RM.placeholder", tableName: "RegisterUserDetailCell", bundle: bundle, comment: "")
      }

      /// en translation: I agree to the 
      ///
      /// Locales: en, es
      static func i2IMxWaFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("I2I-Mx-waF.text", tableName: "RegisterUserDetailCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RegisterUserDetailCell", preferredLanguages: preferredLanguages) else {
          return "I2I-Mx-waF.text"
        }

        return NSLocalizedString("I2I-Mx-waF.text", tableName: "RegisterUserDetailCell", bundle: bundle, comment: "")
      }

      /// en translation: Last Name
      ///
      /// Locales: en, es
      static func kbc8mSs1Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kbc-8m-ss1.placeholder", tableName: "RegisterUserDetailCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RegisterUserDetailCell", preferredLanguages: preferredLanguages) else {
          return "Kbc-8m-ss1.placeholder"
        }

        return NSLocalizedString("Kbc-8m-ss1.placeholder", tableName: "RegisterUserDetailCell", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, es
      static func zLzFXR38Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zLz-FX-R38.placeholder", tableName: "RegisterUserDetailCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RegisterUserDetailCell", preferredLanguages: preferredLanguages) else {
          return "zLz-FX-R38.placeholder"
        }

        return NSLocalizedString("zLz-FX-R38.placeholder", tableName: "RegisterUserDetailCell", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en, es
      static func cqZPNXhUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cqZ-pN-xhU.text", tableName: "RegisterUserDetailCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RegisterUserDetailCell", preferredLanguages: preferredLanguages) else {
          return "cqZ-pN-xhU.text"
        }

        return NSLocalizedString("cqZ-pN-xhU.text", tableName: "RegisterUserDetailCell", bundle: bundle, comment: "")
      }

      /// en translation: SIGN UP
      ///
      /// Locales: en, es
      static func oKcP5GdENormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oKc-P5-GdE.normalTitle", tableName: "RegisterUserDetailCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RegisterUserDetailCell", preferredLanguages: preferredLanguages) else {
          return "oKc-P5-GdE.normalTitle"
        }

        return NSLocalizedString("oKc-P5-GdE.normalTitle", tableName: "RegisterUserDetailCell", bundle: bundle, comment: "")
      }

      /// en translation: T&Cs and 
      ///
      /// Locales: en, es
      static func eaaTf3OXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eaa-tf-3OX.text", tableName: "RegisterUserDetailCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RegisterUserDetailCell", preferredLanguages: preferredLanguages) else {
          return "eaa-tf-3OX.text"
        }

        return NSLocalizedString("eaa-tf-3OX.text", tableName: "RegisterUserDetailCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.registerVerifyPhoneCell` struct is generated, and contains static references to 4 localization keys.
    struct registerVerifyPhoneCell {
      /// en translation: Phone no.
      ///
      /// Locales: en, es
      static let pjnJPByWPlaceholder = Rswift.StringResource(key: "pjn-JP-byW.placeholder", tableName: "RegisterVerifyPhoneCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: VERIFY
      ///
      /// Locales: en, es
      static let uHNKU55bNormalTitle = Rswift.StringResource(key: "uHN-kU-55b.normalTitle", tableName: "RegisterVerifyPhoneCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: We'll text a code to verify your phone
      ///
      /// Locales: en, es
      static let bzdTMQwMText = Rswift.StringResource(key: "bzd-TM-QwM.text", tableName: "RegisterVerifyPhoneCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: What's your Mobile number
      ///
      /// Locales: en, es
      static let mNoLEZTYText = Rswift.StringResource(key: "mNo-LE-zTY.text", tableName: "RegisterVerifyPhoneCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: Phone no.
      ///
      /// Locales: en, es
      static func pjnJPByWPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pjn-JP-byW.placeholder", tableName: "RegisterVerifyPhoneCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RegisterVerifyPhoneCell", preferredLanguages: preferredLanguages) else {
          return "pjn-JP-byW.placeholder"
        }

        return NSLocalizedString("pjn-JP-byW.placeholder", tableName: "RegisterVerifyPhoneCell", bundle: bundle, comment: "")
      }

      /// en translation: VERIFY
      ///
      /// Locales: en, es
      static func uHNKU55bNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uHN-kU-55b.normalTitle", tableName: "RegisterVerifyPhoneCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RegisterVerifyPhoneCell", preferredLanguages: preferredLanguages) else {
          return "uHN-kU-55b.normalTitle"
        }

        return NSLocalizedString("uHN-kU-55b.normalTitle", tableName: "RegisterVerifyPhoneCell", bundle: bundle, comment: "")
      }

      /// en translation: We'll text a code to verify your phone
      ///
      /// Locales: en, es
      static func bzdTMQwMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bzd-TM-QwM.text", tableName: "RegisterVerifyPhoneCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RegisterVerifyPhoneCell", preferredLanguages: preferredLanguages) else {
          return "bzd-TM-QwM.text"
        }

        return NSLocalizedString("bzd-TM-QwM.text", tableName: "RegisterVerifyPhoneCell", bundle: bundle, comment: "")
      }

      /// en translation: What's your Mobile number
      ///
      /// Locales: en, es
      static func mNoLEZTYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mNo-LE-zTY.text", tableName: "RegisterVerifyPhoneCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RegisterVerifyPhoneCell", preferredLanguages: preferredLanguages) else {
          return "mNo-LE-zTY.text"
        }

        return NSLocalizedString("mNo-LE-zTY.text", tableName: "RegisterVerifyPhoneCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.rideDetailDataCell` struct is generated, and contains static references to 15 localization keys.
    struct rideDetailDataCell {
      /// en translation: 05:25 pm
      ///
      /// Locales: en, es
      static let ijRGFM7FText = Rswift.StringResource(key: "IjR-gF-m7F.text", tableName: "RideDetailDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 1003, state st# 56-A life, Rawalpindi House # 23-H, punjab, Pakistan
      ///
      /// Locales: en, es
      static let wpaJE3SuText = Rswift.StringResource(key: "wpa-JE-3Su.text", tableName: "RideDetailDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 1003, state st# 56-A life, lahore, punjab, Pakistan
      ///
      /// Locales: en, es
      static let gEPDHOTText = Rswift.StringResource(key: "3gE-pD-HOT.text", tableName: "RideDetailDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 25th Dec 2021
      ///
      /// Locales: en, es
      static let bAmSIDskText = Rswift.StringResource(key: "BAm-SI-dsk.text", tableName: "RideDetailDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Booking ID
      ///
      /// Locales: en, es
      static let r6LPiUDeText = Rswift.StringResource(key: "R6L-Pi-UDe.text", tableName: "RideDetailDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CASH
      ///
      /// Locales: en, es
      static let fbAWZ0LText = Rswift.StringResource(key: "2fb-AW-Z0L.text", tableName: "RideDetailDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Comments
      ///
      /// Locales: en, es
      static let dv90aYy9Text = Rswift.StringResource(key: "Dv9-0a-Yy9.text", tableName: "RideDetailDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Driver's Details
      ///
      /// Locales: en, es
      static let cuI6uG4sText = Rswift.StringResource(key: "cuI-6u-G4s.text", tableName: "RideDetailDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Drop
      ///
      /// Locales: en, es
      static let mhg2VSbuText = Rswift.StringResource(key: "mhg-2V-sbu.text", tableName: "RideDetailDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: He was a good driver
      ///
      /// Locales: en, es
      static let qH864VWCText = Rswift.StringResource(key: "qH8-64-vWC.text", tableName: "RideDetailDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: KWDF44556
      ///
      /// Locales: en, es
      static let z8NeBKMText = Rswift.StringResource(key: "9z8-Ne-bKM.text", tableName: "RideDetailDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Payment Mode
      ///
      /// Locales: en, es
      static let htgGq6usText = Rswift.StringResource(key: "htg-gq-6us.text", tableName: "RideDetailDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Pickup
      ///
      /// Locales: en, es
      static let tG6r9xeText = Rswift.StringResource(key: "7tG-6r-9xe.text", tableName: "RideDetailDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Ride Details
      ///
      /// Locales: en, es
      static let ggMPsDFoText = Rswift.StringResource(key: "ggM-Ps-dFo.text", tableName: "RideDetailDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: The Driver
      ///
      /// Locales: en, es
      static let tg0SaBD5Text = Rswift.StringResource(key: "TG0-Sa-bD5.text", tableName: "RideDetailDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: 05:25 pm
      ///
      /// Locales: en, es
      static func ijRGFM7FText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IjR-gF-m7F.text", tableName: "RideDetailDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideDetailDataCell", preferredLanguages: preferredLanguages) else {
          return "IjR-gF-m7F.text"
        }

        return NSLocalizedString("IjR-gF-m7F.text", tableName: "RideDetailDataCell", bundle: bundle, comment: "")
      }

      /// en translation: 1003, state st# 56-A life, Rawalpindi House # 23-H, punjab, Pakistan
      ///
      /// Locales: en, es
      static func wpaJE3SuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wpa-JE-3Su.text", tableName: "RideDetailDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideDetailDataCell", preferredLanguages: preferredLanguages) else {
          return "wpa-JE-3Su.text"
        }

        return NSLocalizedString("wpa-JE-3Su.text", tableName: "RideDetailDataCell", bundle: bundle, comment: "")
      }

      /// en translation: 1003, state st# 56-A life, lahore, punjab, Pakistan
      ///
      /// Locales: en, es
      static func gEPDHOTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3gE-pD-HOT.text", tableName: "RideDetailDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideDetailDataCell", preferredLanguages: preferredLanguages) else {
          return "3gE-pD-HOT.text"
        }

        return NSLocalizedString("3gE-pD-HOT.text", tableName: "RideDetailDataCell", bundle: bundle, comment: "")
      }

      /// en translation: 25th Dec 2021
      ///
      /// Locales: en, es
      static func bAmSIDskText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BAm-SI-dsk.text", tableName: "RideDetailDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideDetailDataCell", preferredLanguages: preferredLanguages) else {
          return "BAm-SI-dsk.text"
        }

        return NSLocalizedString("BAm-SI-dsk.text", tableName: "RideDetailDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Booking ID
      ///
      /// Locales: en, es
      static func r6LPiUDeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("R6L-Pi-UDe.text", tableName: "RideDetailDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideDetailDataCell", preferredLanguages: preferredLanguages) else {
          return "R6L-Pi-UDe.text"
        }

        return NSLocalizedString("R6L-Pi-UDe.text", tableName: "RideDetailDataCell", bundle: bundle, comment: "")
      }

      /// en translation: CASH
      ///
      /// Locales: en, es
      static func fbAWZ0LText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2fb-AW-Z0L.text", tableName: "RideDetailDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideDetailDataCell", preferredLanguages: preferredLanguages) else {
          return "2fb-AW-Z0L.text"
        }

        return NSLocalizedString("2fb-AW-Z0L.text", tableName: "RideDetailDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Comments
      ///
      /// Locales: en, es
      static func dv90aYy9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dv9-0a-Yy9.text", tableName: "RideDetailDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideDetailDataCell", preferredLanguages: preferredLanguages) else {
          return "Dv9-0a-Yy9.text"
        }

        return NSLocalizedString("Dv9-0a-Yy9.text", tableName: "RideDetailDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Driver's Details
      ///
      /// Locales: en, es
      static func cuI6uG4sText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cuI-6u-G4s.text", tableName: "RideDetailDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideDetailDataCell", preferredLanguages: preferredLanguages) else {
          return "cuI-6u-G4s.text"
        }

        return NSLocalizedString("cuI-6u-G4s.text", tableName: "RideDetailDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Drop
      ///
      /// Locales: en, es
      static func mhg2VSbuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mhg-2V-sbu.text", tableName: "RideDetailDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideDetailDataCell", preferredLanguages: preferredLanguages) else {
          return "mhg-2V-sbu.text"
        }

        return NSLocalizedString("mhg-2V-sbu.text", tableName: "RideDetailDataCell", bundle: bundle, comment: "")
      }

      /// en translation: He was a good driver
      ///
      /// Locales: en, es
      static func qH864VWCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qH8-64-vWC.text", tableName: "RideDetailDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideDetailDataCell", preferredLanguages: preferredLanguages) else {
          return "qH8-64-vWC.text"
        }

        return NSLocalizedString("qH8-64-vWC.text", tableName: "RideDetailDataCell", bundle: bundle, comment: "")
      }

      /// en translation: KWDF44556
      ///
      /// Locales: en, es
      static func z8NeBKMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9z8-Ne-bKM.text", tableName: "RideDetailDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideDetailDataCell", preferredLanguages: preferredLanguages) else {
          return "9z8-Ne-bKM.text"
        }

        return NSLocalizedString("9z8-Ne-bKM.text", tableName: "RideDetailDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Payment Mode
      ///
      /// Locales: en, es
      static func htgGq6usText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("htg-gq-6us.text", tableName: "RideDetailDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideDetailDataCell", preferredLanguages: preferredLanguages) else {
          return "htg-gq-6us.text"
        }

        return NSLocalizedString("htg-gq-6us.text", tableName: "RideDetailDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Pickup
      ///
      /// Locales: en, es
      static func tG6r9xeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7tG-6r-9xe.text", tableName: "RideDetailDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideDetailDataCell", preferredLanguages: preferredLanguages) else {
          return "7tG-6r-9xe.text"
        }

        return NSLocalizedString("7tG-6r-9xe.text", tableName: "RideDetailDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Ride Details
      ///
      /// Locales: en, es
      static func ggMPsDFoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ggM-Ps-dFo.text", tableName: "RideDetailDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideDetailDataCell", preferredLanguages: preferredLanguages) else {
          return "ggM-Ps-dFo.text"
        }

        return NSLocalizedString("ggM-Ps-dFo.text", tableName: "RideDetailDataCell", bundle: bundle, comment: "")
      }

      /// en translation: The Driver
      ///
      /// Locales: en, es
      static func tg0SaBD5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TG0-Sa-bD5.text", tableName: "RideDetailDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideDetailDataCell", preferredLanguages: preferredLanguages) else {
          return "TG0-Sa-bD5.text"
        }

        return NSLocalizedString("TG0-Sa-bD5.text", tableName: "RideDetailDataCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.rideHistoryDataCell` struct is generated, and contains static references to 9 localization keys.
    struct rideHistoryDataCell {
      /// en translation: 05:24 pm
      ///
      /// Locales: en, es
      static let sG65yADbText = Rswift.StringResource(key: "sG6-5y-ADb.text", tableName: "RideHistoryDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 1003, state st# 56-A life, Rawalpindi House # 23-H, punjab, Pakistan
      ///
      /// Locales: en, es
      static let yn2XwEV6Text = Rswift.StringResource(key: "Yn2-xw-eV6.text", tableName: "RideHistoryDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 1003, state st# 56-A life, lahore, punjab, Pakistan
      ///
      /// Locales: en, es
      static let bZeAdHisText = Rswift.StringResource(key: "BZe-ad-His.text", tableName: "RideHistoryDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 25th Dec 2021
      ///
      /// Locales: en, es
      static let oY0CkYKJText = Rswift.StringResource(key: "oY0-ck-YKJ.text", tableName: "RideHistoryDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Booking ID: KWC7484
      ///
      /// Locales: en, es
      static let f3UHX6scText = Rswift.StringResource(key: "f3U-hX-6sc.text", tableName: "RideHistoryDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Drop
      ///
      /// Locales: en, es
      static let n8QCeEyBText = Rswift.StringResource(key: "N8Q-Ce-eyB.text", tableName: "RideHistoryDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Pickup
      ///
      /// Locales: en, es
      static let jA1A3BEcText = Rswift.StringResource(key: "jA1-A3-bEc.text", tableName: "RideHistoryDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Taxi
      ///
      /// Locales: en, es
      static let uyeD7STQText = Rswift.StringResource(key: "uye-d7-sTQ.text", tableName: "RideHistoryDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ZK45.0
      ///
      /// Locales: en, es
      static let tI1Nf5wCText = Rswift.StringResource(key: "tI1-nf-5wC.text", tableName: "RideHistoryDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: 05:24 pm
      ///
      /// Locales: en, es
      static func sG65yADbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sG6-5y-ADb.text", tableName: "RideHistoryDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideHistoryDataCell", preferredLanguages: preferredLanguages) else {
          return "sG6-5y-ADb.text"
        }

        return NSLocalizedString("sG6-5y-ADb.text", tableName: "RideHistoryDataCell", bundle: bundle, comment: "")
      }

      /// en translation: 1003, state st# 56-A life, Rawalpindi House # 23-H, punjab, Pakistan
      ///
      /// Locales: en, es
      static func yn2XwEV6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yn2-xw-eV6.text", tableName: "RideHistoryDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideHistoryDataCell", preferredLanguages: preferredLanguages) else {
          return "Yn2-xw-eV6.text"
        }

        return NSLocalizedString("Yn2-xw-eV6.text", tableName: "RideHistoryDataCell", bundle: bundle, comment: "")
      }

      /// en translation: 1003, state st# 56-A life, lahore, punjab, Pakistan
      ///
      /// Locales: en, es
      static func bZeAdHisText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BZe-ad-His.text", tableName: "RideHistoryDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideHistoryDataCell", preferredLanguages: preferredLanguages) else {
          return "BZe-ad-His.text"
        }

        return NSLocalizedString("BZe-ad-His.text", tableName: "RideHistoryDataCell", bundle: bundle, comment: "")
      }

      /// en translation: 25th Dec 2021
      ///
      /// Locales: en, es
      static func oY0CkYKJText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oY0-ck-YKJ.text", tableName: "RideHistoryDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideHistoryDataCell", preferredLanguages: preferredLanguages) else {
          return "oY0-ck-YKJ.text"
        }

        return NSLocalizedString("oY0-ck-YKJ.text", tableName: "RideHistoryDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Booking ID: KWC7484
      ///
      /// Locales: en, es
      static func f3UHX6scText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("f3U-hX-6sc.text", tableName: "RideHistoryDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideHistoryDataCell", preferredLanguages: preferredLanguages) else {
          return "f3U-hX-6sc.text"
        }

        return NSLocalizedString("f3U-hX-6sc.text", tableName: "RideHistoryDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Drop
      ///
      /// Locales: en, es
      static func n8QCeEyBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("N8Q-Ce-eyB.text", tableName: "RideHistoryDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideHistoryDataCell", preferredLanguages: preferredLanguages) else {
          return "N8Q-Ce-eyB.text"
        }

        return NSLocalizedString("N8Q-Ce-eyB.text", tableName: "RideHistoryDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Pickup
      ///
      /// Locales: en, es
      static func jA1A3BEcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jA1-A3-bEc.text", tableName: "RideHistoryDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideHistoryDataCell", preferredLanguages: preferredLanguages) else {
          return "jA1-A3-bEc.text"
        }

        return NSLocalizedString("jA1-A3-bEc.text", tableName: "RideHistoryDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Taxi
      ///
      /// Locales: en, es
      static func uyeD7STQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uye-d7-sTQ.text", tableName: "RideHistoryDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideHistoryDataCell", preferredLanguages: preferredLanguages) else {
          return "uye-d7-sTQ.text"
        }

        return NSLocalizedString("uye-d7-sTQ.text", tableName: "RideHistoryDataCell", bundle: bundle, comment: "")
      }

      /// en translation: ZK45.0
      ///
      /// Locales: en, es
      static func tI1Nf5wCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tI1-nf-5wC.text", tableName: "RideHistoryDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideHistoryDataCell", preferredLanguages: preferredLanguages) else {
          return "tI1-nf-5wC.text"
        }

        return NSLocalizedString("tI1-nf-5wC.text", tableName: "RideHistoryDataCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.rideReceiptDataCell` struct is generated, and contains static references to 16 localization keys.
    struct rideReceiptDataCell {
      /// en translation: 0 mins
      ///
      /// Locales: en, es
      static let rLQXdHwOText = Rswift.StringResource(key: "rLQ-xd-hwO.text", tableName: "RideReceiptDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 4 KM
      ///
      /// Locales: en, es
      static let wqwc1CWaText = Rswift.StringResource(key: "WQW-C1-cWa.text", tableName: "RideReceiptDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Base Price
      ///
      /// Locales: en, es
      static let ki2BV0hText = Rswift.StringResource(key: "3ki-2B-V0h.text", tableName: "RideReceiptDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: BookingID
      ///
      /// Locales: en, es
      static let lmNU6CigText = Rswift.StringResource(key: "lmN-u6-cig.text", tableName: "RideReceiptDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CLOSE
      ///
      /// Locales: en, es
      static let tbn813hQNormalTitle = Rswift.StringResource(key: "Tbn-81-3hQ.normalTitle", tableName: "RideReceiptDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Distance Price
      ///
      /// Locales: en, es
      static let ffaIoJqlText = Rswift.StringResource(key: "ffa-io-jql.text", tableName: "RideReceiptDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Distance Travelled
      ///
      /// Locales: en, es
      static let u6RINnText = Rswift.StringResource(key: "15U-6R-iNn.text", tableName: "RideReceiptDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: KBHR334466
      ///
      /// Locales: en, es
      static let udJHDNivText = Rswift.StringResource(key: "UdJ-hD-Niv.text", tableName: "RideReceiptDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Receipts
      ///
      /// Locales: en, es
      static let sjIOOaAText = Rswift.StringResource(key: "7sj-iO-OaA.text", tableName: "RideReceiptDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Tax Charges
      ///
      /// Locales: en, es
      static let bsH088D2Text = Rswift.StringResource(key: "BsH-08-8D2.text", tableName: "RideReceiptDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Time Taken
      ///
      /// Locales: en, es
      static let weIArTMIText = Rswift.StringResource(key: "weI-Ar-tMI.text", tableName: "RideReceiptDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Total
      ///
      /// Locales: en, es
      static let dDrZ1MuWText = Rswift.StringResource(key: "dDr-Z1-MuW.text", tableName: "RideReceiptDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ZK0
      ///
      /// Locales: en, es
      static let tWCJQhmText = Rswift.StringResource(key: "9tW-cJ-Qhm.text", tableName: "RideReceiptDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ZK45
      ///
      /// Locales: en, es
      static let huMCCeEText = Rswift.StringResource(key: "7hu-mC-CeE.text", tableName: "RideReceiptDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ZK45
      ///
      /// Locales: en, es
      static let pFp4YPXLText = Rswift.StringResource(key: "pFp-4Y-PXL.text", tableName: "RideReceiptDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ZK45
      ///
      /// Locales: en, es
      static let xj62dZVyText = Rswift.StringResource(key: "xj6-2d-zVy.text", tableName: "RideReceiptDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: 0 mins
      ///
      /// Locales: en, es
      static func rLQXdHwOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rLQ-xd-hwO.text", tableName: "RideReceiptDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideReceiptDataCell", preferredLanguages: preferredLanguages) else {
          return "rLQ-xd-hwO.text"
        }

        return NSLocalizedString("rLQ-xd-hwO.text", tableName: "RideReceiptDataCell", bundle: bundle, comment: "")
      }

      /// en translation: 4 KM
      ///
      /// Locales: en, es
      static func wqwc1CWaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WQW-C1-cWa.text", tableName: "RideReceiptDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideReceiptDataCell", preferredLanguages: preferredLanguages) else {
          return "WQW-C1-cWa.text"
        }

        return NSLocalizedString("WQW-C1-cWa.text", tableName: "RideReceiptDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Base Price
      ///
      /// Locales: en, es
      static func ki2BV0hText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3ki-2B-V0h.text", tableName: "RideReceiptDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideReceiptDataCell", preferredLanguages: preferredLanguages) else {
          return "3ki-2B-V0h.text"
        }

        return NSLocalizedString("3ki-2B-V0h.text", tableName: "RideReceiptDataCell", bundle: bundle, comment: "")
      }

      /// en translation: BookingID
      ///
      /// Locales: en, es
      static func lmNU6CigText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lmN-u6-cig.text", tableName: "RideReceiptDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideReceiptDataCell", preferredLanguages: preferredLanguages) else {
          return "lmN-u6-cig.text"
        }

        return NSLocalizedString("lmN-u6-cig.text", tableName: "RideReceiptDataCell", bundle: bundle, comment: "")
      }

      /// en translation: CLOSE
      ///
      /// Locales: en, es
      static func tbn813hQNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tbn-81-3hQ.normalTitle", tableName: "RideReceiptDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideReceiptDataCell", preferredLanguages: preferredLanguages) else {
          return "Tbn-81-3hQ.normalTitle"
        }

        return NSLocalizedString("Tbn-81-3hQ.normalTitle", tableName: "RideReceiptDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Distance Price
      ///
      /// Locales: en, es
      static func ffaIoJqlText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ffa-io-jql.text", tableName: "RideReceiptDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideReceiptDataCell", preferredLanguages: preferredLanguages) else {
          return "ffa-io-jql.text"
        }

        return NSLocalizedString("ffa-io-jql.text", tableName: "RideReceiptDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Distance Travelled
      ///
      /// Locales: en, es
      static func u6RINnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("15U-6R-iNn.text", tableName: "RideReceiptDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideReceiptDataCell", preferredLanguages: preferredLanguages) else {
          return "15U-6R-iNn.text"
        }

        return NSLocalizedString("15U-6R-iNn.text", tableName: "RideReceiptDataCell", bundle: bundle, comment: "")
      }

      /// en translation: KBHR334466
      ///
      /// Locales: en, es
      static func udJHDNivText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UdJ-hD-Niv.text", tableName: "RideReceiptDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideReceiptDataCell", preferredLanguages: preferredLanguages) else {
          return "UdJ-hD-Niv.text"
        }

        return NSLocalizedString("UdJ-hD-Niv.text", tableName: "RideReceiptDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Receipts
      ///
      /// Locales: en, es
      static func sjIOOaAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7sj-iO-OaA.text", tableName: "RideReceiptDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideReceiptDataCell", preferredLanguages: preferredLanguages) else {
          return "7sj-iO-OaA.text"
        }

        return NSLocalizedString("7sj-iO-OaA.text", tableName: "RideReceiptDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Tax Charges
      ///
      /// Locales: en, es
      static func bsH088D2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BsH-08-8D2.text", tableName: "RideReceiptDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideReceiptDataCell", preferredLanguages: preferredLanguages) else {
          return "BsH-08-8D2.text"
        }

        return NSLocalizedString("BsH-08-8D2.text", tableName: "RideReceiptDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Time Taken
      ///
      /// Locales: en, es
      static func weIArTMIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("weI-Ar-tMI.text", tableName: "RideReceiptDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideReceiptDataCell", preferredLanguages: preferredLanguages) else {
          return "weI-Ar-tMI.text"
        }

        return NSLocalizedString("weI-Ar-tMI.text", tableName: "RideReceiptDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Total
      ///
      /// Locales: en, es
      static func dDrZ1MuWText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dDr-Z1-MuW.text", tableName: "RideReceiptDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideReceiptDataCell", preferredLanguages: preferredLanguages) else {
          return "dDr-Z1-MuW.text"
        }

        return NSLocalizedString("dDr-Z1-MuW.text", tableName: "RideReceiptDataCell", bundle: bundle, comment: "")
      }

      /// en translation: ZK0
      ///
      /// Locales: en, es
      static func tWCJQhmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9tW-cJ-Qhm.text", tableName: "RideReceiptDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideReceiptDataCell", preferredLanguages: preferredLanguages) else {
          return "9tW-cJ-Qhm.text"
        }

        return NSLocalizedString("9tW-cJ-Qhm.text", tableName: "RideReceiptDataCell", bundle: bundle, comment: "")
      }

      /// en translation: ZK45
      ///
      /// Locales: en, es
      static func huMCCeEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7hu-mC-CeE.text", tableName: "RideReceiptDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideReceiptDataCell", preferredLanguages: preferredLanguages) else {
          return "7hu-mC-CeE.text"
        }

        return NSLocalizedString("7hu-mC-CeE.text", tableName: "RideReceiptDataCell", bundle: bundle, comment: "")
      }

      /// en translation: ZK45
      ///
      /// Locales: en, es
      static func pFp4YPXLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pFp-4Y-PXL.text", tableName: "RideReceiptDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideReceiptDataCell", preferredLanguages: preferredLanguages) else {
          return "pFp-4Y-PXL.text"
        }

        return NSLocalizedString("pFp-4Y-PXL.text", tableName: "RideReceiptDataCell", bundle: bundle, comment: "")
      }

      /// en translation: ZK45
      ///
      /// Locales: en, es
      static func xj62dZVyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xj6-2d-zVy.text", tableName: "RideReceiptDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RideReceiptDataCell", preferredLanguages: preferredLanguages) else {
          return "xj6-2d-zVy.text"
        }

        return NSLocalizedString("xj6-2d-zVy.text", tableName: "RideReceiptDataCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.scheduledRidesDataCell` struct is generated, and contains static references to 10 localization keys.
    struct scheduledRidesDataCell {
      /// en translation: 05:24 pm
      ///
      /// Locales: en, es
      static let xFBInQv2Text = Rswift.StringResource(key: "xFB-in-qv2.text", tableName: "ScheduledRidesDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 1003, state st# 56-A life, Rawalpindi House # 23-H, punjab, Pakistan
      ///
      /// Locales: en, es
      static let cOaMgSgDText = Rswift.StringResource(key: "cOa-Mg-sgD.text", tableName: "ScheduledRidesDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 1003, state st# 56-A life, lahore, punjab, Pakistan
      ///
      /// Locales: en, es
      static let yMm6aT1IText = Rswift.StringResource(key: "yMm-6a-t1I.text", tableName: "ScheduledRidesDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 25th Dec 2021
      ///
      /// Locales: en, es
      static let t7cGgEgWText = Rswift.StringResource(key: "t7c-gg-egW.text", tableName: "ScheduledRidesDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Booking ID: KWC7484
      ///
      /// Locales: en, es
      static let ubKI8SucText = Rswift.StringResource(key: "UbK-i8-Suc.text", tableName: "ScheduledRidesDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cancel ride
      ///
      /// Locales: en, es
      static let wyCDfPRyText = Rswift.StringResource(key: "wyC-Df-pRy.text", tableName: "ScheduledRidesDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Drop
      ///
      /// Locales: en, es
      static let rpGYGR4AText = Rswift.StringResource(key: "rpG-yG-R4A.text", tableName: "ScheduledRidesDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Pickup
      ///
      /// Locales: en, es
      static let apt6vL0nText = Rswift.StringResource(key: "APT-6v-L0n.text", tableName: "ScheduledRidesDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Taxi
      ///
      /// Locales: en, es
      static let miDAJ4OKText = Rswift.StringResource(key: "miD-aJ-4OK.text", tableName: "ScheduledRidesDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ZK45.0
      ///
      /// Locales: en, es
      static let v6nOe6tTText = Rswift.StringResource(key: "V6n-Oe-6tT.text", tableName: "ScheduledRidesDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: 05:24 pm
      ///
      /// Locales: en, es
      static func xFBInQv2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xFB-in-qv2.text", tableName: "ScheduledRidesDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ScheduledRidesDataCell", preferredLanguages: preferredLanguages) else {
          return "xFB-in-qv2.text"
        }

        return NSLocalizedString("xFB-in-qv2.text", tableName: "ScheduledRidesDataCell", bundle: bundle, comment: "")
      }

      /// en translation: 1003, state st# 56-A life, Rawalpindi House # 23-H, punjab, Pakistan
      ///
      /// Locales: en, es
      static func cOaMgSgDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cOa-Mg-sgD.text", tableName: "ScheduledRidesDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ScheduledRidesDataCell", preferredLanguages: preferredLanguages) else {
          return "cOa-Mg-sgD.text"
        }

        return NSLocalizedString("cOa-Mg-sgD.text", tableName: "ScheduledRidesDataCell", bundle: bundle, comment: "")
      }

      /// en translation: 1003, state st# 56-A life, lahore, punjab, Pakistan
      ///
      /// Locales: en, es
      static func yMm6aT1IText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yMm-6a-t1I.text", tableName: "ScheduledRidesDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ScheduledRidesDataCell", preferredLanguages: preferredLanguages) else {
          return "yMm-6a-t1I.text"
        }

        return NSLocalizedString("yMm-6a-t1I.text", tableName: "ScheduledRidesDataCell", bundle: bundle, comment: "")
      }

      /// en translation: 25th Dec 2021
      ///
      /// Locales: en, es
      static func t7cGgEgWText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("t7c-gg-egW.text", tableName: "ScheduledRidesDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ScheduledRidesDataCell", preferredLanguages: preferredLanguages) else {
          return "t7c-gg-egW.text"
        }

        return NSLocalizedString("t7c-gg-egW.text", tableName: "ScheduledRidesDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Booking ID: KWC7484
      ///
      /// Locales: en, es
      static func ubKI8SucText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UbK-i8-Suc.text", tableName: "ScheduledRidesDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ScheduledRidesDataCell", preferredLanguages: preferredLanguages) else {
          return "UbK-i8-Suc.text"
        }

        return NSLocalizedString("UbK-i8-Suc.text", tableName: "ScheduledRidesDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Cancel ride
      ///
      /// Locales: en, es
      static func wyCDfPRyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wyC-Df-pRy.text", tableName: "ScheduledRidesDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ScheduledRidesDataCell", preferredLanguages: preferredLanguages) else {
          return "wyC-Df-pRy.text"
        }

        return NSLocalizedString("wyC-Df-pRy.text", tableName: "ScheduledRidesDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Drop
      ///
      /// Locales: en, es
      static func rpGYGR4AText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rpG-yG-R4A.text", tableName: "ScheduledRidesDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ScheduledRidesDataCell", preferredLanguages: preferredLanguages) else {
          return "rpG-yG-R4A.text"
        }

        return NSLocalizedString("rpG-yG-R4A.text", tableName: "ScheduledRidesDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Pickup
      ///
      /// Locales: en, es
      static func apt6vL0nText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("APT-6v-L0n.text", tableName: "ScheduledRidesDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ScheduledRidesDataCell", preferredLanguages: preferredLanguages) else {
          return "APT-6v-L0n.text"
        }

        return NSLocalizedString("APT-6v-L0n.text", tableName: "ScheduledRidesDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Taxi
      ///
      /// Locales: en, es
      static func miDAJ4OKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("miD-aJ-4OK.text", tableName: "ScheduledRidesDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ScheduledRidesDataCell", preferredLanguages: preferredLanguages) else {
          return "miD-aJ-4OK.text"
        }

        return NSLocalizedString("miD-aJ-4OK.text", tableName: "ScheduledRidesDataCell", bundle: bundle, comment: "")
      }

      /// en translation: ZK45.0
      ///
      /// Locales: en, es
      static func v6nOe6tTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("V6n-Oe-6tT.text", tableName: "ScheduledRidesDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ScheduledRidesDataCell", preferredLanguages: preferredLanguages) else {
          return "V6n-Oe-6tT.text"
        }

        return NSLocalizedString("V6n-Oe-6tT.text", tableName: "ScheduledRidesDataCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.settingsCell` struct is generated, and contains static references to 13 localization keys.
    struct settingsCell {
      /// en translation: Favorites
      ///
      /// Locales: en, es
      static let c3ASb3LEText = Rswift.StringResource(key: "c3A-sb-3LE.text", tableName: "SettingsCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, es
      static let a9gGzK1OText = Rswift.StringResource(key: "a9g-gz-K1O.text", tableName: "SettingsCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: en, es
      static let mIy5OVybText = Rswift.StringResource(key: "mIy-5O-vyb.text", tableName: "SettingsCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Other
      ///
      /// Locales: en, es
      static let mc1LJOQ7Text = Rswift.StringResource(key: "MC1-lJ-OQ7.text", tableName: "SettingsCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Plot 95, Block A, Rawalpindi Punjab, Pakistan
      ///
      /// Locales: en
      static let r2mSfUText = Rswift.StringResource(key: "97R-2m-sfU.text", tableName: "SettingsCell", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en, es
      static let zZSVdCt2Text = Rswift.StringResource(key: "zZS-vd-ct2.text", tableName: "SettingsCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SOS Details
      ///
      /// Locales: en, es
      static let qiqYcZK0Text = Rswift.StringResource(key: "Qiq-Yc-zK0.text", tableName: "SettingsCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SOS Number
      ///
      /// Locales: en, es
      static let iLGV0OdMText = Rswift.StringResource(key: "iLG-V0-odM.text", tableName: "SettingsCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SOS Number Not Available
      ///
      /// Locales: en, es
      static let iptEOH1KText = Rswift.StringResource(key: "ipt-EO-h1K.text", tableName: "SettingsCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Share
      ///
      /// Locales: en, es
      static let mbTOMQb7Text = Rswift.StringResource(key: "mbT-oM-Qb7.text", tableName: "SettingsCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Statelife cooperate housing society 3456, Block B, Lahore, punjab, Pakistan
      ///
      /// Locales: en
      static let bZkAiWriText = Rswift.StringResource(key: "BZk-Ai-Wri.text", tableName: "SettingsCell", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Terms & Conditions
      ///
      /// Locales: en, es
      static let jmrWDCaiText = Rswift.StringResource(key: "Jmr-wD-cai.text", tableName: "SettingsCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Work
      ///
      /// Locales: en, es
      static let d6EL2AxText = Rswift.StringResource(key: "9d6-eL-2Ax.text", tableName: "SettingsCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: Favorites
      ///
      /// Locales: en, es
      static func c3ASb3LEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("c3A-sb-3LE.text", tableName: "SettingsCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsCell", preferredLanguages: preferredLanguages) else {
          return "c3A-sb-3LE.text"
        }

        return NSLocalizedString("c3A-sb-3LE.text", tableName: "SettingsCell", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, es
      static func a9gGzK1OText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a9g-gz-K1O.text", tableName: "SettingsCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsCell", preferredLanguages: preferredLanguages) else {
          return "a9g-gz-K1O.text"
        }

        return NSLocalizedString("a9g-gz-K1O.text", tableName: "SettingsCell", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: en, es
      static func mIy5OVybText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mIy-5O-vyb.text", tableName: "SettingsCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsCell", preferredLanguages: preferredLanguages) else {
          return "mIy-5O-vyb.text"
        }

        return NSLocalizedString("mIy-5O-vyb.text", tableName: "SettingsCell", bundle: bundle, comment: "")
      }

      /// en translation: Other
      ///
      /// Locales: en, es
      static func mc1LJOQ7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MC1-lJ-OQ7.text", tableName: "SettingsCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsCell", preferredLanguages: preferredLanguages) else {
          return "MC1-lJ-OQ7.text"
        }

        return NSLocalizedString("MC1-lJ-OQ7.text", tableName: "SettingsCell", bundle: bundle, comment: "")
      }

      /// en translation: Plot 95, Block A, Rawalpindi Punjab, Pakistan
      ///
      /// Locales: en
      static func r2mSfUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("97R-2m-sfU.text", tableName: "SettingsCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsCell", preferredLanguages: preferredLanguages) else {
          return "97R-2m-sfU.text"
        }

        return NSLocalizedString("97R-2m-sfU.text", tableName: "SettingsCell", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en, es
      static func zZSVdCt2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zZS-vd-ct2.text", tableName: "SettingsCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsCell", preferredLanguages: preferredLanguages) else {
          return "zZS-vd-ct2.text"
        }

        return NSLocalizedString("zZS-vd-ct2.text", tableName: "SettingsCell", bundle: bundle, comment: "")
      }

      /// en translation: SOS Details
      ///
      /// Locales: en, es
      static func qiqYcZK0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Qiq-Yc-zK0.text", tableName: "SettingsCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsCell", preferredLanguages: preferredLanguages) else {
          return "Qiq-Yc-zK0.text"
        }

        return NSLocalizedString("Qiq-Yc-zK0.text", tableName: "SettingsCell", bundle: bundle, comment: "")
      }

      /// en translation: SOS Number
      ///
      /// Locales: en, es
      static func iLGV0OdMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iLG-V0-odM.text", tableName: "SettingsCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsCell", preferredLanguages: preferredLanguages) else {
          return "iLG-V0-odM.text"
        }

        return NSLocalizedString("iLG-V0-odM.text", tableName: "SettingsCell", bundle: bundle, comment: "")
      }

      /// en translation: SOS Number Not Available
      ///
      /// Locales: en, es
      static func iptEOH1KText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ipt-EO-h1K.text", tableName: "SettingsCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsCell", preferredLanguages: preferredLanguages) else {
          return "ipt-EO-h1K.text"
        }

        return NSLocalizedString("ipt-EO-h1K.text", tableName: "SettingsCell", bundle: bundle, comment: "")
      }

      /// en translation: Share
      ///
      /// Locales: en, es
      static func mbTOMQb7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mbT-oM-Qb7.text", tableName: "SettingsCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsCell", preferredLanguages: preferredLanguages) else {
          return "mbT-oM-Qb7.text"
        }

        return NSLocalizedString("mbT-oM-Qb7.text", tableName: "SettingsCell", bundle: bundle, comment: "")
      }

      /// en translation: Statelife cooperate housing society 3456, Block B, Lahore, punjab, Pakistan
      ///
      /// Locales: en
      static func bZkAiWriText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BZk-Ai-Wri.text", tableName: "SettingsCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsCell", preferredLanguages: preferredLanguages) else {
          return "BZk-Ai-Wri.text"
        }

        return NSLocalizedString("BZk-Ai-Wri.text", tableName: "SettingsCell", bundle: bundle, comment: "")
      }

      /// en translation: Terms & Conditions
      ///
      /// Locales: en, es
      static func jmrWDCaiText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Jmr-wD-cai.text", tableName: "SettingsCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsCell", preferredLanguages: preferredLanguages) else {
          return "Jmr-wD-cai.text"
        }

        return NSLocalizedString("Jmr-wD-cai.text", tableName: "SettingsCell", bundle: bundle, comment: "")
      }

      /// en translation: Work
      ///
      /// Locales: en, es
      static func d6EL2AxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9d6-eL-2Ax.text", tableName: "SettingsCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsCell", preferredLanguages: preferredLanguages) else {
          return "9d6-eL-2Ax.text"
        }

        return NSLocalizedString("9d6-eL-2Ax.text", tableName: "SettingsCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.sideMenuVC` struct is generated, and contains static references to 4 localization keys.
    struct sideMenuVC {
      /// en translation:  
      ///
      /// Locales: es, en
      static let jrJ5XQ8NormalTitle = Rswift.StringResource(key: "3jr-j5-XQ8.normalTitle", tableName: "SideMenuVC", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Drive with us
      ///
      /// Locales: es, en
      static let nFQ1WCujText = Rswift.StringResource(key: "nFQ-1W-cuj.text", tableName: "SideMenuVC", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: Faizan Khan
      ///
      /// Locales: es, en
      static let xDQEZ006Text = Rswift.StringResource(key: "xDQ-eZ-006.text", tableName: "SideMenuVC", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)
      /// en translation: View Profile
      ///
      /// Locales: es, en
      static let fVhTwOldNormalTitle = Rswift.StringResource(key: "fVh-Tw-Old.normalTitle", tableName: "SideMenuVC", bundle: R.hostingBundle, locales: ["es", "en"], comment: nil)

      /// en translation:  
      ///
      /// Locales: es, en
      static func jrJ5XQ8NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3jr-j5-XQ8.normalTitle", tableName: "SideMenuVC", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenuVC", preferredLanguages: preferredLanguages) else {
          return "3jr-j5-XQ8.normalTitle"
        }

        return NSLocalizedString("3jr-j5-XQ8.normalTitle", tableName: "SideMenuVC", bundle: bundle, comment: "")
      }

      /// en translation: Drive with us
      ///
      /// Locales: es, en
      static func nFQ1WCujText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nFQ-1W-cuj.text", tableName: "SideMenuVC", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenuVC", preferredLanguages: preferredLanguages) else {
          return "nFQ-1W-cuj.text"
        }

        return NSLocalizedString("nFQ-1W-cuj.text", tableName: "SideMenuVC", bundle: bundle, comment: "")
      }

      /// en translation: Faizan Khan
      ///
      /// Locales: es, en
      static func xDQEZ006Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xDQ-eZ-006.text", tableName: "SideMenuVC", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenuVC", preferredLanguages: preferredLanguages) else {
          return "xDQ-eZ-006.text"
        }

        return NSLocalizedString("xDQ-eZ-006.text", tableName: "SideMenuVC", bundle: bundle, comment: "")
      }

      /// en translation: View Profile
      ///
      /// Locales: es, en
      static func fVhTwOldNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fVh-Tw-Old.normalTitle", tableName: "SideMenuVC", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SideMenuVC", preferredLanguages: preferredLanguages) else {
          return "fVh-Tw-Old.normalTitle"
        }

        return NSLocalizedString("fVh-Tw-Old.normalTitle", tableName: "SideMenuVC", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.supportDataCell` struct is generated, and contains static references to 4 localization keys.
    struct supportDataCell {
      /// en translation: Call Us
      ///
      /// Locales: en, es
      static let fcCCEIJjText = Rswift.StringResource(key: "FcC-CE-iJj.text", tableName: "SupportDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Chat with our Support
      ///
      /// Locales: en, es
      static let bsS0IVjFText = Rswift.StringResource(key: "BsS-0I-VjF.text", tableName: "SupportDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Mail Us
      ///
      /// Locales: en, es
      static let uJMUeLText = Rswift.StringResource(key: "04u-JM-UeL.text", tableName: "SupportDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Support available 24/7, But sometimes wait a bit longer
      ///
      /// Locales: en, es
      static let wseogwTbText = Rswift.StringResource(key: "WSE-OG-WTb.text", tableName: "SupportDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: Call Us
      ///
      /// Locales: en, es
      static func fcCCEIJjText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FcC-CE-iJj.text", tableName: "SupportDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SupportDataCell", preferredLanguages: preferredLanguages) else {
          return "FcC-CE-iJj.text"
        }

        return NSLocalizedString("FcC-CE-iJj.text", tableName: "SupportDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Chat with our Support
      ///
      /// Locales: en, es
      static func bsS0IVjFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BsS-0I-VjF.text", tableName: "SupportDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SupportDataCell", preferredLanguages: preferredLanguages) else {
          return "BsS-0I-VjF.text"
        }

        return NSLocalizedString("BsS-0I-VjF.text", tableName: "SupportDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Mail Us
      ///
      /// Locales: en, es
      static func uJMUeLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("04u-JM-UeL.text", tableName: "SupportDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SupportDataCell", preferredLanguages: preferredLanguages) else {
          return "04u-JM-UeL.text"
        }

        return NSLocalizedString("04u-JM-UeL.text", tableName: "SupportDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Support available 24/7, But sometimes wait a bit longer
      ///
      /// Locales: en, es
      static func wseogwTbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WSE-OG-WTb.text", tableName: "SupportDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SupportDataCell", preferredLanguages: preferredLanguages) else {
          return "WSE-OG-WTb.text"
        }

        return NSLocalizedString("WSE-OG-WTb.text", tableName: "SupportDataCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.validatePhoneDataCell` struct is generated, and contains static references to 6 localization keys.
    struct validatePhoneDataCell {
      /// en translation: 00 : 56
      ///
      /// Locales: en, es
      static let nNjMkFoOText = Rswift.StringResource(key: "NNj-Mk-foO.text", tableName: "ValidatePhoneDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Didn’t receive code?
      ///
      /// Locales: en, es
      static let teiHyComText = Rswift.StringResource(key: "TEI-hy-com.text", tableName: "ValidatePhoneDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Resend Code
      ///
      /// Locales: en, es
      static let jDOXDRSVNormalTitle = Rswift.StringResource(key: "jDO-xD-RSV.normalTitle", tableName: "ValidatePhoneDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Resend code in : 
      ///
      /// Locales: en, es
      static let hzrIV3XZText = Rswift.StringResource(key: "Hzr-iV-3XZ.text", tableName: "ValidatePhoneDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: VERIFICATION
      ///
      /// Locales: en, es
      static let unrCkMeAText = Rswift.StringResource(key: "Unr-Ck-meA.text", tableName: "ValidatePhoneDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: We've sent the code to your phone Number
      ///
      /// Locales: en, es
      static let qWTZXKSWText = Rswift.StringResource(key: "qWT-zX-kSW.text", tableName: "ValidatePhoneDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: 00 : 56
      ///
      /// Locales: en, es
      static func nNjMkFoOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NNj-Mk-foO.text", tableName: "ValidatePhoneDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ValidatePhoneDataCell", preferredLanguages: preferredLanguages) else {
          return "NNj-Mk-foO.text"
        }

        return NSLocalizedString("NNj-Mk-foO.text", tableName: "ValidatePhoneDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Didn’t receive code?
      ///
      /// Locales: en, es
      static func teiHyComText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TEI-hy-com.text", tableName: "ValidatePhoneDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ValidatePhoneDataCell", preferredLanguages: preferredLanguages) else {
          return "TEI-hy-com.text"
        }

        return NSLocalizedString("TEI-hy-com.text", tableName: "ValidatePhoneDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Resend Code
      ///
      /// Locales: en, es
      static func jDOXDRSVNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jDO-xD-RSV.normalTitle", tableName: "ValidatePhoneDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ValidatePhoneDataCell", preferredLanguages: preferredLanguages) else {
          return "jDO-xD-RSV.normalTitle"
        }

        return NSLocalizedString("jDO-xD-RSV.normalTitle", tableName: "ValidatePhoneDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Resend code in : 
      ///
      /// Locales: en, es
      static func hzrIV3XZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hzr-iV-3XZ.text", tableName: "ValidatePhoneDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ValidatePhoneDataCell", preferredLanguages: preferredLanguages) else {
          return "Hzr-iV-3XZ.text"
        }

        return NSLocalizedString("Hzr-iV-3XZ.text", tableName: "ValidatePhoneDataCell", bundle: bundle, comment: "")
      }

      /// en translation: VERIFICATION
      ///
      /// Locales: en, es
      static func unrCkMeAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unr-Ck-meA.text", tableName: "ValidatePhoneDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ValidatePhoneDataCell", preferredLanguages: preferredLanguages) else {
          return "Unr-Ck-meA.text"
        }

        return NSLocalizedString("Unr-Ck-meA.text", tableName: "ValidatePhoneDataCell", bundle: bundle, comment: "")
      }

      /// en translation: We've sent the code to your phone Number
      ///
      /// Locales: en, es
      static func qWTZXKSWText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qWT-zX-kSW.text", tableName: "ValidatePhoneDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ValidatePhoneDataCell", preferredLanguages: preferredLanguages) else {
          return "qWT-zX-kSW.text"
        }

        return NSLocalizedString("qWT-zX-kSW.text", tableName: "ValidatePhoneDataCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.walletDataCell` struct is generated, and contains static references to 11 localization keys.
    struct walletDataCell {
      /// en translation: 0
      ///
      /// Locales: en, es
      static let t9OQsEPWPlaceholder = Rswift.StringResource(key: "t9O-qs-EPW.placeholder", tableName: "WalletDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ADD AMOUNT
      ///
      /// Locales: en, es
      static let vtPMrM66NormalTitle = Rswift.StringResource(key: "VtP-mr-m66.normalTitle", tableName: "WalletDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Add Money
      ///
      /// Locales: en, es
      static let tvn5dJ6cText = Rswift.StringResource(key: "TVN-5d-j6c.text", tableName: "WalletDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Pay By Card
      ///
      /// Locales: en, es
      static let k55JG3z9Text = Rswift.StringResource(key: "k55-JG-3z9.text", tableName: "WalletDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Payment Methods
      ///
      /// Locales: en, es
      static let l2wGkZgpText = Rswift.StringResource(key: "l2w-Gk-zgp.text", tableName: "WalletDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: R - 4456.67
      ///
      /// Locales: en, es
      static let elwQqNMvText = Rswift.StringResource(key: "ELW-qq-NMv.text", tableName: "WalletDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Wallet Amount
      ///
      /// Locales: en, es
      static let kaveEhjText = Rswift.StringResource(key: "1KA-VE-ehj.text", tableName: "WalletDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ZK
      ///
      /// Locales: en, es
      static let wpxLsBXFText = Rswift.StringResource(key: "WPX-ls-bXF.text", tableName: "WalletDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ZK 10
      ///
      /// Locales: en, es
      static let vKyCrOJYText = Rswift.StringResource(key: "vKy-cr-OJY.text", tableName: "WalletDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ZK 20
      ///
      /// Locales: en, es
      static let qszMsKd8Text = Rswift.StringResource(key: "qsz-ms-kd8.text", tableName: "WalletDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ZK 50
      ///
      /// Locales: en, es
      static let oM2MFGP7Text = Rswift.StringResource(key: "oM2-mF-gP7.text", tableName: "WalletDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: 0
      ///
      /// Locales: en, es
      static func t9OQsEPWPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("t9O-qs-EPW.placeholder", tableName: "WalletDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WalletDataCell", preferredLanguages: preferredLanguages) else {
          return "t9O-qs-EPW.placeholder"
        }

        return NSLocalizedString("t9O-qs-EPW.placeholder", tableName: "WalletDataCell", bundle: bundle, comment: "")
      }

      /// en translation: ADD AMOUNT
      ///
      /// Locales: en, es
      static func vtPMrM66NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VtP-mr-m66.normalTitle", tableName: "WalletDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WalletDataCell", preferredLanguages: preferredLanguages) else {
          return "VtP-mr-m66.normalTitle"
        }

        return NSLocalizedString("VtP-mr-m66.normalTitle", tableName: "WalletDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Add Money
      ///
      /// Locales: en, es
      static func tvn5dJ6cText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TVN-5d-j6c.text", tableName: "WalletDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WalletDataCell", preferredLanguages: preferredLanguages) else {
          return "TVN-5d-j6c.text"
        }

        return NSLocalizedString("TVN-5d-j6c.text", tableName: "WalletDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Pay By Card
      ///
      /// Locales: en, es
      static func k55JG3z9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("k55-JG-3z9.text", tableName: "WalletDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WalletDataCell", preferredLanguages: preferredLanguages) else {
          return "k55-JG-3z9.text"
        }

        return NSLocalizedString("k55-JG-3z9.text", tableName: "WalletDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Payment Methods
      ///
      /// Locales: en, es
      static func l2wGkZgpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("l2w-Gk-zgp.text", tableName: "WalletDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WalletDataCell", preferredLanguages: preferredLanguages) else {
          return "l2w-Gk-zgp.text"
        }

        return NSLocalizedString("l2w-Gk-zgp.text", tableName: "WalletDataCell", bundle: bundle, comment: "")
      }

      /// en translation: R - 4456.67
      ///
      /// Locales: en, es
      static func elwQqNMvText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ELW-qq-NMv.text", tableName: "WalletDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WalletDataCell", preferredLanguages: preferredLanguages) else {
          return "ELW-qq-NMv.text"
        }

        return NSLocalizedString("ELW-qq-NMv.text", tableName: "WalletDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Wallet Amount
      ///
      /// Locales: en, es
      static func kaveEhjText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1KA-VE-ehj.text", tableName: "WalletDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WalletDataCell", preferredLanguages: preferredLanguages) else {
          return "1KA-VE-ehj.text"
        }

        return NSLocalizedString("1KA-VE-ehj.text", tableName: "WalletDataCell", bundle: bundle, comment: "")
      }

      /// en translation: ZK
      ///
      /// Locales: en, es
      static func wpxLsBXFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WPX-ls-bXF.text", tableName: "WalletDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WalletDataCell", preferredLanguages: preferredLanguages) else {
          return "WPX-ls-bXF.text"
        }

        return NSLocalizedString("WPX-ls-bXF.text", tableName: "WalletDataCell", bundle: bundle, comment: "")
      }

      /// en translation: ZK 10
      ///
      /// Locales: en, es
      static func vKyCrOJYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vKy-cr-OJY.text", tableName: "WalletDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WalletDataCell", preferredLanguages: preferredLanguages) else {
          return "vKy-cr-OJY.text"
        }

        return NSLocalizedString("vKy-cr-OJY.text", tableName: "WalletDataCell", bundle: bundle, comment: "")
      }

      /// en translation: ZK 20
      ///
      /// Locales: en, es
      static func qszMsKd8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qsz-ms-kd8.text", tableName: "WalletDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WalletDataCell", preferredLanguages: preferredLanguages) else {
          return "qsz-ms-kd8.text"
        }

        return NSLocalizedString("qsz-ms-kd8.text", tableName: "WalletDataCell", bundle: bundle, comment: "")
      }

      /// en translation: ZK 50
      ///
      /// Locales: en, es
      static func oM2MFGP7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oM2-mF-gP7.text", tableName: "WalletDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WalletDataCell", preferredLanguages: preferredLanguages) else {
          return "oM2-mF-gP7.text"
        }

        return NSLocalizedString("oM2-mF-gP7.text", tableName: "WalletDataCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.walletHistoryCouponCell` struct is generated, and contains static references to 6 localization keys.
    struct walletHistoryCouponCell {
      /// en translation: 10% OFF
      ///
      /// Locales: en, es
      static let sbQASG3Text = Rswift.StringResource(key: "0Sb-QA-sG3.text", tableName: "WalletHistoryCouponCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: 3 Jan 2022
      ///
      /// Locales: en, es
      static let sDGARZpLText = Rswift.StringResource(key: "sDG-AR-zpL.text", tableName: "WalletHistoryCouponCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ADDED
      ///
      /// Locales: en, es
      static let pu3ECQ8pText = Rswift.StringResource(key: "pu3-eC-q8p.text", tableName: "WalletHistoryCouponCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Coupon Code
      ///
      /// Locales: en, es
      static let z0VYa91FText = Rswift.StringResource(key: "Z0V-Ya-91F.text", tableName: "WalletHistoryCouponCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Offer
      ///
      /// Locales: en, es
      static let cr16k3ULText = Rswift.StringResource(key: "cr1-6k-3UL.text", tableName: "WalletHistoryCouponCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: TEST
      ///
      /// Locales: en, es
      static let e8gK3HccText = Rswift.StringResource(key: "E8g-k3-Hcc.text", tableName: "WalletHistoryCouponCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: 10% OFF
      ///
      /// Locales: en, es
      static func sbQASG3Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0Sb-QA-sG3.text", tableName: "WalletHistoryCouponCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WalletHistoryCouponCell", preferredLanguages: preferredLanguages) else {
          return "0Sb-QA-sG3.text"
        }

        return NSLocalizedString("0Sb-QA-sG3.text", tableName: "WalletHistoryCouponCell", bundle: bundle, comment: "")
      }

      /// en translation: 3 Jan 2022
      ///
      /// Locales: en, es
      static func sDGARZpLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sDG-AR-zpL.text", tableName: "WalletHistoryCouponCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WalletHistoryCouponCell", preferredLanguages: preferredLanguages) else {
          return "sDG-AR-zpL.text"
        }

        return NSLocalizedString("sDG-AR-zpL.text", tableName: "WalletHistoryCouponCell", bundle: bundle, comment: "")
      }

      /// en translation: ADDED
      ///
      /// Locales: en, es
      static func pu3ECQ8pText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pu3-eC-q8p.text", tableName: "WalletHistoryCouponCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WalletHistoryCouponCell", preferredLanguages: preferredLanguages) else {
          return "pu3-eC-q8p.text"
        }

        return NSLocalizedString("pu3-eC-q8p.text", tableName: "WalletHistoryCouponCell", bundle: bundle, comment: "")
      }

      /// en translation: Coupon Code
      ///
      /// Locales: en, es
      static func z0VYa91FText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Z0V-Ya-91F.text", tableName: "WalletHistoryCouponCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WalletHistoryCouponCell", preferredLanguages: preferredLanguages) else {
          return "Z0V-Ya-91F.text"
        }

        return NSLocalizedString("Z0V-Ya-91F.text", tableName: "WalletHistoryCouponCell", bundle: bundle, comment: "")
      }

      /// en translation: Offer
      ///
      /// Locales: en, es
      static func cr16k3ULText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cr1-6k-3UL.text", tableName: "WalletHistoryCouponCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WalletHistoryCouponCell", preferredLanguages: preferredLanguages) else {
          return "cr1-6k-3UL.text"
        }

        return NSLocalizedString("cr1-6k-3UL.text", tableName: "WalletHistoryCouponCell", bundle: bundle, comment: "")
      }

      /// en translation: TEST
      ///
      /// Locales: en, es
      static func e8gK3HccText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("E8g-k3-Hcc.text", tableName: "WalletHistoryCouponCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WalletHistoryCouponCell", preferredLanguages: preferredLanguages) else {
          return "E8g-k3-Hcc.text"
        }

        return NSLocalizedString("E8g-k3-Hcc.text", tableName: "WalletHistoryCouponCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.walletHistoryDataCell` struct is generated, and contains static references to 5 localization keys.
    struct walletHistoryDataCell {
      /// en translation: 3 Jan 2022
      ///
      /// Locales: en, es
      static let kvy9zBvlText = Rswift.StringResource(key: "Kvy-9z-bvl.text", tableName: "WalletHistoryDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Amount
      ///
      /// Locales: en, es
      static let pkWXzLCQText = Rswift.StringResource(key: "PkW-xz-lCQ.text", tableName: "WalletHistoryDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: CARD
      ///
      /// Locales: en, es
      static let hjwSbHMTText = Rswift.StringResource(key: "HJW-sb-hMT.text", tableName: "WalletHistoryDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Credited by
      ///
      /// Locales: en, es
      static let urQISS1BText = Rswift.StringResource(key: "UrQ-IS-s1B.text", tableName: "WalletHistoryDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: R 500
      ///
      /// Locales: en, es
      static let e30B2m1Text = Rswift.StringResource(key: "6E3-0B-2m1.text", tableName: "WalletHistoryDataCell", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: 3 Jan 2022
      ///
      /// Locales: en, es
      static func kvy9zBvlText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kvy-9z-bvl.text", tableName: "WalletHistoryDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WalletHistoryDataCell", preferredLanguages: preferredLanguages) else {
          return "Kvy-9z-bvl.text"
        }

        return NSLocalizedString("Kvy-9z-bvl.text", tableName: "WalletHistoryDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Amount
      ///
      /// Locales: en, es
      static func pkWXzLCQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PkW-xz-lCQ.text", tableName: "WalletHistoryDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WalletHistoryDataCell", preferredLanguages: preferredLanguages) else {
          return "PkW-xz-lCQ.text"
        }

        return NSLocalizedString("PkW-xz-lCQ.text", tableName: "WalletHistoryDataCell", bundle: bundle, comment: "")
      }

      /// en translation: CARD
      ///
      /// Locales: en, es
      static func hjwSbHMTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HJW-sb-hMT.text", tableName: "WalletHistoryDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WalletHistoryDataCell", preferredLanguages: preferredLanguages) else {
          return "HJW-sb-hMT.text"
        }

        return NSLocalizedString("HJW-sb-hMT.text", tableName: "WalletHistoryDataCell", bundle: bundle, comment: "")
      }

      /// en translation: Credited by
      ///
      /// Locales: en, es
      static func urQISS1BText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UrQ-IS-s1B.text", tableName: "WalletHistoryDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WalletHistoryDataCell", preferredLanguages: preferredLanguages) else {
          return "UrQ-IS-s1B.text"
        }

        return NSLocalizedString("UrQ-IS-s1B.text", tableName: "WalletHistoryDataCell", bundle: bundle, comment: "")
      }

      /// en translation: R 500
      ///
      /// Locales: en, es
      static func e30B2m1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6E3-0B-2m1.text", tableName: "WalletHistoryDataCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WalletHistoryDataCell", preferredLanguages: preferredLanguages) else {
          return "6E3-0B-2m1.text"
        }

        return NSLocalizedString("6E3-0B-2m1.text", tableName: "WalletHistoryDataCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AlertView.validate()
      try _DriverProfileDataCell.validate()
      try _EarningsNoDataCell.validate()
      try _EditProfileCell.validate()
      try _HomeBookingInvoiceCell.validate()
      try _HomeBottomViewStage1Cell.validate()
      try _HomeBottomViewStage2Cell.validate()
      try _HomeBottomViewStage3Cell.validate()
      try _HomeBottomViewStage4BottomCell.validate()
      try _HomeBottomViewStage4HeaderCell.validate()
      try _HomeBottomViewStage4RatingCell.validate()
      try _HomeEstimatedPriceCell.validate()
      try _HomeServiceDetailCell.validate()
      try _HomeVehicleViewStage2Cell.validate()
      try _LogInCell.validate()
      try _ManageAddCardCell.validate()
      try _PayOnlineDataCell.validate()
      try _ProfileMainCell.validate()
      try _RegisterUserDetailCell.validate()
      try _RideDetailDataCell.validate()
      try _RideHistoryDataCell.validate()
      try _ScheduledRidesDataCell.validate()
      try _SettingsCell.validate()
      try _SideMenuVC.validate()
      try _SingleValuePickerCell.validate()
      try _SingleValuePickerView.validate()
      try _SupportDataCell.validate()
      try _ValidatePhoneDataCell.validate()
      try _WalletDataCell.validate()
    }

    struct _AlertView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AlertView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AlertView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AlertView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "launchScreenIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launchScreenIcon' is used in nib 'AlertView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "secondaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondaryColor' is used in nib 'AlertView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in nib 'AlertView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ChangePasswordCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ChangePasswordCell

      let bundle = R.hostingBundle
      let identifier = "ChangePasswordCell"
      let name = "ChangePasswordCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChangePasswordCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChangePasswordCell
      }

      fileprivate init() {}
    }

    struct _ChangePasswordVerifyCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ChangePasswordVerifyCell

      let bundle = R.hostingBundle
      let identifier = "ChangePasswordVerifyCell"
      let name = "ChangePasswordVerifyCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChangePasswordVerifyCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChangePasswordVerifyCell
      }

      fileprivate init() {}
    }

    struct _ChatCurrentUserCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ChatCurrentUserCell

      let bundle = R.hostingBundle
      let identifier = "ChatCurrentUserCell"
      let name = "ChatCurrentUserCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatCurrentUserCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatCurrentUserCell
      }

      fileprivate init() {}
    }

    struct _ChatOtherUserCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ChatOtherUserCell

      let bundle = R.hostingBundle
      let identifier = "ChatOtherUserCell"
      let name = "ChatOtherUserCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatOtherUserCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatOtherUserCell
      }

      fileprivate init() {}
    }

    struct _DriverProfileDataCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = DriverProfileDataCell

      let bundle = R.hostingBundle
      let identifier = "DriverProfileDataCell"
      let name = "DriverProfileDataCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DriverProfileDataCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DriverProfileDataCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconEmail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconEmail' is used in nib 'DriverProfileDataCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconPhone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconPhone' is used in nib 'DriverProfileDataCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconUserPlaceholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconUserPlaceholder' is used in nib 'DriverProfileDataCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'DriverProfileDataCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondaryColor' is used in nib 'DriverProfileDataCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _EarningsNoDataCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EarningsNoDataCell

      let bundle = R.hostingBundle
      let identifier = "EarningsNoDataCell"
      let name = "EarningsNoDataCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EarningsNoDataCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EarningsNoDataCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconNoData1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconNoData1' is used in nib 'EarningsNoDataCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'EarningsNoDataCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in nib 'EarningsNoDataCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _EditProfileCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EditProfileCell

      let bundle = R.hostingBundle
      let identifier = "EditProfileCell"
      let name = "EditProfileCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditProfileCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfileCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconEmail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconEmail' is used in nib 'EditProfileCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconLock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconLock' is used in nib 'EditProfileCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconUser", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconUser' is used in nib 'EditProfileCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconUserPlaceholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconUserPlaceholder' is used in nib 'EditProfileCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'EditProfileCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondaryColor' is used in nib 'EditProfileCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in nib 'EditProfileCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeBookingInvoiceCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeBookingInvoiceCell

      let bundle = R.hostingBundle
      let identifier = "HomeBookingInvoiceCell"
      let name = "HomeBookingInvoiceCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBookingInvoiceCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBookingInvoiceCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconCash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconCash' is used in nib 'HomeBookingInvoiceCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconDrop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconDrop' is used in nib 'HomeBookingInvoiceCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconPickup", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconPickup' is used in nib 'HomeBookingInvoiceCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'HomeBookingInvoiceCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondaryColor' is used in nib 'HomeBookingInvoiceCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in nib 'HomeBookingInvoiceCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tretiaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tretiaryColor' is used in nib 'HomeBookingInvoiceCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeBottomViewStage1Cell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeBottomViewStage1Cell

      let bundle = R.hostingBundle
      let identifier = "HomeBottomViewStage1Cell"
      let name = "HomeBottomViewStage1Cell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBottomViewStage1Cell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBottomViewStage1Cell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "btnHome", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnHome' is used in nib 'HomeBottomViewStage1Cell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btnPickUp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnPickUp' is used in nib 'HomeBottomViewStage1Cell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btnSearch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnSearch' is used in nib 'HomeBottomViewStage1Cell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btnWork", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnWork' is used in nib 'HomeBottomViewStage1Cell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'HomeBottomViewStage1Cell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in nib 'HomeBottomViewStage1Cell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeBottomViewStage2Cell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeBottomViewStage2Cell

      let bundle = R.hostingBundle
      let identifier = "HomeBottomViewStage2Cell"
      let name = "HomeBottomViewStage2Cell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBottomViewStage2Cell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBottomViewStage2Cell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconCalendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconCalendar' is used in nib 'HomeBottomViewStage2Cell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconPaymentMode", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconPaymentMode' is used in nib 'HomeBottomViewStage2Cell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconPromoCode", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconPromoCode' is used in nib 'HomeBottomViewStage2Cell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'HomeBottomViewStage2Cell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondaryColor' is used in nib 'HomeBottomViewStage2Cell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in nib 'HomeBottomViewStage2Cell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeBottomViewStage3Cell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeBottomViewStage3Cell

      let bundle = R.hostingBundle
      let identifier = "HomeBottomViewStage3Cell"
      let name = "HomeBottomViewStage3Cell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBottomViewStage3Cell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBottomViewStage3Cell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "btnCrossSmall", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnCrossSmall' is used in nib 'HomeBottomViewStage3Cell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'HomeBottomViewStage3Cell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in nib 'HomeBottomViewStage3Cell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tretiaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tretiaryColor' is used in nib 'HomeBottomViewStage3Cell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeBottomViewStage4BottomCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeBottomViewStage4BottomCell

      let bundle = R.hostingBundle
      let identifier = "HomeBottomViewStage4BottomCell"
      let name = "HomeBottomViewStage4BottomCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBottomViewStage4BottomCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBottomViewStage4BottomCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "btnCrossSmall", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnCrossSmall' is used in nib 'HomeBottomViewStage4BottomCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconMessage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconMessage' is used in nib 'HomeBottomViewStage4BottomCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconPhone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconPhone' is used in nib 'HomeBottomViewStage4BottomCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconShare", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconShare' is used in nib 'HomeBottomViewStage4BottomCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "secondaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondaryColor' is used in nib 'HomeBottomViewStage4BottomCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in nib 'HomeBottomViewStage4BottomCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tretiaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tretiaryColor' is used in nib 'HomeBottomViewStage4BottomCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeBottomViewStage4HeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeBottomViewStage4HeaderCell

      let bundle = R.hostingBundle
      let identifier = "HomeBottomViewStage4HeaderCell"
      let name = "HomeBottomViewStage4HeaderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBottomViewStage4HeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBottomViewStage4HeaderCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconCar1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconCar1' is used in nib 'HomeBottomViewStage4HeaderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconDummy2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconDummy2' is used in nib 'HomeBottomViewStage4HeaderCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'HomeBottomViewStage4HeaderCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondaryColor' is used in nib 'HomeBottomViewStage4HeaderCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tretiaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tretiaryColor' is used in nib 'HomeBottomViewStage4HeaderCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeBottomViewStage4PromoCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeBottomViewStage4PromoCell

      let bundle = R.hostingBundle
      let identifier = "HomeBottomViewStage4PromoCell"
      let name = "HomeBottomViewStage4PromoCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBottomViewStage4PromoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBottomViewStage4PromoCell
      }

      fileprivate init() {}
    }

    struct _HomeBottomViewStage4RatingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeBottomViewStage4RatingCell

      let bundle = R.hostingBundle
      let identifier = "HomeBottomViewStage4RatingCell"
      let name = "HomeBottomViewStage4RatingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBottomViewStage4RatingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBottomViewStage4RatingCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconDummy2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconDummy2' is used in nib 'HomeBottomViewStage4RatingCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'HomeBottomViewStage4RatingCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondaryColor' is used in nib 'HomeBottomViewStage4RatingCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in nib 'HomeBottomViewStage4RatingCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tretiaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tretiaryColor' is used in nib 'HomeBottomViewStage4RatingCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeEstimatedPriceCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeEstimatedPriceCell

      let bundle = R.hostingBundle
      let identifier = "HomeEstimatedPriceCell"
      let name = "HomeEstimatedPriceCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeEstimatedPriceCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeEstimatedPriceCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "btnCrossSmall", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnCrossSmall' is used in nib 'HomeEstimatedPriceCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'HomeEstimatedPriceCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in nib 'HomeEstimatedPriceCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeScheduleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeScheduleCell

      let bundle = R.hostingBundle
      let identifier = "HomeScheduleCell"
      let name = "HomeScheduleCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeScheduleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeScheduleCell
      }

      fileprivate init() {}
    }

    struct _HomeServiceDetailCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeServiceDetailCell

      let bundle = R.hostingBundle
      let identifier = "HomeServiceDetailCell"
      let name = "HomeServiceDetailCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeServiceDetailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeServiceDetailCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconDummy2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconDummy2' is used in nib 'HomeServiceDetailCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconUser", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconUser' is used in nib 'HomeServiceDetailCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'HomeServiceDetailCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondaryColor' is used in nib 'HomeServiceDetailCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in nib 'HomeServiceDetailCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tretiaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tretiaryColor' is used in nib 'HomeServiceDetailCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeVehicleViewStage2Cell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeVehicleViewStage2Cell

      let bundle = R.hostingBundle
      let identifier = "HomeVehicleViewStage2Cell"
      let name = "HomeVehicleViewStage2Cell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeVehicleViewStage2Cell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeVehicleViewStage2Cell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconCar1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconCar1' is used in nib 'HomeVehicleViewStage2Cell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconUser", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconUser' is used in nib 'HomeVehicleViewStage2Cell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'HomeVehicleViewStage2Cell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in nib 'HomeVehicleViewStage2Cell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint2' is used in nib 'HomeVehicleViewStage2Cell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeVehicleViewStage2HeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeVehicleViewStage2HeaderCell

      let bundle = R.hostingBundle
      let identifier = "HomeVehicleViewStage2HeaderCell"
      let name = "HomeVehicleViewStage2HeaderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeVehicleViewStage2HeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeVehicleViewStage2HeaderCell
      }

      fileprivate init() {}
    }

    struct _HomeVehicleViewStage2HeaderCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeVehicleViewStage2HeaderCollectionCell

      let bundle = R.hostingBundle
      let identifier = "HomeVehicleViewStage2HeaderCollectionCell"
      let name = "HomeVehicleViewStage2HeaderCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeVehicleViewStage2HeaderCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeVehicleViewStage2HeaderCollectionCell
      }

      fileprivate init() {}
    }

    struct _LogInCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LogInCell

      let bundle = R.hostingBundle
      let identifier = "LogInCell"
      let name = "LogInCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LogInCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LogInCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconLock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconLock' is used in nib 'LogInCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconShowPassword", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconShowPassword' is used in nib 'LogInCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "launchScreenIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launchScreenIcon' is used in nib 'LogInCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'placeholder' is used in nib 'LogInCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'LogInCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in nib 'LogInCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tretiaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tretiaryColor' is used in nib 'LogInCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ManageAddCardButtonCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ManageAddCardButtonCell

      let bundle = R.hostingBundle
      let identifier = "ManageAddCardButtonCell"
      let name = "ManageAddCardButtonCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ManageAddCardButtonCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ManageAddCardButtonCell
      }

      fileprivate init() {}
    }

    struct _ManageAddCardCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ManageAddCardCell

      let bundle = R.hostingBundle
      let identifier = "ManageAddCardCell"
      let name = "ManageAddCardCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ManageAddCardCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ManageAddCardCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconCheckMark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconCheckMark' is used in nib 'ManageAddCardCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconDelete", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconDelete' is used in nib 'ManageAddCardCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconVisa", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconVisa' is used in nib 'ManageAddCardCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'ManageAddCardCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ManageCardDataCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ManageCardDataCell

      let bundle = R.hostingBundle
      let identifier = "ManageCardDataCell"
      let name = "ManageCardDataCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ManageCardDataCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ManageCardDataCell
      }

      fileprivate init() {}
    }

    struct _NoDataView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NoDataView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NoDataView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NoDataView
      }

      fileprivate init() {}
    }

    struct _PayOnlineDataCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PayOnlineDataCell

      let bundle = R.hostingBundle
      let identifier = "PayOnlineDataCell"
      let name = "PayOnlineDataCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PayOnlineDataCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PayOnlineDataCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "btnCheckMarkSelected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnCheckMarkSelected' is used in nib 'PayOnlineDataCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btnCrossSmall", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnCrossSmall' is used in nib 'PayOnlineDataCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "stripe-Logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'stripe-Logo' is used in nib 'PayOnlineDataCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'PayOnlineDataCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in nib 'PayOnlineDataCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProfileMainCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProfileMainCell

      let bundle = R.hostingBundle
      let identifier = "ProfileMainCell"
      let name = "ProfileMainCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileMainCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileMainCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "btnHome", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnHome' is used in nib 'ProfileMainCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btnWork", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnWork' is used in nib 'ProfileMainCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconEmail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconEmail' is used in nib 'ProfileMainCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconPhone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconPhone' is used in nib 'ProfileMainCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconUserPlaceholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconUserPlaceholder' is used in nib 'ProfileMainCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'ProfileMainCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondaryColor' is used in nib 'ProfileMainCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _RegisterUserDetailCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RegisterUserDetailCell

      let bundle = R.hostingBundle
      let identifier = "RegisterUserDetailCell"
      let name = "RegisterUserDetailCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RegisterUserDetailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RegisterUserDetailCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconEmail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconEmail' is used in nib 'RegisterUserDetailCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconLock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconLock' is used in nib 'RegisterUserDetailCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconShowPassword", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconShowPassword' is used in nib 'RegisterUserDetailCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconUser", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconUser' is used in nib 'RegisterUserDetailCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'RegisterUserDetailCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondaryColor' is used in nib 'RegisterUserDetailCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in nib 'RegisterUserDetailCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tretiaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tretiaryColor' is used in nib 'RegisterUserDetailCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _RegisterVerifyPhoneCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RegisterVerifyPhoneCell

      let bundle = R.hostingBundle
      let identifier = "RegisterVerifyPhoneCell"
      let name = "RegisterVerifyPhoneCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RegisterVerifyPhoneCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RegisterVerifyPhoneCell
      }

      fileprivate init() {}
    }

    struct _RideDetailDataCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RideDetailDataCell

      let bundle = R.hostingBundle
      let identifier = "RideDetailDataCell"
      let name = "RideDetailDataCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RideDetailDataCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RideDetailDataCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconCash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconCash' is used in nib 'RideDetailDataCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconDrop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconDrop' is used in nib 'RideDetailDataCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconMap", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconMap' is used in nib 'RideDetailDataCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconPickup", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconPickup' is used in nib 'RideDetailDataCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconTexi", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconTexi' is used in nib 'RideDetailDataCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'RideDetailDataCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondaryColor' is used in nib 'RideDetailDataCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in nib 'RideDetailDataCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _RideHistoryDataCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RideHistoryDataCell

      let bundle = R.hostingBundle
      let identifier = "RideHistoryDataCell"
      let name = "RideHistoryDataCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RideHistoryDataCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RideHistoryDataCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconDrop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconDrop' is used in nib 'RideHistoryDataCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconPickup", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconPickup' is used in nib 'RideHistoryDataCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconTexi", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconTexi' is used in nib 'RideHistoryDataCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "bgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'bgColor' is used in nib 'RideHistoryDataCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'RideHistoryDataCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondaryColor' is used in nib 'RideHistoryDataCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in nib 'RideHistoryDataCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _RideReceiptDataCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RideReceiptDataCell

      let bundle = R.hostingBundle
      let identifier = "RideReceiptDataCell"
      let name = "RideReceiptDataCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RideReceiptDataCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RideReceiptDataCell
      }

      fileprivate init() {}
    }

    struct _ScheduledRidesDataCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ScheduledRidesDataCell

      let bundle = R.hostingBundle
      let identifier = "ScheduledRidesDataCell"
      let name = "ScheduledRidesDataCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ScheduledRidesDataCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ScheduledRidesDataCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconDrop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconDrop' is used in nib 'ScheduledRidesDataCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconPickup", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconPickup' is used in nib 'ScheduledRidesDataCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconTexi", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconTexi' is used in nib 'ScheduledRidesDataCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "bgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'bgColor' is used in nib 'ScheduledRidesDataCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'ScheduledRidesDataCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondaryColor' is used in nib 'ScheduledRidesDataCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in nib 'ScheduledRidesDataCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SettingsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SettingsCell

      let bundle = R.hostingBundle
      let identifier = "SettingsCell"
      let name = "SettingsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "btnHome", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnHome' is used in nib 'SettingsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btnWork", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnWork' is used in nib 'SettingsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "downward-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'downward-arrow' is used in nib 'SettingsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconLogout", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconLogout' is used in nib 'SettingsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconPrivacy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconPrivacy' is used in nib 'SettingsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconSOS", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconSOS' is used in nib 'SettingsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconShare", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconShare' is used in nib 'SettingsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconTerms", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconTerms' is used in nib 'SettingsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "languageIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'languageIcon' is used in nib 'SettingsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'SettingsCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondaryColor' is used in nib 'SettingsCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SideMenuCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SideMenuCell

      let bundle = R.hostingBundle
      let identifier = "SideMenuCell"
      let name = "SideMenuCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SideMenuCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SideMenuCell
      }

      fileprivate init() {}
    }

    struct _SideMenuVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SideMenuVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "btnDrive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnDrive' is used in nib 'SideMenuVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'SideMenuVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in nib 'SideMenuVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SingleValuePickerCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SingleValuePickerCell

      let bundle = R.hostingBundle
      let identifier = "SingleValuePickerCell"
      let name = "SingleValuePickerCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SingleValuePickerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SingleValuePickerCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "completedYellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'completedYellow' is used in nib 'SingleValuePickerCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SingleValuePickerView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SingleValuePickerView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SingleValuePickerView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SingleValuePickerView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "btnCompleted", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnCompleted' is used in nib 'SingleValuePickerView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SupportDataCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SupportDataCell

      let bundle = R.hostingBundle
      let identifier = "SupportDataCell"
      let name = "SupportDataCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupportDataCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupportDataCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconEmail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconEmail' is used in nib 'SupportDataCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconMessage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconMessage' is used in nib 'SupportDataCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconPhone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconPhone' is used in nib 'SupportDataCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconSupport", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconSupport' is used in nib 'SupportDataCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'SupportDataCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondaryColor' is used in nib 'SupportDataCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in nib 'SupportDataCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ValidatePhoneDataCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ValidatePhoneDataCell

      let bundle = R.hostingBundle
      let identifier = "ValidatePhoneDataCell"
      let name = "ValidatePhoneDataCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ValidatePhoneDataCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ValidatePhoneDataCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "launchScreenIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launchScreenIcon' is used in nib 'ValidatePhoneDataCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "placeholderColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'placeholderColor' is used in nib 'ValidatePhoneDataCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'ValidatePhoneDataCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondaryColor' is used in nib 'ValidatePhoneDataCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in nib 'ValidatePhoneDataCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _WalletDataCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = WalletDataCell

      let bundle = R.hostingBundle
      let identifier = "WalletDataCell"
      let name = "WalletDataCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletDataCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletDataCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "btnCheckMarkSelected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnCheckMarkSelected' is used in nib 'WalletDataCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconWallet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconWallet' is used in nib 'WalletDataCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "stripe-Logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'stripe-Logo' is used in nib 'WalletDataCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in nib 'WalletDataCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondaryColor' is used in nib 'WalletDataCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in nib 'WalletDataCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _WalletHistoryCouponCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WalletHistoryCouponCell

      let bundle = R.hostingBundle
      let identifier = "WalletHistoryCouponCell"
      let name = "WalletHistoryCouponCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletHistoryCouponCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletHistoryCouponCell
      }

      fileprivate init() {}
    }

    struct _WalletHistoryDataCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WalletHistoryDataCell

      let bundle = R.hostingBundle
      let identifier = "WalletHistoryDataCell"
      let name = "WalletHistoryDataCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletHistoryDataCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletHistoryDataCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try auth.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try home.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct auth: Rswift.StoryboardResourceType, Rswift.Validatable {
      let authNav = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "AuthNav")
      let bundle = R.hostingBundle
      let changePasswordVC = StoryboardViewControllerResource<ChangePasswordVC>(identifier: "ChangePasswordVC")
      let logInVC = StoryboardViewControllerResource<LogInVC>(identifier: "LogInVC")
      let name = "Auth"
      let onboardingVC = StoryboardViewControllerResource<OnboardingVC>(identifier: "OnboardingVC")
      let registerUserDetailVC = StoryboardViewControllerResource<RegisterUserDetailVC>(identifier: "RegisterUserDetailVC")
      let registerVerifyPhoneVC = StoryboardViewControllerResource<RegisterVerifyPhoneVC>(identifier: "RegisterVerifyPhoneVC")
      let validatePhoneVC = StoryboardViewControllerResource<ValidatePhoneVC>(identifier: "ValidatePhoneVC")

      func authNav(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: authNav)
      }

      func changePasswordVC(_: Void = ()) -> ChangePasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePasswordVC)
      }

      func logInVC(_: Void = ()) -> LogInVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: logInVC)
      }

      func onboardingVC(_: Void = ()) -> OnboardingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onboardingVC)
      }

      func registerUserDetailVC(_: Void = ()) -> RegisterUserDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerUserDetailVC)
      }

      func registerVerifyPhoneVC(_: Void = ()) -> RegisterVerifyPhoneVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerVerifyPhoneVC)
      }

      func validatePhoneVC(_: Void = ()) -> ValidatePhoneVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: validatePhoneVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "btnBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnBack' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "launchScreenIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launchScreenIcon' is used in storyboard 'Auth', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "bgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'bgColor' is used in storyboard 'Auth', but couldn't be loaded.") }
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in storyboard 'Auth', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondaryColor' is used in storyboard 'Auth', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in storyboard 'Auth', but couldn't be loaded.") }
        }
        if _R.storyboard.auth().authNav() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'authNav' could not be loaded from storyboard 'Auth' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.auth().changePasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePasswordVC' could not be loaded from storyboard 'Auth' as 'ChangePasswordVC'.") }
        if _R.storyboard.auth().logInVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'logInVC' could not be loaded from storyboard 'Auth' as 'LogInVC'.") }
        if _R.storyboard.auth().onboardingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onboardingVC' could not be loaded from storyboard 'Auth' as 'OnboardingVC'.") }
        if _R.storyboard.auth().registerUserDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerUserDetailVC' could not be loaded from storyboard 'Auth' as 'RegisterUserDetailVC'.") }
        if _R.storyboard.auth().registerVerifyPhoneVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerVerifyPhoneVC' could not be loaded from storyboard 'Auth' as 'RegisterVerifyPhoneVC'.") }
        if _R.storyboard.auth().validatePhoneVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'validatePhoneVC' could not be loaded from storyboard 'Auth' as 'ValidatePhoneVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct home: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let chatVC = StoryboardViewControllerResource<ChatVC>(identifier: "ChatVC")
      let driverProfileVC = StoryboardViewControllerResource<DriverProfileVC>(identifier: "DriverProfileVC")
      let editProfileVC = StoryboardViewControllerResource<EditProfileVC>(identifier: "EditProfileVC")
      let homeBottomViewStage1VC = StoryboardViewControllerResource<HomeBottomViewStage1VC>(identifier: "HomeBottomViewStage1VC")
      let homeBottomViewStage2VC = StoryboardViewControllerResource<HomeBottomViewStage2VC>(identifier: "HomeBottomViewStage2VC")
      let homeBottomViewStage3VC = StoryboardViewControllerResource<HomeBottomViewStage3VC>(identifier: "HomeBottomViewStage3VC")
      let homeBottomViewStage4VC = StoryboardViewControllerResource<HomeBottomViewStage4VC>(identifier: "HomeBottomViewStage4VC")
      let homeNav = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "HomeNav")
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let manageCardsVC = StoryboardViewControllerResource<ManageCardsVC>(identifier: "ManageCardsVC")
      let name = "Home"
      let payOnlineVC = StoryboardViewControllerResource<PayOnlineVC>(identifier: "PayOnlineVC")
      let profileVC = StoryboardViewControllerResource<ProfileVC>(identifier: "ProfileVC")
      let rideDetailVC = StoryboardViewControllerResource<RideDetailVC>(identifier: "RideDetailVC")
      let rideHistoryVC = StoryboardViewControllerResource<RideHistoryVC>(identifier: "RideHistoryVC")
      let rideReceiptVC = StoryboardViewControllerResource<RideReceiptVC>(identifier: "RideReceiptVC")
      let scheduledRidesVC = StoryboardViewControllerResource<ScheduledRidesVC>(identifier: "ScheduledRidesVC")
      let settingsVC = StoryboardViewControllerResource<SettingsVC>(identifier: "SettingsVC")
      let supportVC = StoryboardViewControllerResource<SupportVC>(identifier: "SupportVC")
      let walletAndCouponVC = StoryboardViewControllerResource<WalletAndCouponVC>(identifier: "WalletAndCouponVC")
      let walletVC = StoryboardViewControllerResource<WalletVC>(identifier: "WalletVC")

      func chatVC(_: Void = ()) -> ChatVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatVC)
      }

      func driverProfileVC(_: Void = ()) -> DriverProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: driverProfileVC)
      }

      func editProfileVC(_: Void = ()) -> EditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileVC)
      }

      func homeBottomViewStage1VC(_: Void = ()) -> HomeBottomViewStage1VC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeBottomViewStage1VC)
      }

      func homeBottomViewStage2VC(_: Void = ()) -> HomeBottomViewStage2VC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeBottomViewStage2VC)
      }

      func homeBottomViewStage3VC(_: Void = ()) -> HomeBottomViewStage3VC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeBottomViewStage3VC)
      }

      func homeBottomViewStage4VC(_: Void = ()) -> HomeBottomViewStage4VC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeBottomViewStage4VC)
      }

      func homeNav(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeNav)
      }

      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }

      func manageCardsVC(_: Void = ()) -> ManageCardsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: manageCardsVC)
      }

      func payOnlineVC(_: Void = ()) -> PayOnlineVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: payOnlineVC)
      }

      func profileVC(_: Void = ()) -> ProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileVC)
      }

      func rideDetailVC(_: Void = ()) -> RideDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rideDetailVC)
      }

      func rideHistoryVC(_: Void = ()) -> RideHistoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rideHistoryVC)
      }

      func rideReceiptVC(_: Void = ()) -> RideReceiptVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rideReceiptVC)
      }

      func scheduledRidesVC(_: Void = ()) -> ScheduledRidesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scheduledRidesVC)
      }

      func settingsVC(_: Void = ()) -> SettingsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsVC)
      }

      func supportVC(_: Void = ()) -> SupportVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: supportVC)
      }

      func walletAndCouponVC(_: Void = ()) -> WalletAndCouponVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletAndCouponVC)
      }

      func walletVC(_: Void = ()) -> WalletVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "btnBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnBack' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btnCrossSmall", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnCrossSmall' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btnEdit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnEdit' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btnSideMenu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnSideMenu' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chatSendButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chatSendButton' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconVisa", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconVisa' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "roundWheelIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'roundWheelIcon' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "targetHomeIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'targetHomeIcon' is used in storyboard 'Home', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "bgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'bgColor' is used in storyboard 'Home', but couldn't be loaded.") }
          if UIKit.UIColor(named: "darkGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'darkGrayColor' is used in storyboard 'Home', but couldn't be loaded.") }
          if UIKit.UIColor(named: "placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'placeholder' is used in storyboard 'Home', but couldn't be loaded.") }
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in storyboard 'Home', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondaryColor' is used in storyboard 'Home', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint1' is used in storyboard 'Home', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint2' is used in storyboard 'Home', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint3' is used in storyboard 'Home', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tint_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tint_1' is used in storyboard 'Home', but couldn't be loaded.") }
          if UIKit.UIColor(named: "tretiaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'tretiaryColor' is used in storyboard 'Home', but couldn't be loaded.") }
        }
        if _R.storyboard.home().chatVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatVC' could not be loaded from storyboard 'Home' as 'ChatVC'.") }
        if _R.storyboard.home().driverProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'driverProfileVC' could not be loaded from storyboard 'Home' as 'DriverProfileVC'.") }
        if _R.storyboard.home().editProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'Home' as 'EditProfileVC'.") }
        if _R.storyboard.home().homeBottomViewStage1VC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeBottomViewStage1VC' could not be loaded from storyboard 'Home' as 'HomeBottomViewStage1VC'.") }
        if _R.storyboard.home().homeBottomViewStage2VC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeBottomViewStage2VC' could not be loaded from storyboard 'Home' as 'HomeBottomViewStage2VC'.") }
        if _R.storyboard.home().homeBottomViewStage3VC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeBottomViewStage3VC' could not be loaded from storyboard 'Home' as 'HomeBottomViewStage3VC'.") }
        if _R.storyboard.home().homeBottomViewStage4VC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeBottomViewStage4VC' could not be loaded from storyboard 'Home' as 'HomeBottomViewStage4VC'.") }
        if _R.storyboard.home().homeNav() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeNav' could not be loaded from storyboard 'Home' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.home().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'Home' as 'HomeVC'.") }
        if _R.storyboard.home().manageCardsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'manageCardsVC' could not be loaded from storyboard 'Home' as 'ManageCardsVC'.") }
        if _R.storyboard.home().payOnlineVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'payOnlineVC' could not be loaded from storyboard 'Home' as 'PayOnlineVC'.") }
        if _R.storyboard.home().profileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileVC' could not be loaded from storyboard 'Home' as 'ProfileVC'.") }
        if _R.storyboard.home().rideDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rideDetailVC' could not be loaded from storyboard 'Home' as 'RideDetailVC'.") }
        if _R.storyboard.home().rideHistoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rideHistoryVC' could not be loaded from storyboard 'Home' as 'RideHistoryVC'.") }
        if _R.storyboard.home().rideReceiptVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rideReceiptVC' could not be loaded from storyboard 'Home' as 'RideReceiptVC'.") }
        if _R.storyboard.home().scheduledRidesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scheduledRidesVC' could not be loaded from storyboard 'Home' as 'ScheduledRidesVC'.") }
        if _R.storyboard.home().settingsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsVC' could not be loaded from storyboard 'Home' as 'SettingsVC'.") }
        if _R.storyboard.home().supportVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'supportVC' could not be loaded from storyboard 'Home' as 'SupportVC'.") }
        if _R.storyboard.home().walletAndCouponVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletAndCouponVC' could not be loaded from storyboard 'Home' as 'WalletAndCouponVC'.") }
        if _R.storyboard.home().walletVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletVC' could not be loaded from storyboard 'Home' as 'WalletVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "launchScreenIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launchScreenIcon' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
